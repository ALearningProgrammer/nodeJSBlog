-- MySQL dump 10.13  Distrib 5.7.12, for Win64 (x86_64)
--
-- Host: localhost    Database: nodejsblog1
-- ------------------------------------------------------
-- Server version	5.7.16-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `li_article`
--

DROP TABLE IF EXISTS `li_article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `li_article` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `abstract` text,
  `content` text NOT NULL,
  `picurl` varchar(255) DEFAULT NULL,
  `author` varchar(255) DEFAULT NULL,
  `createtime` datetime DEFAULT NULL,
  `view` bigint(20) DEFAULT '1',
  `totop` smallint(6) DEFAULT '0',
  `torecom` smallint(6) DEFAULT '0',
  `topicrecom` smallint(6) DEFAULT '0',
  `tag` int(11) DEFAULT NULL,
  `keywords` varchar(255) DEFAULT NULL,
  `allowcomment` int(11) DEFAULT '1',
  `ispublished` int(11) DEFAULT '0',
  `from` varchar(255) DEFAULT NULL,
  `item` int(11) DEFAULT NULL,
  `like` int(11) DEFAULT '0' COMMENT '喜欢',
  `flag_a` smallint(255) DEFAULT '0',
  `flag_b` smallint(255) DEFAULT '0',
  `flag_c` smallint(255) DEFAULT '0',
  `flag_d` smallint(255) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=463 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `li_article`
--

LOCK TABLES `li_article` WRITE;
/*!40000 ALTER TABLE `li_article` DISABLE KEYS */;
INSERT INTO `li_article` VALUES (308,'苏宁校园招聘（1200工程）','苏宁创立于1990年，始终致力于商业零售经营，建立了覆盖海内外600多个城市的实体连锁与电子商务开放平台, 在中国和日本拥有两家上市公司。拥有员工18万人，是中国最大的零售服务企业。','<p><b>公司简介:</b></p><p>苏宁创立于1990年，始终致力于商业零售经营，建立了覆盖海内外600多个城市的实体连锁与电子商务开放平台, 在中国和日本拥有两家上市公司。拥有员工18万人，是中国最大的零售服务企业。秉承“引领产业生态、共创品质生活”的企业使命，苏宁产业经营不断拓展，下设苏宁云商、苏宁置业、苏宁文创、苏宁投资、苏宁金控、苏宁体育六大产业集团，业务涵盖国内、香港、美国、日本、意大利等国家和地区，未来苏宁海外拓展将高速发展，并继续拓展东南亚及欧美市场。</p><p>网址：<a href=\"http://campus.suning.cn\" target=\"_blank\">http://campus.suning.cn</a></p><p><br></p><p><b>职位描述：\n</b></p><p>1、使用HTML/CSS/JavaScript开发PC和Mobile项目；&nbsp;<br>2、参与中小型项目的页面切图和模板视图层开发；&nbsp;<br>3、与后台工程师（java或PHP）制定技术实现方案、服务接口等；&nbsp;<br>4、前端基础组件平台开发和维护；&nbsp;<br>5、优化产品，为用户提供更好的视觉和操作体验。</p><p><b>职位要求：\n</b></p><p>1、本科及以上学历，计算机科学与技术、软件工程、信息与计算科学等相关专业；&nbsp;<br>2、能够运用HTML+CSS来开发符合W3C标准的静态页面，兼容各大浏览器(IE6- IE10,Chrome,Safari,Firefox,Opera)；&nbsp;<br>3、基本掌握XHTML/HTML5/CSS/CSS3/JavaScript等前端技术；&nbsp;<br>4、至少熟悉一种JS框架（如 jQuery，Backbone，Angular，React，Vue）,精通jQuery更佳；&nbsp;<br>5、至少了解一门后端开发语言（Java/PHP/Python/Ruby）。</p><p><b>公司地址：南京市玄武区苏宁大道1号苏宁易购楼</b></p><p><br></p><p><br></p>','/static/upload/pics/2018/01/06xT4IdVyDMSI4PL9h46l7GDaE.png','saucxs','2018-01-06 14:30:28',643,1,1,1,15,'招聘，苏宁',1,1,'网络',5,0,1,1,1,1),(436,'docker初体验，搭建自用的gitlab服务(一)','docker初体验，搭建自用的gitlab服务','<p>一、前言</p><p>git在如日中天的版本管理系统，现在如果不是工作在git版本管理系统下，几乎都不好意思给人打招呼。现在就有现成的互联网的git服务器提供给大家使用，例如号称程序的社交网络github。</p><p>正好gitlab公司提供了gitlab社区版，gitlab安装方式又很多安装方式，最方便的使用docker方式安装，现在讲步骤记录下，希望对有需求的人有所帮助。</p><p><br></p><p>二、docker安装</p><p>首先是安装 docker 环境了。我是在 centos 7 的基础上安装的。根据<font color=\"#008000\"><a target=\"_blank\" href=\"https://link.juejin.im/?target=https%3A%2F%2Fdocs.docker.com%2Fengine%2Finstallation%2Flinux%2Fdocker-ce%2Fcentos%2F\">官网的指南</a></font></p><p>1、增加docker yum源</p><p>新的docker yum源叫做docker-ce，如果第一次安装docker-ce需要设置docker-ce的yum源。用如下命令来增加docker-ce的yum源</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"bash hljs\" codemark=\"1\">yum install -y yum-utils device-mapper-persistent-data lvm2\nyum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nyum-config-manager --enable docker-ce-edge\nyum-config-manager --enable docker-ce-test</code></pre><p><img src=\"/static/upload/pics/2018/10/29t_p10F0XMaXPQ3bHY4XfpA9k.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p><img src=\"/static/upload/pics/2018/10/29opjxzURgmg49SHfeJHZNkXn7.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p><img src=\"/static/upload/pics/2018/10/29iZd6oaH1rOyR1f7xfTAmL1ix.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p><img src=\"/static/upload/pics/2018/10/295OqsIxNJVp-AiKZhcZP5gvfS.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p><br></p><p>2、如果你之前安装过docker，删除旧版本的docker</p><p>旧版本的 docker 的叫做 docker 或者 docker-engine，如果系统中已经安装旧版本，则需要删除。通过一下命令删除旧的 docker 版本。</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"bash hljs\" codemark=\"1\">yum remove docker docker-common docker-selinux docker-engine</code></pre><p><br></p><p>3、安装docker-ce</p><p>首先我们检查一下所有有效的docker-ce的版本</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"bash hljs\" codemark=\"1\">yum list docker-ce --showduplicates | sort -r</code></pre><p><img src=\"/static/upload/pics/2018/10/29rJoLTMU5ECr3OtfLe6Aot3OG.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p>我们选择最新的额稳定版是18.06.1.ce。我们使用下面的命令安装该版本</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"bash hljs\" codemark=\"1\">yum install docker-ce-18.06.1.ce</code></pre><p><img src=\"/static/upload/pics/2018/10/29D756w2mjkGvzOpWHnCOcB6Rc.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p>这个安装时间比较长吧，静静等待，大约花费4min</p><p><br></p><p>4、启动docker</p><p>执行如下的命令启动 docker 的服务</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"bash hljs\" codemark=\"1\">systemctl start docker</code></pre><p><img src=\"/static/upload/pics/2018/10/29j-zve62iL9z0A7wved-AW-FY.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p>执行如下命令，查看docker信息</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"bash hljs\" codemark=\"1\">docker info</code></pre><p><img src=\"/static/upload/pics/2018/10/29UmTQWd5CWjQ2OQxSK5ElB8Kj.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p>目前我没有修改docker配置，我觉得docker下载镜像速度还行，并没有网上说的很慢，暂时不修改运行目录和镜像仓库地址</p><p><b><font color=\"#ff0000\">上述完成了docker安装。接下来安装gitlab</font></b></p><p><br></p><p>三、安装gitlab</p><p>1、下载镜像</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"bash hljs\" codemark=\"1\">docker pull gitlab/gitlab-ce:latest</code></pre><p><img src=\"/static/upload/pics/2018/10/29pRd2VO94EuBN7o6KYPPNHUBi.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p>镜像有1g多，需要等待一段时间</p><p><br></p><p>2、数据持久化保存</p><p>因为docker容器的数据是不能持久化保存的。所以我们需要使用docker volume的方式将存储的数据映射到操作系统的目录中来。这样就算运行的容器奔溃了，我们从新启动一个新的容器。原来容器的数据还是不会丢失</p><p>我们建立目录/home/databaken/gitlab来保存gitlab容器中的数据</p><p><br></p><p>3、准备映射sshd</p><p>在系统防火墙中打开HTTP和SSH访问，git是采用ssh协议来操作git仓库的，我们将主机的sshd的22端口映射到容器中去。将主机的sshd端口更改为15678.这里是centos7的更严格的安全机制，算是一个坑，按照下面步骤进行</p><p>（1）编辑文件/etc/ssh/sshd_config，将其中的#port 22注释去掉，将数字22修改为15678</p><p>（2）执行命令重启sshd服务</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"bash hljs\" codemark=\"1\">systemctl restart sshd</code></pre><p><img src=\"/static/upload/pics/2018/10/29fATVh9N4KmZKrrdbox5urt1L.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p>（3）运行下面的命令是15678端口可以对外提供服务。否则无法远程的ssh登陆</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"bash hljs\" codemark=\"1\">semanage port <span class=\"hljs-_\">-a</span> -t ssh_port_t -p tcp 15678\nfirewall-cmd --permanent --add-port=15678/tcp\nfirewall-cmd --reload </code></pre><p><img src=\"/static/upload/pics/2018/10/29lH_Xr6K64SAVN3Gv5OUognTY.png\" alt=\"\" style=\"max-width:100%;\" class=\"\"><br></p><p>告诉我firewall服务没有启动，使用下面命令启动防火墙命令</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"bash hljs\" codemark=\"1\">//运行防火墙服务\nsystemctl start firewalld.service</code></pre><p><img src=\"/static/upload/pics/2018/10/29D0kvQsWUvoi2svHVfZ5IAM7X.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p>因为之前乜有开启防火墙服务，这一启动，4个系统都无法访问，需要将80端口和443端口允许外网访问到。</p><p><img src=\"/static/upload/pics/2018/10/29jpJuHU8t6AvU8EgiZDocIy2H.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p><br></p><p>4、运行gitlab</p><p>我把本地服务防火墙的22端口也放开</p><p><img src=\"/static/upload/pics/2018/10/29ODrRsSmPpeAKbOIIImBz2Jhn.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p>然后运行gitlab</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"bash hljs\" codemark=\"1\">docker run \\\n    --publish 4433:443 --publish 9001:80 --publish 22:22 \\\n    --name gitlab \\\n    --volume /home/databaken/gitlabdata/config:/etc/gitlab \\\n    --volume /home/databaken/gitlabdata/logs:/var/<span class=\"hljs-built_in\">log</span>/gitlab \\\n    --volume /home/databaken/gitlabdata/data:/var/opt/gitlab \\\n    gitlab/gitlab-ce</code></pre><p>这里把主机的 4433、9001、22 端口直接转发到容器，意思就是说：本地服务的4433端口，8080端口，22端口已经占用，访问本地服务的4433端口就是访问docker容器gitlab的443端口，访问本地服务的9001端口就是访问docker容器gitlab的80端口，访问本地服务的22端口就是访问docker容器gitlab的22端口。</p><p>同时利用 --volume /home/databaken/gitlabdata/config:/etc/gitlab 、</p><p>&nbsp;--volume /home/databaken/gitlabdata/logs:/var/log/gitlab 、&nbsp;</p><p>--volume /home/databaken/gitlabdata/data:/var/opt/gitlab&nbsp;</p><p>这三个参数将 gitlab 的配置、数据和日志持久化到主机文件系统上来。</p><p><br></p><p>按照道理，这个时候，你直接访问服务器的ip:9001，就可以访问到gitlab，糟糕的是自己服务器是1核1G运行内存，哈哈。。。。肯定是跑不起来gitlab，因为说gitlab要求最低是4G运行内存，虽然我尝试了swap，构建了2G的虚拟内存，但是gitlab跑起来还是，容器还是奔溃了。</p><p>服务器运行内存太低，所以暂时不考虑跑gitlab</p><p>相应错误可以在<a href=\"https://www.mwcxs.top/topic/item/45.html\" target=\"_blank\">https://www.mwcxs.top/topic/item/45.html</a>查到。</p><p><br></p>','/static/upload/pics/2018/10/30WfCe9mt2VhIpx1AtpBgH1RpP.jpg','saucxs','2018-10-30 21:57:48',67,1,0,0,24,'docker,初体验,搭建,自用,gitlab,服务',1,1,'https://www.cnblogs.com/chengxs/p/9879867.html',1,0,1,0,0,0),(421,'安装window下的redis，redis可视化管理工具（Redis Desktop Manager）安装，基础使用，实例化项目','安装window下的redis，redis可视化管理工具（Redis Desktop Manager）安装，基础使用，实例化项目','<p>以下包括内容：</p><p>一、redis下载安装，启动</p><p>二、Redis可视化管理工具（Redis Desktop Manager）安装</p><p>三、实例化项目</p><p>&nbsp;</p><p>一、redis下载安装，启动</p><p>1，redis官方下载地址：<a href=\"https://redis.io/download\" target=\"_blank\">https://redis.io/download</a>，redis 64位下载地址：<a href=\"https://github.com/ServiceStack/redis-windows\" target=\"_blank\">https://github.com/ServiceStack/redis-windows</a>，本人测试使用的是redis-64.3.0.503版本。</p><p><img src=\"https://images2018.cnblogs.com/blog/900740/201808/900740-20180822174831729-297829385.png\" alt=\"\"></p><p>&nbsp;</p><p>&nbsp;</p><p>2、解压redis-64.3.0.503.zip，解压后的文件结构如下：</p><p><img src=\"https://images2018.cnblogs.com/blog/900740/201808/900740-20180812212450755-1404745642.png\" alt=\"\"></p><p>&nbsp;</p><p>&nbsp;</p><p>3、修改redis.windows.conf文件，设置maxmemory 大小</p><p>&nbsp;<img src=\"https://images2018.cnblogs.com/blog/900740/201808/900740-20180812212551005-1023800221.png\" alt=\"\"></p><p>&nbsp;</p><p>设置redis密码</p><p>&nbsp;<img src=\"https://images2018.cnblogs.com/blog/900740/201808/900740-20180812212512915-1194787448.png\" alt=\"\"></p><p>&nbsp;</p><p>4、启动redis:</p><blockquote>redis-server.exe redis.windows.conf</blockquote><p><img src=\"https://images2018.cnblogs.com/blog/900740/201805/900740-20180525213857253-1004007223.png\" alt=\"\"></p><p>&nbsp;</p><p>5、测试，成功安装：</p><p><img src=\"https://images2018.cnblogs.com/blog/900740/201808/900740-20180827211818066-366701223.png\" alt=\"\"></p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;6、将redis加入到windows的服务中（都是两个-）</p><pre>redis-server --service-install redis.windows.conf --loglevel verbose</pre><p><img src=\"https://images2018.cnblogs.com/blog/900740/201805/900740-20180525215107622-1712402627.png\" alt=\"\"></p><p>&nbsp;</p><p>7、安装成功</p><p><img src=\"https://images2018.cnblogs.com/blog/900740/201805/900740-20180525215036141-411132990.png\" alt=\"\"></p><p>&nbsp;</p><p>8、但是安装好之后，Redis并没有启动，</p><p>（1）启动命令如下：</p><ol><li>redis-server&nbsp;--service-start</li></ol><p>（2）停止命令：</p><ol><li>redis-server&nbsp;--service-stop</li></ol><p>（3）还可以安装多个实例</p><ol><li>redis-server&nbsp;--service-install&nbsp;–service-name redisService1&nbsp;–port&nbsp;10001</li><li>redis-server&nbsp;--service-start&nbsp;–service-name redisService1</li><li>redis-server&nbsp;--service-install&nbsp;–service-name redisService2&nbsp;–port&nbsp;10002</li><li>redis-server&nbsp;--service-start&nbsp;–service-name redisService2</li><li>redis-server&nbsp;--service-install&nbsp;–service-name redisService3&nbsp;–port&nbsp;10003</li><li>redis-server&nbsp;--service-start&nbsp;–service-name redisService3</li></ol><p>（4）卸载命令：</p><ol><li>redis-server&nbsp;--service-uninstall</li></ol><p>&nbsp;</p><p>二、Redis可视化管理工具（Redis Desktop Manager）安装</p><p>1、安装过程</p><p><img src=\"https://images2018.cnblogs.com/blog/900740/201805/900740-20180529223732249-856798621.png\" alt=\"\"></p><p><img src=\"https://images2018.cnblogs.com/blog/900740/201805/900740-20180529223825483-1208704894.png\" alt=\"\"></p><p><img src=\"https://images2018.cnblogs.com/blog/900740/201805/900740-20180529223913379-501197861.png\" alt=\"\"></p><p><img src=\"https://images2018.cnblogs.com/blog/900740/201805/900740-20180529224107425-1893009414.png\" alt=\"\"></p><p>&nbsp;</p><p>三、基本操作</p><p>首先确定redis服务启动没有：</p><p><img src=\"https://images2018.cnblogs.com/blog/900740/201808/900740-20180811230500101-1668058419.png\" alt=\"\"></p><p>出现这样的就好了。</p><p>&nbsp;1、新建连接</p><p>自己起一个redis名字，随便取，输入redis的连接服务器密码，保存就好</p><p>&nbsp;<img src=\"https://images2018.cnblogs.com/blog/900740/201808/900740-20180811231849716-58935052.png\" alt=\"\"></p><p>&nbsp;</p><p>自己之前设置的myKey，userInfo，username的值</p><p>&nbsp;<img src=\"https://images2018.cnblogs.com/blog/900740/201808/900740-20180811230815743-32462400.png\" alt=\"\"></p><p>第一条的值是，自己singlePointSystem系统（<a href=\"https://github.com/saucxs/PointSingleSystem\" target=\"_blank\">https://github.com/saucxs/PointSingleSystem</a>）的登录的时候，把成功的登录的结果存到redis服务器中，这样就不用每一次都从服务器里查询是否登录。</p><p>样例如下：</p><p><img src=\"https://images2018.cnblogs.com/blog/900740/201808/900740-20180811234256644-1872287861.png\" alt=\"\"></p><p>&nbsp;</p><p>在nodejs的thinkJs的配置redis服务</p><p></p><p><img src=\"https://images2018.cnblogs.com/blog/900740/201808/900740-20180812211307765-1113474682.png\" alt=\"\"></p><p><br></p>','/static/upload/pics/2018/10/297q98e-e3n36ssq5Qwy7Z16y6.jpg','saucxs','2018-10-29 12:06:31',115,1,1,1,1,'安装,window,redis,redis可视化管理工具,Redis Desktop Manager,安装,基础使用,实例化项目',1,1,'https://www.cnblogs.com/chengxs/p/9090819.html ',1,0,1,1,1,1),(422,'windows server，nginx安装,配置,运行nodeJS后端的web项目的实现，以及错误分析及解决方法','windows server，nginx安装,配置,运行nodeJS后端的web项目的实现，以及错误分析及解决方法','<p>如果对nodeJS的后端的系统，源代码在github上，<a href=\"https://github.com/saucxs/nodeJSBlog\" target=\"_blank\">https://github.com/saucxs/nodeJSBlog</a>&nbsp;，如果觉得可以，请请star并fork项目</p><p>项目地址：<a href=\"http://www.mwcxs.top/\" target=\"_blank\">http://www.mwcxs.top/</a></p><p>&nbsp;</p><p>接下来你会看到以下部分：</p><p>一、安装nginx</p><p>二、将Nginx设置为Windows服务</p><p>三、将Nginx设置为Windows服务</p><p>四、&nbsp;将项目文件上传到服务器指定的地方</p><p>五、使用nssm在windows服务器上部署nodeJS</p><p>六、但是外网访问不了</p><p>&nbsp;</p><p>&nbsp;之前弄过linux服务器，弄过win服务器，感觉linux服务器作为服务器才是最佳的选择，选择ubuntu系统，或者centos最为服务器也比win服务器好，配置更简单，逼格更高，但是有出现win服务器</p><p>的时候也可以玩一玩，遇到坑，踩一踩，填一填，就会收获很多。</p><p>下面进入到正题。</p><p>一、安装nginx</p><p>下载windows版nginx （http://nginx.org/download/nginx-1.12.2.zip），之后解压到需要放置的位置（C:\\nginx）</p><p>&nbsp;<img src=\"http://images2017.cnblogs.com/blog/900740/201801/900740-20180101143151940-964687365.png\" alt=\"\"></p><p>&nbsp;</p><h2>二、将Nginx设置为Windows服务</h2><p>需要借助\"Windows Service Wrapper\"小工具，项目地址：&nbsp;<a href=\"https://github.com/kohsuke/winsw\" target=\"_blank\">https://github.com/kohsuke/winsw</a></p><p>&nbsp;</p><p>下载地址：&nbsp;<a href=\"http://repo.jenkins-ci.org/releases/com/sun/winsw/winsw/1.18/winsw-1.18-bin.exe\" target=\"_blank\">http://repo.jenkins-ci.org/releases/com/sun/winsw/winsw/1.18/winsw-1.18-bin.exe</a></p><p>&nbsp;</p><p>下载该工具后，将其放在 Nginx安装目录下，并重命名为nginx-service.exe，创建配置文件nginx-service.xml（名字要和工具名一样）。</p><p>下面是nginx-service.xml文件内容：</p><pre>&lt;service&gt;\n  &lt;id&gt;nginx&lt;/id&gt;\n  &lt;name&gt;Nginx Service&lt;/name&gt;\n  &lt;description&gt;High Performance Nginx Service&lt;/description&gt;\n  &lt;logpath&gt;D:\\xampp\\nginx\\logs&lt;/logpath&gt;\n  &lt;log mode=\"roll-by-size\"&gt;\n    &lt;sizeThreshold&gt;10240&lt;/sizeThreshold&gt;\n    &lt;keepFiles&gt;8&lt;/keepFiles&gt;\n  &lt;/log&gt;\n  &lt;executable&gt;D:\\xampp\\nginx\\nginx.exe&lt;/executable&gt;\n  &lt;startarguments&gt;-p D:\\xampp\\nginx&lt;/startarguments&gt;\n  &lt;stopexecutable&gt;D:\\xampp\\nginx\\nginx.exe&lt;/stopexecutable&gt;\n  &lt;stoparguments&gt;-p D:\\xampp\\nginx -s stop&lt;/stoparguments&gt;\n&lt;/service&gt;</pre><p>&nbsp;</p><p>在cmd中运行如下命令安装windows服务</p><pre>C:\\nginx\\nginx-service.exe install</pre><p>在服务中，浏览器可以正常访问，localhost。</p><p>&nbsp;</p><p>注意：</p><p>（1）卸载服务</p><pre>C:\\nginx\\nginx-service.exe uninstall</pre><p>（2）查看系统服务</p><p>在命令行中输入</p><pre>services.msc</pre><p><img src=\"http://images2017.cnblogs.com/blog/900740/201801/900740-20180101142542034-226450367.png\" alt=\"\"></p><p>（3）启动服务（命令行）</p><pre>net start nginx</pre><p>（4）关闭服务（命令行）</p><pre>net stop nginx</pre><p>&nbsp;</p><p>三、将Nginx设置为Windows服务</p><p>&nbsp;配置项Nginx核心配置文件是nginx.conf</p><pre>worker_processes  1;\nevents {\n    worker_connections  1024;\n}\nhttp{\n   include       mime.types;\n\n     default_type  application/octet-stream;\n\n     sendfile on;\n     tcp_nopush on;\n     tcp_nodelay on;\n\n     keepalive_timeout 60;\n\n     client_header_buffer_size 4k;\n\n     open_file_cache max=51200 inactive=20s;\n     open_file_cache_valid 30s;\n     open_file_cache_min_uses 1;\n\n     types_hash_max_size 2048;\n     client_max_body_size 10m;\n\n     gzip_vary on;\n     gzip_proxied any;\n     gzip_comp_level 6;\n     gzip_buffers 16 8k;\n     gzip_http_version 1.1;\n     gzip_types text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml;\n     gzip on;\n     gzip_disable \"msie6\";\n\nserver {\n    listen 80;\n    server_name www<strong>.mwcxs.top</strong>;\n    root XXXX;\n    set $node_port 8361;\n\n    index index.js index.html index.htm;\n    if ( -f $request_filename/index.html ){\n        rewrite (.*) $1/index.html break;\n    }\n    if ( !-f $request_filename ){\n        rewrite (.*) /index.js;\n    }\n    location = /index.js {\n        proxy_http_version 1.1;\n        proxy_set_header Connection \"\";\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-NginX-Proxy true;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_pass http://127.0.0.1:$node_port$request_uri;\n        proxy_redirect off;\n    }\n\n    location = /production.js {\n        deny all;\n    }\n\n    location = /testing.js {\n        deny all;\n    }\n\n    location ~ /static/ {\n        etag         on;\n        expires      max;\n    }\n}   \n}</pre><p>&nbsp;</p><p>记住一定不要用记事本编辑conf文件，推荐使用notepad++，因为本人就是使用记事本在服务器上修改，导致了服务进行意外停止，启动不了服务。报错如下图所示：</p><p><img src=\"http://images2017.cnblogs.com/blog/900740/201801/900740-20180101144049956-1774755405.png\" alt=\"\"></p><p>1、超级无敌大错特错不能容忍的操作习惯-用记事本修改配置文件引起的1067错误</p><p>由于这种原因修改.conf为后缀的配置文件产生的1067错误是毁灭性的，只要你用记事本编辑保存了配置文件，不管你怎么尝试都无法启动，用其它软件再次编辑保存也无效，直到你拿原始文件覆盖为止。</p><p>推荐用<a href=\"http://www.upupw.net/website/n20.html\" target=\"_blank\">源代码编辑利器Notepad6.3.3简体中文绿色版</a>编辑配置文件</p><p>参考：http://www.upupw.net/bug/n61.html</p><p>问题才得以解决。先在本地使用notepad++修改配置项，再ftp上传到服务器。</p><p>&nbsp;</p><p>&nbsp;四、将项目文件上传到服务器指定的地方</p><p>通过ftp上到服务器指定地方</p><p>&nbsp;</p><p>五、使用nssm在windows服务器上部署nodeJS</p><p>正常情况下：</p><p>在服务器上推荐使用 pm2 来管理 Node.js 服务，来保证系统正常运行。编辑并保存根目录下的pm2.json&nbsp;</p><pre>{\n  \"apps\": [{\n    \"name\": \"liblog\",\n    \"script\": \"www/production.js\",\n    \"cwd\": \"C:/Work/liblog\",\n    \"max_memory_restart\": \"1G\",\n    \"autorestart\": true,\n    \"node_args\": [],\n    \"args\": [],\n    \"instances\": \"max\",\n    \"exec_mode\": \"cluster\",\n    \"env\": {\n\n    }\n  }]\n}</pre><p>注意：注意：cwd为项目在服务器上的路径</p><p>然后正常是启动服务使用</p><pre>pm2 start pm2.json</pre><p>在Linux上，可以轻松的使用<a href=\"https://github.com/nodejitsu/forever\" target=\"_blank\">forever</a>或者<a href=\"https://github.com/unitech/pm2\" target=\"_blank\">pm2</a>来部署nodejs应用。但是在windows下就麻烦了，pm2明确的说支持Linux & MacOS，forever在windows下貌似问题多多：</p><p><img src=\"http://images2017.cnblogs.com/blog/900740/201801/900740-20180101145258299-586105945.png\" alt=\"\"></p><p>为什么要使用pm2，而不是像本地环境一样，直接使用npm start。</p><p>&nbsp;</p><p>因为服务器是windows的，所以很麻烦的。</p><p>今天先说下比较简单的<a href=\"http://nssm.cc/\" target=\"_blank\">nssm</a>。nssm会监控你安装的<a href=\"http://keenwon.com/1289.html\">node服务</a>，如果node挂了，nssm会自动重启它。</p><p>&nbsp;</p><p>nssm安装使用</p><p>目前最新版的是2.23（<a href=\"http://nssm.cc/release/nssm-2.23.zip\" target=\"_blank\">下载地址</a>），下载之后解压，根据你的系统选择32位和64位的版本，直接在nssm.exe&nbsp;所在目录运行命令行，输入nssw install&nbsp;+你的服务名，例如：</p><pre>nssm install NodeJSBlog</pre><p><img src=\"http://images2017.cnblogs.com/blog/900740/201801/900740-20180101152002268-1840414349.png\" alt=\"\"></p><p>&nbsp;</p><p>在Path&nbsp;中选择你安装的node.exe，Startup directory&nbsp;选择你的node应用的目录，Argument&nbsp;输入你的启动文件，例如在我桌面上运行index.js&nbsp;（在Startup directory目录执行node index.js&nbsp;）：</p><p>&nbsp;<img src=\"https://images2018.cnblogs.com/blog/900740/201806/900740-20180610224000829-1178223990.png\" alt=\"\"></p><p>如果你启动的是 npm start ，就是 node www/development.js</p><p>&nbsp;点击Install Service：</p><p>&nbsp;<img src=\"http://images2017.cnblogs.com/blog/900740/201801/900740-20180101152026690-417332197.png\" alt=\"\"></p><p>之后运行：</p><pre>nssm start NodeJSBlog</pre><p><img src=\"http://images2017.cnblogs.com/blog/900740/201801/900740-20180101152217643-807902479.png\" alt=\"\"></p><p>注意：</p><p>在nssm.exe所在的目录执行</p><p>（1）卸载（删除）该服务</p><pre>nssm remove 服务名</pre><p><img src=\"http://images2017.cnblogs.com/blog/900740/201801/900740-20180103174155159-2018607828.png\" alt=\"\"></p><p>（2）停止该服务</p><p>一种去服务列表中，手动重启，暂停</p><p>一种是命令行：nssm uninstall 服务名</p><p><img src=\"http://images2017.cnblogs.com/blog/900740/201801/900740-20180103175137346-2058643679.png\" alt=\"\"></p><p>&nbsp;</p><p>&nbsp;</p><p>注意：</p><pre>nssm start &lt;servicename&gt;\nnssm stop &lt;servicename&gt;\nnssm restart &lt;servicename&gt;</pre><p>&nbsp;</p><p>&nbsp;服务已经启动：</p><p>可以在服务器的浏览器上查看</p><p><img src=\"http://images2017.cnblogs.com/blog/900740/201801/900740-20180118190248959-317287812.png\" alt=\"\"></p><p>&nbsp;</p><p>&nbsp;六、但是外网访问不了</p><p>&nbsp;6.1外网访问，系统报nginx 504 Gateway Time-out，Windows服务器外网无法访问web的解决方法</p><p>才发现是自己服务器的防火墙没有开启web的80 端口。</p><p><img src=\"http://images2017.cnblogs.com/blog/900740/201801/900740-20180101153144753-1617823003.png\" alt=\"\"></p><p>&nbsp;（1）新建规则，选择端口</p><p>&nbsp;<img src=\"http://images2017.cnblogs.com/blog/900740/201801/900740-20180101153318034-1762453858.png\" alt=\"\"></p><p>（2）选择tcp，以及特定的本地端口</p><p><img src=\"http://images2017.cnblogs.com/blog/900740/201801/900740-20180101153347659-974216995.png\" alt=\"\"></p><p>（3）选择允许连接</p><p><img src=\"http://images2017.cnblogs.com/blog/900740/201801/900740-20180101153444034-1195366870.png\" alt=\"\"></p><p>&nbsp;</p><p>（4）使用该规则选择全部</p><p><img src=\"http://images2017.cnblogs.com/blog/900740/201801/900740-20180101153540346-1022781209.png\" alt=\"\"></p><p>（5）名称以及描述</p><p><img src=\"http://images2017.cnblogs.com/blog/900740/201801/900740-20180101153620221-304579674.png\" alt=\"\"></p><p>这样设置之后</p><p>&nbsp;</p><p>6.2内网可以访问，外网访问不了，报服务器502</p><p><img src=\"https://images2018.cnblogs.com/blog/900740/201806/900740-20180610224710244-1777747223.png\" alt=\"\"></p><p>&nbsp;其实502的错误是很多原因造成的，但是自己的系统也突然出现了这个问题，发现了是自己的nginx配置的日志过大，网页文件没多少，最后排查得知是日志文件占满了空间。一般日志文件在这个目录：</p><p>　　nginx/logs文件夹下面</p><p>解决方案：</p><p>logs文件夹都删掉，删不掉就不删，然后重启服务器，一切正常。</p><p>PS：window服务下的nginx，参考这篇文章的：二、将Nginx设置为Windows服务</p><p>&nbsp;</p><p>外网就可以访问nginx的配置的nodeJS后台系统。欢迎访问：<a href=\"http://www.mwcxs.top/\" target=\"_blank\">http://www.mwcxs.top</a><a href=\"http://www.cnblogs.com/blog.mwcxs.top\" target=\"_blank\"></a></p><p><br></p><p></p><p>如果在win服务器上配置nodeJS服务，可以留言交流</p><p><br></p>','/static/upload/pics/2018/10/29GI57sSZLYrqmjvzM_fK5PXfb.jpg','saucxs','2018-10-29 12:07:54',52,1,1,1,3,'windows server,nginx,安装,配置,运行nodeJS,后端的web项目,错误分析及解决方法',1,1,'https://www.cnblogs.com/chengxs/p/8167697.html ',3,0,1,1,1,1),(423,'redis学习--的持久化数据备份（RDB和AOF）','redis学习--的持久化数据备份（RDB和AOF）','<p>接上一篇：<a href=\"https://www.cnblogs.com/chengxs/p/9090819.html\">安装window下的redis，redis可视化管理工具（Redis Desktop Manager）安装，基础使用，实例化项目</a></p><p>&nbsp;</p><p>一、dump.rdb文件是怎么生成的</p><p>二、什么是redis持久化</p><p>三、redis的RDB是什么？</p><p>四、redis配置文件redis.config相关配置</p><p>五、redis优点</p><p>六、redis缺点</p><p>&nbsp;</p><p>redis比memcache作为缓存数据库强大的地方：（1）支持数据类型比较多，（2）redis持久化功能。</p><p>&nbsp;</p><p>一、dump.rdb文件是怎么生成的</p><p>在redis服务挂掉的时候，根据redis的配置文件，会自动备份数据到本地。</p><p>dump.rdb是由redis服务器自动生成的。</p><p>默认情况下，每隔一段时间redis服务器程序会自动对数据库做一次遍历，把内存快照写在一个叫做“dump.rdb”文件里，这种持久化机制叫做SNAPSHOT。有了SNAPSHOT后，如果服务器宕机，重新启动redis服务器程序时redis会自动加载dump.rdb，将数据库恢复到上一次SNAPSHOT的状态。</p><p>&nbsp;</p><p>至于多久一次做一次SNAPSHOT，SNAPSHOT文件的路径和文件名，你可以在redis的config文件中指定。</p><p>&nbsp;</p><p>二、什么是redis的持久化</p><p>Redis提供了不同级别的持久化方式：</p><p>（1）RDB持久化方式：能够在指定的时间间隔能对你的数据进行快照存储。</p><p>（2）AOF持久化方式：每次对服务器写的操作，当服务器重启的时候回重新执行这些命令来恢复原始的数据，AOF命令以redis协议追加保存每次写的操作到文件末尾。redis还能对AOF文件进行后台重写，使得AOF文件的体积不至于过大。</p><p>（3）如果你只希望你的数据在服务器运行的时候存在，你可以不使用任何持久化方式。</p><p>（4）你也可以同时开启这两种持久化方式。当redis服务重启的时候回优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整</p><p>&nbsp;</p><p>三、Redis的RDB是什么</p><p>RDB在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是SNAPSHOT快照。</p><p>它恢复时是将快照文件直接写入到内存里，redis会单独创建（fork）一个子进程进行持久化吗，会先将数据写入到一个临时文件中，持久化过程都结束了，在用这个临时文件替换上从持久化好的文件。</p><p>整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是敏感，那RDB方式要比AOF方式更加高效。、</p><p>redis的缺点是最后一次持久化后的数据可能丢失。</p><p>&nbsp;</p><p>四、redis配置文件redis.config相关配置</p><p>（一）RDB快照方式持久化磁盘</p><p>先看redis.window.config文件</p><pre>################################ SNAPSHOTTING  ################################\n#\n# Save the DB on disk:\n#\n#   save &lt;seconds&gt; &lt;changes&gt;\n#\n#   Will save the DB if both the given number of seconds and the given\n#   number of write operations against the DB occurred.\n#\n#   In the example below the behaviour will be to save:\n#   after 900 sec (15 min) if at least 1 key changed\n#   after 300 sec (5 min) if at least 10 keys changed\n#   after 60 sec if at least 10000 keys changed\n#\n#   Note: you can disable saving completely by commenting out all \"save\" lines.\n#\n#   It is also possible to remove all the previously configured save\n#   points by adding a save directive with a single empty string argument\n#   like in the following example:\n#\n#   save \"\"<strong>\n\nsave 900 1\nsave 300 10\nsave 60 10000</strong>\n\n# By default Redis will stop accepting writes if RDB snapshots are enabled\n# (at least one save point) and the latest background save failed.\n# This will make the user aware (in a hard way) that data is not persisting\n# on disk properly, otherwise chances are that no one will notice and some\n# disaster will happen.\n#\n# If the background saving process will start working again Redis will\n# automatically allow writes again.\n#\n# However if you have setup your proper monitoring of the Redis server\n# and persistence, you may want to disable this feature so that Redis will\n# continue to work as usual even if there are problems with disk,\n# permissions, and so forth.\nstop-writes-on-bgsave-error yes\n\n# Compress string objects using LZF when dump .rdb databases?\n# For default that\'s set to \'yes\' as it\'s almost always a win.\n# If you want to save some CPU in the saving child set it to \'no\' but\n# the dataset will likely be bigger if you have compressible values or keys.\nrdbcompression yes\n\n# Since version 5 of RDB a CRC64 checksum is placed at the end of the file.\n# This makes the format more resistant to corruption but there is a performance\n# hit to pay (around 10%) when saving and loading RDB files, so you can disable it\n# for maximum performances.\n#\n# RDB files created with checksum disabled have a checksum of zero that will\n# tell the loading code to skip the check.\nrdbchecksum yes\n\n# The filename where to dump the DB\ndbfilename dump.rdb\n\n# The working directory.\n#\n# The DB will be written inside this directory, with the filename specified\n# above using the \'dbfilename\' configuration directive.\n#\n# The Append Only File will also be created inside this directory.\n#\n# Note that you must specify a directory here, not a file name.\ndir ./</pre><p>&nbsp;</p><p>4.1如何触发RDB快照</p><p>配置文件中默认的快照配置</p><pre>save 900 1\nsave 300 10\nsave 60 10000</pre><p>上面的意思就是说：</p><p>（1）如果至少一个键改变，会在900秒（15分钟）之后执行save操作</p><p>（2）如果至少改变10个键，则在300秒（5分钟）之后执行save操作</p><p>（3）如果至少改变10000个键，则在60秒（1分钟）之后执行save操作</p><p>命令save：只管保存，其他不管</p><p>命令bgsave：redis会在后台异步进行快照操作，快照的同时还可以响应客户端请求。</p><p>&nbsp;</p><p>4.2默认的RDB方式保存的是dump.rdb文件，恢复识别也是dump.rdb</p><p>&nbsp;</p><p>4.3stop-writes-on-bgsave-error yes</p><p>如果后台保存到磁盘发生错误,将停止写操作，使用LZF压缩rdb文件，这会耗CPU，&nbsp;但是可以减少磁盘占用。</p><p>&nbsp;</p><p>4.4rdbcompression yes</p><p>保存rdb和加载rdb文件的时候校验，可以防止错误，但是要付出约10%的性能，可以关闭，提高性能。</p><p>&nbsp;</p><p>4.5rdbchecksum yes</p><p>导出的rdb文件名</p><p>&nbsp;</p><p>4.6dbfilename dump.rdb</p><p>设置工作目录，rdb文件会写到该目录，append only file也会存储在该目录下</p><p>&nbsp;</p><p>4.7dir ./</p><p>redis会自动快照保存到磁盘或者调用bgsave，是后台进程完成的，其他客户端任然可以读写redis服务，后台保存快照到磁盘会占用大量的内存。</p><p>&nbsp;</p><p>（二）AOF（append-only file）方式持久化</p><p>另外一种方式为递增的方式，将会引起数据变化的操作，持久化到文件中，重启redis的时候，通过操作命令，恢复数据。</p><p>每次执行写操作命令之后，都会将数据写到server.aofbuf中。</p><pre>#\n# More details please check the following article:\n# http://antirez.com/post/redis-persistence-demystified.html\n#\n# If unsure, use \"everysec\".\n\n# appendfsync always\n<strong>appendfsync everysec</strong>\n# appendfsync no\n\n# When the AOF fsync policy is set to always or everysec, and a background\n# saving process (a background save or AOF log background rewriting) is\n# performing a lot of I/O against the disk, in some Linux configurations\n# Redis may block too long on the fsync() call. Note that there is no fix for\n# this currently, as even performing fsync in a different thread will block\n# our synchronous write(2) call.</pre><p>当配置为always的时候，每次server.aofbuf中的数据写入到文件之后，才会返回到客户端，这样可以保证数据不丢失，但是频繁的IO操作，会降低性能。</p><p>everysec每秒写一次，这可能会丢失一秒内的操作。</p><p>&nbsp;</p><p>五、redis优点</p><p>（1）适合大规模的数据恢复</p><p>（2）对数据完整性和一致性要求不高</p><p>&nbsp;</p><p>六、redis缺点</p><p>（1）在一定间隔时间做一次备份，所以redis意外的挂掉的话，就会丢失最后一次快照后的所有修改</p><p>（2）fork的时候，内存中的数据被被克隆一份，大致2倍的膨胀性需求考虑</p><p><br></p>','/static/upload/pics/2018/10/29dhw9P50rsFf1jZMNzrEGjGiB.jpeg','saucxs','2018-10-29 12:08:10',98,1,1,1,1,'redis学习,持久化数据备份,RDB,AOF',1,1,'https://www.cnblogs.com/chengxs/p/9471550.html ',1,0,1,1,1,1),(424,'vue初始化项目，构建vuex的后台管理项目架子','vue初始化项目，构建vuex的后台管理项目架子','<p>构架vuex的后台管理项目源码：<a href=\"http://www.cnblogs.com/%20https://github.com/saucxs/structure-admin-web\" target=\"_blank\">&nbsp;https://github.com/saucxs/structure-admin-web</a></p><p>&nbsp;</p><p>一、node安装</p><p>可以参考这篇文章<a href=\"http://www.mwcxs.top/page/440.html\" target=\"_blank\">http://www.mwcxs.top/page/420.html&nbsp;</a></p><p>&nbsp;</p><p>二、vue-cli 全局安装</p><p>命令行执行 : npm install -g vue-cli &nbsp;&nbsp;&nbsp;// 加-g是安装到全局</p><p>安装完成以后&nbsp;可以输入命令&nbsp;：vue 回车，可以看到针对vue的命令行；</p><p>&nbsp;</p><p>三、初始化项目</p><p>执行命令： vue init webpack&nbsp;structure(你新建的项目名称/文件名称)</p><p>执行之后将会 自动初始化一个文件夹 ：structure</p><p><img src=\"https://images2018.cnblogs.com/blog/900740/201808/900740-20180802212429175-968731502.png\" alt=\"\"></p><p>&nbsp;</p><p>四、启动项目</p><p>继续执行： cd demo (这是进入到demo文件夹的命令)</p><p>&nbsp;然后执行 安装 ：npm install</p><p>注： npm install 执行可以进行vue已经vue的插件安装，在第三步的时候，已经初始化了项目，并且在 package.json 里面已经有相关配置，所以在这里可以直接安装；</p><p>&nbsp;安装完成之后再执行命令： npm run dev&nbsp;</p><p>整个项目就已经启动了：</p><p><img src=\"https://images2018.cnblogs.com/blog/900740/201808/900740-20180802213536390-708149907.png\" alt=\"\"></p><p>&nbsp;</p><p>五、修改项目结构</p><p>目前的项目结构：</p><p><img src=\"https://images2018.cnblogs.com/blog/900740/201808/900740-20180802213838905-355428659.png\" alt=\"\"></p><p>（1）在src下新建vuex文件夹，在vuex文件夹下面新建modules文件夹，文件夹下放的相应模块js，actions.js，getters.js，index.js，mutation-types.js</p><p>（2）新建一个api文件夹，用来写axios的请求借口,里面放一个api.js，config.js</p><p>（3）新建views，用来存放业务模块</p><p>现在的项目结构：</p><p>&nbsp;<img src=\"https://images2018.cnblogs.com/blog/900740/201808/900740-20180802222846626-813717142.png\" alt=\"\"></p><p>&nbsp;</p><p>&nbsp;六、在main.js里面引入vuex，element等</p><pre>import Vue from \'vue\'\nimport App from \'./App\'\nimport router from \'./router\'\n\n// 引入vuex\n<strong>import Vuex from \'vuex\'\nimport store from \'./vuex\'</strong>\n\nVue.config.productionTip = false\n\n// use\n<strong>Vue.use(Vuex)\n\n</strong>/* eslint-disable no-new */\nnew Vue({\n  el: \'#app\',\n  router,\n  <strong>store,</strong>\n  components: { App },\n  template: \'&lt;App/&gt;\'\n})</pre><p>&nbsp;</p><p>以上一个架子就搭好了，</p><p>那我们想搭一个管理后台的架子，还需要接着coding</p><p>&nbsp;</p><p>&nbsp;</p><p>七、新建头部组件，左侧导航菜单，内容区</p><p>首先在.postcssrc.js增加内容</p><pre>module.exports = {\n  \"plugins\": {\n    \"postcss-import\": {},\n    \"postcss-url\": {},\n    // to edit target browsers: use \"browserslist\" field in package.json\n    \"autoprefixer\": {},\n    // 8-2\n    \"postcss-cssnext\": {}\n  }\n}</pre><p>然后安装postcss-cssnext插件，npm&nbsp;install -g&nbsp;postcss-cssnext</p><p>&nbsp;</p><p>&nbsp;在components中新建header.vue，menu.vue，footer.vue</p><p>&nbsp;可以参考源码：<a href=\"https://github.com/saucxs/structure-admin-web\" target=\"_blank\">https://github.com/saucxs/structure-admin-web</a></p><p>&nbsp;</p><p>八、运行之后</p><p><img src=\"https://images2018.cnblogs.com/blog/900740/201808/900740-20180806225703263-930976342.png\" alt=\"\"></p><p></p><p>&nbsp;</p><p><br></p>','/static/upload/pics/2018/10/29agO0RHpqL9S6gYc9899B6_pg.jpg','saucxs','2018-10-29 12:10:33',73,1,1,0,1,'vue,vuex,初始化项目,构建vuex,后台管理项目,架子',1,1,'https://www.cnblogs.com/chengxs/p/9411253.html ',1,0,0,0,0,0),(425,'如何机智判断页面是刷新还是关闭，背景：vue项目，需求：关闭页面，下次直接跳到登陆页','如何机智判断页面是刷新还是关闭，背景：vue项目，需求：关闭页面，下次直接跳到登陆页','<p>最近项目有这么个需求：要在关闭当前系统的窗口的时候，退出登录，</p><p>因为如果不退出登录可能存在安全风险，其实我想说，电脑没事别借给别人活着离开工位记得一定要锁屏，其实我们设置了cookie失效时间的，过了一段时间会自动清空cookie。</p><p>经过我查资料，自身尝试网上的各种方法，发现都有问题。</p><p>总结这一路的尝试：</p><p>&nbsp;</p><p>一、页面加载时只执行onload ，页面关闭时只执行onunload，页面刷新时先执行onbeforeunload，然后onunload，最后onload。</p><p>经过验证我得出的结论是：</p><p>（1）对于ie，谷歌，360：</p><p>//页面加载时只执行onload//页面刷新时，刷新之前执行onbeforeunload事件，在新页面即将替换旧页面时onunload事件，最后onload事件。//页面关闭时，先onbeforeunload事件，再onunload事件。</p><p>（2）对于火狐：</p><p>//页面刷新时，只执行onunload；页面关闭时，只执行onbeforeunload事件那么回归正题，到底怎样判断浏览器是关闭还是刷新？我按照网上的各种说法实验千百遍，都未成功，</p><p>&nbsp;</p><p>二、机智的判断页面刷新还是关闭</p><p>关键点：刷新完成之后会执行onload方法，根据session存标志变量来清空cookie</p><p>我的思路是：刷新和关闭，无论哪个浏览器都会执行onunload方法或者onbeforeunload方法，其实我们在这两个方法里是判断不了的，但是在刷新之后会再一次执行onload方法，所以我在这两个方法里将一个标志位变量放在session里。然后在onload方法执行的时候判断session里是否有这个变量，有的话，说明是刷新，不然就是关闭。</p><pre>import Cookies from \'js-cookie\'\n\n/*区分关闭和刷新，关闭退出登录 start*/\nwindow.onload = function(){\n  if(!window.sessionStorage[\"tempFlag\"]){\n    Cookies.remove(\'userId\')\n    Cookies.remove(\'userName\')\n    location.reload();   //不能省，强制跳到登陆页\n  }else{\n    window.sessionStorage.removeItem(\"tempFlag\");\n  }\n}\nwindow.onunload = function (){\n  window.sessionStorage[\"tempFlag\"] = true;\n}\nwindow.onbeforeunload = function (){\n  window.sessionStorage[\"tempFlag\"] = true;\n}</pre><p>目前项目中使用时可行的，不足的地方：一个系统的多个页面同时打开，关掉其中一个页面也会清空cookie，重新登录</p><p>谁让项目登录用的是cookie存，如果换成session存登录信息就不一样了</p><p></p><p><br></p>','/static/upload/pics/2018/10/29vM6ePMrq_0Xkc7bnkZ4wLtCl.jpg','saucxs','2018-11-15 14:14:32',178,0,0,0,13,'如何机智判断,页面是刷新,关闭,背景,vue项目,需求,关闭页面,下次直接跳到登陆页',1,1,'https://www.cnblogs.com/chengxs/p/9605702.html ',1,0,0,0,0,0),(426,'使用nvm管理node不同版本，安装，环境配置，切换不同版本的node版本','使用nvm管理node不同版本，安装，环境配置，切换不同版本的node版本','<p>文章包含以下内容：</p><p>一、下载地址</p><p>二、nvm-noinstall.zip安装</p><p>三、nvm-setup.zip安装</p><p>四、测试安装以及使用</p><p>&nbsp;</p><h3>一、下载地址</h3><p><a href=\"https://link.jianshu.com/?t=https://github.com/coreybutler/nvm-windows/releases\" target=\"_blank\">https://github.com/coreybutler/nvm-windows/releases</a></p><p>&nbsp;</p><h3>二、nvm-noinstall.zip安装</h3><p>1、把nvm_noinstall.zip解压到比如c:/dev/nvm 中(其它盘也可以，建议开发有关的安装在C盘)；</p><p>&nbsp;</p><p>2、右键以管理员的身份运行install.cmd . 直接按回车,在C盘根目录下会生成一个setting,txt.并拷贝到C:/dev/nvm.修改内容:</p><pre>root: C:\\dev\\nvm\npath: C:\\dev\\nodejs\narch: 64\nproxy: none\nnode_mirror: http://npm.taobao.org/mirrors/node/\nnpm_mirror: https://npm.taobao.org/mirrors/npm/</pre><p>&nbsp;</p><p>3、配置环境变量</p><pre>打开‘控制面板主页-&gt;高级系统设置-&gt;高级-&gt;环境变量’后会有‘用户变量’和‘系统变量’两个选项，建议在‘用户变量’里面设置:<br></pre><pre>NVM_HOME:C:\\dev\\nvm\nNVM_SYMLINK:C:\\dev\\nodejs\nPATH:%NVM_HOME%;%NVM_SYMLINK%(在PATH的最后添加%NVM_HOME%;%NVM_SYMLINK%)<br><img src=\"https://images2018.cnblogs.com/blog/900740/201809/900740-20180912152857175-398179502.png\" alt=\"\"><br><br><img src=\"https://images2018.cnblogs.com/blog/900740/201809/900740-20180912152918928-1177222053.png\" alt=\"\"></pre><pre></pre><h3>三、nvm-setup.zip安装</h3><p>1、下载之后，直接点击.exe安装，一直next，尽量使用默认路径2、配置环境变量跟上面免安装的一样</p><p>&nbsp;</p><h3>四、测试安装以及使用</h3><p>1、测试一下安装情况</p><pre>nvm v</pre><p><img src=\"https://images2018.cnblogs.com/blog/900740/201809/900740-20180912153054695-232415709.png\" alt=\"\"></p><p>&nbsp;</p><p>2、查看当前使用node版本</p><pre>nvm ls</pre><p><img src=\"https://images2018.cnblogs.com/blog/900740/201809/900740-20180912153213763-308288926.png\" alt=\"\"></p><p>&nbsp;</p><p>3、安装新的版本</p><pre>nvm install [node版本号] 即可安装(等待时间稍长)</pre><p><img src=\"https://images2018.cnblogs.com/blog/900740/201809/900740-20180912154926372-1014645813.png\" alt=\"\"></p><p>&nbsp;</p><p>4、切换node版本</p><p>&nbsp;<img src=\"https://images2018.cnblogs.com/blog/900740/201809/900740-20180912155320809-1788486193.png\" alt=\"\"></p><p><br></p><p><br></p>','/static/upload/pics/2018/10/29zy3_869LNU51yau8cgli_zLf.jpg','saucxs','2018-10-29 12:12:23',87,1,0,0,3,'使用nvm管理node不同版本，安装，环境配置，切换不同版本的node版本',1,1,'https://www.cnblogs.com/chengxs/p/9635291.html ',3,0,1,1,1,1),(427,'vue，vuex的后台管理项目架子structure-admin，后端服务nodejs','vue，vuex的后台管理项目架子structure-admin，后端服务nodejs','<p>之前写过一篇<a href=\"https://www.cnblogs.com/chengxs/p/9411253.html\">vue初始化项目，构建vuex的后台管理项目架子</a>，这个<a href=\"https://github.com/saucxs/structure-admin-web\" target=\"_blank\">structure-admin-web</a>所拥有的功能</p><p>接下来，针对structure-admin-web的不足，进行了补充，开发了具有登陆的structure-admin项目，技术站：主要是node+vue+redis+mysql+es6</p><p>欢迎访问structure-admin源码：<a href=\"https://github.com/saucxs/structure-admin\" target=\"_blank\">structure-admin</a></p><p>欢迎访问weekly源码：<a href=\"https://github.com/saucxs/weekly\" target=\"_blank\">weekly</a></p><p>项目地址演示地址：<a href=\"http://weekly.mwcxs.top/\" target=\"_blank\">http://weekly.mwcxs.top</a></p><ul><li>（公司负责人）账号：testadmin，密码：123456</li><li>（部门经理）账号：test，密码：123456</li><li>（成员）账号：teststaff，密码：123456</li></ul><p>PS：添加的成员的默认密码是123456</p><p>&nbsp;</p><p>接下来：</p><p>一、后端服务nodejs，thinjs的redis配置，操作数据库</p><p>二、前端vue+vuex全局路由守卫，axios请求拦截</p><p>三、项目启动必读</p><p>&nbsp;</p><p>一、后端服务nodejs，thinjs的redis配置，操作数据库</p><p>我使用的是thinkjs，一个nodejs的框架。</p><p>1、首先介绍登陆的控制</p><p>逻辑：</p><p>（1）已经登陆的，直接根据的路由跳到相应页面；</p><p>（2）已经登陆的，不能跳到登陆页面，跳到首页；</p><p>（3）没有登陆的，输入url必须跳到登陆页；</p><p>（4）退出系统的，必须回到登陆页，状态是未登录</p><p>&nbsp;</p><p>1.1 thinkjs的redis的配置文件adapter.js</p><pre>exports.session = {\n    type: \'redis\',\n    common: {\n        cookie: {\n            name: \'thinkjs\',\n            keys: [\'werwer\', \'werwer\'],\n            signed: true\n        }\n    },\n    redis: {\n        handle: redisSession,\n        host: \'127.0.0.1\',\n        port: 6379,\n        password: \'a123456\'\n    }\n};</pre><p>设置的由redis的服务地址host，端口，以及redis的密码，redis的搭建和配置，参考<a href=\"https://www.cnblogs.com/chengxs/p/9090819.html\">安装window下的redis，redis可视化管理工具（Redis Desktop Manager）安装，基础使用，实例化项目</a>这篇文章。</p><p>&nbsp;</p><p>1.2&nbsp; 在每一次前端请求的路由的时候，都会去redis服务器中去取userInfo的信息</p><p>如果为空，返回前端data为空，前端在路由过滤中，跳到登陆页，如果有值就正常返回。&nbsp;</p><pre>async __before() {<strong>\n        let user = await this.session(\"userInfo\");\n        </strong>if(user) {\n            this.user = user;\n        } else {\n            this.user = \'\';\n        }\n    }</pre><p>这个在nodejs的控制器controller里，在每一次前端的请求发送到后端的时候，都会去redis的取userInfo的值，</p><pre>let user = await this.session(\"userInfo\");</pre><p>这个userInfo的值也是自己在登陆的时候，把登陆成功之后的个人信息加入到redis服务中</p><p>&nbsp;</p><p>1.3 在登陆成功的时候讲个人信息加到redis服务中</p><pre>async loginAction() {\n        let {username, password} = this.post();try {\n            let user = await this.model(\'user\').where({\n                username,\n            }).find();\n            if(user.password &amp;&amp; user.password == password) {\n                // login success\n                <strong>await this.session(\'userInfo\',{username, userId:user.id});\n                </strong>return this.success(\"登陆成功\");\n            } else {\n                return this.fail(\"用户名或密码错误\")\n            }\n        }\n        catch(e) {\n            console.log(e);\n            return this.fail(\"登录失败\")\n        }</pre><p>这个就是将个人信息加入到redis中</p><pre>await this.session(\'userInfo\',{username, userId:user.id});</pre><p>WEB 请求中经常通过 session 来维持会话的，框架通过&nbsp;<a href=\"https://github.com/thinkjs/think-session\">think-session</a>&nbsp;和 Adapter 来支持 session 功能。</p><p>&nbsp;</p><p>2、介绍登出（退出）的控制</p><pre> async logoutAction() {\n        try {\n           <strong> await </strong><strong>this.session(null);\n            </strong>return this.success(\"登出成功\");\n        } catch(e) {\n            return this.fail(`登出失败${e}`)\n        }\n    }</pre><p>这个就是前端发的请求登出，直接将redis的置空，根据前端路由跳转到登陆页，这时候redis的服务中没有值，就不会跳转到其他页面</p><p>&nbsp;</p><p>3、数据库的配置adapter.js</p><pre>exports.model = {\n  type: \'mysql\',\n  common: {\n    logConnect: true,\n    logSql: true,\n    logger: msg =&gt; think.logger.info(msg)\n  },\n  mysql: {\n    handle: mysql,\n   <strong> database: </strong><strong>\'example\',\n    prefix: \'example_\',\n    encoding: \'utf8\',\n    host: \'127.0.0.1\',\n    port: \'3306\',\n    user: \'root\',\n    password: \'123456\',\n    dateStrings: true</strong>\n  }\n};</pre><p>common部分是配置是否将sql的语句的操作日志打出来，这样便于我们在开发的时候的调试和修改bug</p><p>&nbsp;</p><p>4、操作数据库</p><p>项目开发中，经常需要操作数据库（如：增删改查等功能），手工拼写 SQL 语句非常麻烦，同时还要注意 SQL 注入等安全问题。为此框架提供了模型功能，方便操作数据库。</p><p>Mysql 的 Adapter 为&nbsp;<a href=\"https://github.com/thinkjs/think-model-mysql\">think-model-mysql</a>，底层基于&nbsp;<a href=\"https://github.com/mysqljs/mysql\">mysql</a>&nbsp;库实现，使用连接池的方式连接数据库，默认连接数为 1。</p><p>拿登陆的接口来说明：this.model说明使用封装好的model，find是查找单条数据，在user的这张表中查找username值为前端传来的username的值，返回的值赋给user中。</p><pre>async loginAction() {\n        let {username, password} = this.post();\n        try {\n           <strong> let user </strong><strong>= await this.model(\'user\').where({\n                username,\n            }).find();\n            </strong>if(user.password &amp;&amp; user.password == password) {\n                // login success\n                await this.session(\'userInfo\',{username, userId:user.id});\n                return this.success(\"登陆成功\");\n            } else {\n                return this.fail(\"用户名或密码错误\")\n            }\n        }\n        catch(e) {\n            console.log(e);\n            return this.fail(\"登录失败\")\n        }</pre><p>think.Model&nbsp;基类提供了丰富的方法进行 CRUD 操作，下面来一一介绍。</p><h4>查询数据</h4><p>模型提供了多种方法来查询数据，如:</p><ul><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-a74\">find</a>&nbsp;查询单条数据</li><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-3ad\">select</a>&nbsp;查询多条数据</li><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-274\">count</a>&nbsp;查询总条数</li><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-a39\">countSelect</a>&nbsp;分页查询数据</li><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-df2\">max</a>&nbsp;查询字段的最大值</li><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-8d2\">avg</a>&nbsp;查询字段的平均值</li><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-1d7\">min</a>&nbsp;查询字段的最小值</li><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-c11\">sum</a>&nbsp;对字段值进行求和</li><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-f0a\">getField</a>&nbsp;查询指定字段的值</li></ul><p>同时模型支持通过下面的方法指定 SQL 语句中的特定条件，如：</p><ul><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-d47\">where</a>&nbsp;指定 SQL 语句中的 where 条件</li><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-47d\">limit</a>&nbsp;/&nbsp;<a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-a43\">page</a>&nbsp;指定 SQL 语句中的 limit</li><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-68b\">field</a>&nbsp;/&nbsp;<a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-ad6\">fieldReverse</a>&nbsp;指定 SQL 语句中的 field</li><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-973\">order</a>&nbsp;指定 SQL 语句中的 order</li><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-55a\">group</a>&nbsp;指定 SQL 语句中的 group</li><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-48b\">join</a>&nbsp;指定 SQL 语句中的 join</li><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-ad1\">union</a>&nbsp;指定 SQL 语句中的 union</li><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-be2\">having</a>&nbsp;指定 SQL 语句中的 having</li><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-fb8\">cache</a>&nbsp;设置查询缓存</li></ul><h4>添加数据</h4><p>模型提供了下列的方法来添加数据：</p><ul><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-c73\">add</a>&nbsp;添加单条数据</li><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-3e2\">thenAdd</a>&nbsp;where 条件不存在时添加</li><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-a55\">addMany</a>&nbsp;添加多条数据</li><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-a56\">selectAdd</a>&nbsp;添加子查询的结果数据</li></ul><h4>更新数据</h4><p>模型提供了下列的方法来更新数据：</p><ul><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-b86\">update</a>&nbsp;更新单条数据</li><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#updatemany-datalist-options\">updateMany</a>&nbsp;更新多条数据</li><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-1b0\">thenUpdate</a>&nbsp;条件式更新</li><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-990\">increment</a>&nbsp;字段增加值</li><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-41c\">decrement</a>&nbsp;字段减少值</li></ul><h4>删除数据</h4><p>模型提供了下列的方法来删除数据：</p><ul><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-866\">delete</a>&nbsp;删除数据</li></ul><p>用项目的代码举栗子：</p><p>（1）查询单条数据，用find()，条件为：工号（usernum）为180909，用户名（username）为saucxs ，并且填写时间（time）为这周的时间范围的时间戳，返回的是对象object</p><pre> let weekly = await this.model(\'week\').where({\n     usernum: \'180909\', <br>　　　username: \'saucxs\', <br>　　　time: {\'&gt;\': startWeekStamp, \'&lt;\': endWeekStamp}\n })<strong>.find()</strong>;</pre><p>解读：model(\'week\')的意思，取得是week的数据表</p><p>&nbsp;</p><p>（2）查询多条数据，用select(),条件：公司id（company_id）为data的数据，返回的是数组array</p><pre>let department = await this.model(\'department\').where({company_id: \'data\'})<strong>.select()</strong>;</pre><p>&nbsp;</p><p>（3）查询表中的具体的列数据，用field()</p><pre>departmentMemberList = await this.model(\'user\').<strong>field(\'id, company_id, company_name, department_id, department_name, email, role, role_name, username, usernum,telephone\'</strong><strong>)</strong>.where({\n          company_id: this.user.company_id,\n          role: {\'&gt;=\': this.user.role}\n        }).find();</pre><p>解读：this.user.company_id取的是登陆用户的公司id，{\'&gt;=\': this.user.role}为比登陆用户的角色</p><p>&nbsp;</p><p>（4）分页查询，用page(page, pagesize)和countSelect()，返回的数据是对象</p><pre>departmentMemberList = await this.model(\'user\').field(\'id, company_id, company_name, department_id, department_name, email, role, role_name, username, usernum,telephone\').where({\n          company_id: this.user.company_id,\n          role: {\'&gt;=\': this.user.role}\n        }).order(\"department_id asc , role asc\")<strong>.page(page, pagesize).countSelect()</strong>;</pre><p>解读：返回的对象，如下图所示：（count是总条数，currentPage为当前页，data是数据的数组，pageSize为每一页展示几条，totalPages为总共有多少页）</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180918190815507-1203763874.png\" alt=\"\"></p><p>&nbsp;</p><p>（5）排序，倒序（desc）和正序(asc)，用order(\"参数1 asc,参数2 desc”)</p><pre>departmentMemberList = await this.model(\'user\').field(\'id, company_id, company_name, department_id, department_name, email, role, role_name, username, usernum,telephone\').where({\n          company_id: this.user.company_id,\n          role: {\'&gt;=\': this.user.role}\n        })<strong>.order(</strong><strong>\"department_id asc , role asc\")</strong>.page(page, pagesize).countSelect();</pre><p>&nbsp;</p><p>（6）删除，用delete()，条件用where</p><pre> await this.model(\'department\').where({company_id, department_id})<strong>.delete()</strong>;</pre><p>&nbsp;</p><p>（7）新增，用add()，没有where</p><pre>  await this.model(\'department\')<strong>.add({\n          company_id: </strong><strong>this.user.company_id, company_name: this.user.company_name, department_id, department_name\n        });</strong></pre><p>&nbsp;</p><p>（8）改，用update()，条件where</p><pre> await this.model(\'user\').where({id})<strong>.update({\n                usernum, username, telephone, role, role_name,email, company_id, company_name, department_id, department_name\n              });</strong></pre><p>&nbsp;</p><h4>手动执行 SQL 语句</h4><p>有时候模型包装的方法不能满足所有的情况，这时候需要手工指定 SQL 语句，可以通过下面的方法进行：</p><ul><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-89d\">query</a>&nbsp;手写 SQL 语句查询</li><li><a href=\"https://thinkjs.org/doc/3.0/relation_model.html#toc-a1e\">execute</a>&nbsp;手写 SQL 语句执行</li></ul><p>具体的可以参考thinkJS的官方文档的数据操作这块：<a href=\"https://thinkjs.org/zh-cn/doc/3.0/relation_model.html\" target=\"_blank\">https://thinkjs.org/zh-cn/doc/3.0/relation_model.html</a></p><p>&nbsp;</p><p>二、前端vue+vuex全局路由守卫，axios请求拦截</p><p>刚才简单的说了一下nodejs的后端启动的服务，封装的接口，而前端调用这个接口使用的是url是：模块名/控制器名/方法名，这个可以在配置文件中修改定义的方法</p><p>1、全局路由守卫</p><p>全局路由守卫是每一次都会判断是否登陆（也就是判断redis服务中是否有值）。已经登陆（后端返回的用户权限信息），则判断当前要跳转的路由，用户是否有权限访问，可以考虑在用户登陆之后将用户权限把路由过滤一遍生成菜单，菜单保存到vuex中。</p><pre>/*路由处理*/\nrouter.beforeEach((to, from, next) =&gt; {\n  let menuId;\n  let auditResult;\n  let applicationVerifyFlag;\n  let key = to.meta.key;\n  if (<strong>key</strong>) {\n    store.dispatch(\"getUserInfo\", {}).then(response =&gt; {if(!response.data){\n        if (to.path !== \'/login\') {\n          return next(\'/login\');\n        }\n        next();\n      }else{\n        if (to.path == \'/login\') {\n          return next(\'/writeWeekly\');\n        }\n        store.commit(\"USER_INFO\", response.data);\n        next();\n      }\n    });\n  } else {\n   next();\n  }\n});</pre><p>根据这个key来判断是否有权限，取得是路由中meta的key的值。</p><pre>  routes: [\n    {\n      path: \'/login\',\n      name: \'login\',\n     <strong> meta: {\n        key: </strong><strong>\'0\'</strong><strong>\n      },</strong>\n      component: login\n    },\n    {\n      path: \'/\',\n      name: \'home\',\n      component: home,\n      children: [{\n        path: \'/writeWeekly\',\n        name: \'writeWeekly\',\n       <strong> meta: {\n          key: </strong><strong>\'1\'</strong><strong>\n        },</strong>\n        component: writeWeekly\n      }]\n    }\n  ]</pre><p>&nbsp;</p><p>2、axios请求拦截</p><p>统一处理所有的http请求和响应的，通过配置http request interceptors为http头部增加Authorization字段，其内容为Token，通过配置http response interceptors，当后端接口返回401 Unauthorized（未授权），让用户重新登录。</p><pre>// 开发环境调试用户信息\naxios.interceptors.request.use(config =&gt; {\n    if (process.env.NODE_ENV === \'development\') {\n      config.headers[\"username\"] = \"189090909\";\n    }\n    return config;\n});\n\naxios.interceptors.response.use(\n  response =&gt; {\n    let data = response.data;\n    console.log(data, \'data\');\n    <strong>if (!data.data) {\n      //   登陆成功的回调地址\n      return data;\n    } else {\n      return</strong><strong> data;\n    }</strong>\n  },\n  error =&gt; ({\n    code: -1,\n    msg: \"网络异常\"\n  })\n);</pre><p>&nbsp;</p><p>对所有的请求进行了封装。</p><pre>// get请求配置\nlet getConfig = {\n    url: \'\',\n    baseURL: serveUrl,\n    headers: {\n    \'X-Requested-With\': \'XMLHttpRequest\'\n  },\n  paramsSerializer(params) {\n    return Qs.stringify(params, {\n      arrayFormat: \'brackets\'\n    })\n  },\n  timeout: 5000\n}\n\n// post请求配置\nlet postConfig = {\n    url: \'\',\n    baseURL: serveUrl,\n    headers: {\n      \'Content-Type\': \'application/json\',\n      \'X-Requested-With\': \'XMLHttpRequest\'\n    },\n    transformRequest: [function (data) {\n      return JSON.stringify(data.params || {})\n    }],\n    timeout: 5000\n}\n\nexport {\n    serveUrl,\n    getConfig,\n    postConfig,\n  }</pre><p>&nbsp;</p><h3>三、项目启动必读</h3><p>1、首先你的环境是nodejs，不会安装配置参考：<a href=\"http://www.mwcxs.top/page/440.html\" target=\"_blank\">http://www.mwcxs.top/page/420.html</a></p><p>2、clone下来项目</p><pre>git clone https://github.com/saucxs/structure-admin.git</pre><p>3、分别针对前端vue的<a href=\"https://github.com/saucxs/structure-admin/tree/master/structure-admin-web\">structure-admin-web</a>的文件夹和node后端<a href=\"https://github.com/saucxs/structure-admin/tree/master/structure-admin-node\">structure-admin-node</a>，安装相应依赖</p><pre>npm install</pre><p>4、安装redis（可以考虑安装RedisDesktopManager）</p><p>参考：<a href=\"https://www.cnblogs.com/chengxs/p/9090819.html\">安装window下的redis，redis可视化管理工具（Redis Desktop Manager）安装，基础使用，实例化项目</a></p><p>5、安装mysql，这个就不赘述</p><p>6、修改nodejs的后端的配置文件adapter.js，config.js这两个文件中</p><p>adapter.js</p><pre>exports.cache = {\n    type: \'redis\',\n    common: {\n        timeout: 24 * 60 * 60 * 1000 // millisecond\n    },\n    redis: {\n        handle: redisCache,\n        host: \'127.0.0.1\',\n        port: 6379,\n       <strong> password: </strong><strong>\'a123456\'  //redis安装时候设置的秘密</strong>\n    }\n};<br>//<br>//</pre><pre>exports.model = {<br>  type: \'mysql\',<br>  common: {<br>    logConnect: true,<br>    logSql: true,<br>    logger: msg =&gt; think.logger.info(msg)<br>  },<br>  mysql: {<br>    handle: mysql,<br>    database: \'weekly\',<br>    prefix: \'week_\',<br>    encoding: \'utf8\',<br>   <strong> host: \'127.0.0.1\',   //本地数据库</strong><br><strong>    port: \'3306\',　　　　　//数据库端口</strong><br><strong>    user: \'root\',    //数据库的用户名</strong><br><strong>    password: \'123456\',    //数据库该用户名的密码</strong><br>    dateStrings: true<br>  }<br>};</pre><p>7、分别对前后端分离的项目启动</p><p>(1)前端vue的<a href=\"https://github.com/saucxs/structure-admin/tree/master/structure-admin-web\">structure-admin-web</a>的启动</p><pre>npm run dev</pre><p>&nbsp;</p><p>(2)和node后端<a href=\"https://github.com/saucxs/structure-admin/tree/master/structure-admin-node\">structure-admin-node</a>的启动</p><pre>npm start</pre><p>&nbsp;</p><p>8、这样就可以启动</p><p>（1）登陆页</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180918200317862-1493056324.png\" alt=\"\"></p><p>（2）写周报页面</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180918200409672-1321068027.png\" alt=\"\"></p><p>&nbsp;</p><p>9、该项目架子搭的周报企业管理系统</p><p>在PC端，欢迎访问：<a href=\"http://weekly.mwcxs.top/\" target=\"_blank\">http://weekly.mwcxs.top</a>，</p><ul><li>（公司负责人）账号：testadmin，密码：123456</li><li>（部门经理）账号：test，密码：123456</li><li>（成员）账号：teststaff，密码：123456</li></ul><p></p><p>&nbsp;</p><p><br></p>','/static/upload/pics/2018/10/29W1okBG_Lgb1quH6rJ6PRVWSY.png','saucxs','2018-10-29 12:13:06',64,1,1,1,3,'vue,vuex,后台管理,项目架子,structure-admin,后端服务,nodejs,weeky',1,1,'https://www.cnblogs.com/chengxs/p/9465482.html',3,0,1,1,1,1),(428,'linux日常服务器部署一些命令使用','linux日常服务器部署一些命令使用','<p>&nbsp;今天公司的开发环境的linux服务器，我要了一个账号来玩玩</p><p>拿到账号和密码，我就用xshell登陆上去</p><p>1、查看已挂载的分区列表</p><pre>df -h 显示已经挂载的分区列表</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180920133142774-867492060.png\" alt=\"\"></p><p>&nbsp;</p><p>2、查看目录中的文件&nbsp;</p><pre>ls 查看目录中的文件<br><br>ls -l 显示文件和目录的详细资料&nbsp;<br><br>ls -f 查看目录中的文件<br><br>ls -a 显示隐藏文件</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180920133743110-2070671667.png\" alt=\"\"></p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180920133838756-843382859.png\" alt=\"\"></p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180920133956047-770628718.png\" alt=\"\"></p><p>&nbsp;</p><p>3、打开相应的目录</p><pre>cd /home 进入 \'/ home\' 目录\' \ncd .. 返回上一级目录 \ncd ../.. 返回上两级目录 \ncd 进入个人的主目录 \ncd ~user1 进入个人的主目录 \ncd - 返回上次所在的目录 </pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180920134332366-414836059.png\" alt=\"\"></p><p>&nbsp;</p><p>4、新建目录</p><pre>mkdir dir1 创建一个叫做 \'dir1\' 的目录\' \nmkdir dir1 dir2 同时创建两个目录 \nmkdir -p /tmp/dir1/dir2 创建一个目录树 </pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180920134905373-796405851.png\" alt=\"\"></p><p>表示没有权限</p><p>进入到自己的home中，新建install目录</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180920141220254-2144257569.png\" alt=\"\"></p><p>又新建一个weekly目录</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180920141327821-335501929.png\" alt=\"\"></p><p>&nbsp;</p><p>&nbsp;5、xshell工具有上传命令</p><p>输入rz命令，看是否已经安装了lrzsz，如果没有安装则执行&nbsp; yum&nbsp; &nbsp;-y&nbsp; install&nbsp; lrzsz命令进行安装。</p><p>安装成功后，输入rpm命令确认是否正确安装</p><p>输入rz（选择文件）或者rz -y，我使用的是rz -y，该命令只能上传文件，不能上传文件夹，自己在本地压缩，到服务器上再解压</p><p>&nbsp;<img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180920144645754-303919595.png\" alt=\"\"></p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180920144617203-2072651321.png\" alt=\"\"></p><p>&nbsp;</p><p>5、xshell工具有下载命令</p><pre>sz 文件名</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181009104328096-166554311.png\" alt=\"\"></p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181009104348369-1572750205.png\" alt=\"\"></p><p>&nbsp;</p><p>&nbsp;</p><p>7、linux上解压zip压缩包和压缩zip压缩包</p><p>（1）解压zip</p><pre>unzip 文件名.zip</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180929093648094-1063562131.png\" alt=\"\"></p><p>（2）压缩zip</p><pre>zip -r 文件名.zip</pre><p>将当前目录下的所有文件和文件夹全部压缩成myfile.zip文件,－r表示递归压缩子目录下所有文件.</p><p>另：有些服务器没有安装zip包执行不了zip命令，但基本上都可以用tar命令的</p><p>&nbsp;</p><p>&nbsp;</p><p>8、查看linux的位数</p><pre>uname -a</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180920145329931-108692760.png\" alt=\"\"></p><p>&nbsp;</p><p>9、查看linux全局环境路径(path大写)</p><pre>echo $PATH</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180921104026264-720479455.png\" alt=\"\"></p><p>&nbsp;</p><p>10、删除目录（文件）</p><pre>rm -f file1 删除一个叫做 \'file1\' 的文件\'&nbsp;<br><br>rmdir dir1 删除一个叫做 \'dir1\' 的目录\'&nbsp;<br><br>rm -rf dir1 删除一个叫做 \'dir1\' 的目录并同时删除其内容&nbsp;<br><br>rm -rf dir1 dir2 同时删除两个目录及它们的内容&nbsp;</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180921111723683-1195908461.png\" alt=\"\"></p><p>&nbsp;</p><p>11、查看端口占用情况</p><pre>lsof -i:端口号</pre><p>用于查看某一端口的占用情况，比如查看8080端口使用情况，lsof -i:8080</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181009135501071-1994318525.png\" alt=\"\"></p><p>&nbsp;</p><p>12、查看端口开放情况</p><pre>netstat -nupl (UDP类型的端口)\nnetstat -ntpl (TCP类型的端口)</pre><p>a 表示所有</p><p>n表示不查询dns</p><p>t表示tcp协议</p><p>u表示udp协议</p><p>p表示查询占用的程序</p><p>l表示查询正在监听的程序</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181009154132038-186456823.png\" alt=\"\"></p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181009154257566-1393858091.png\" alt=\"\"></p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181009154301161-75471992.png\" alt=\"\"></p><p></p><p>&nbsp;&nbsp;</p><p><br></p>','/static/upload/pics/2018/10/23Ewp08NRAepYhbXgAoaZJC4_R.jpg','saucxs','2018-10-23 16:35:12',90,1,1,1,1,'linux,日常服务器,部署,一些命令,使用',1,1,'https://www.cnblogs.com/chengxs/p/9680929.html ',1,0,1,1,1,1),(429,'在Linux系统配置Nodejs环境的最简单步骤，部署多个thinkjs（nodejs）项目','在Linux系统配置Nodejs环境的最简单步骤，部署多个thinkjs（nodejs）项目','<p>发现一台服务器部署管理多个nodejs服务，可以采用二级域名weekly.mwcxs.top，也可以采用固定后缀www.mwcxs.top/weekly的方式，本文先从固定后缀的方式部署管理多个nodejs服务。<br></p><p>以下详细的介绍，以<a href=\"https://github.com/saucxs/weekly\" target=\"_blank\">周报企业管理系统</a>为例进行部署，欢迎fork和start，源码地址：<a href=\"https://github.com/saucxs/weekly\" target=\"_blank\">https://github.com/saucxs/weekly</a>，展示地址：<a href=\"http://weekly.mwcxs.top/\" target=\"_blank\">http://weekly.mwcxs.top</a>有问题一起交流。</p><p>&nbsp;</p><p>1、去官网下载和自己系统匹配的文件：</p><p>&nbsp;英文网址：<a href=\"https://nodejs.org/en/download/\" target=\"_blank\">https://nodejs.org/en/download/</a></p><p>&nbsp;中文网址：<a href=\"http://nodejs.cn/download/\" target=\"_blank\">http://nodejs.cn/download/</a></p><p>建议去英文网站下载 ，因为中文这边没有给出稳定版，目前稳定版8点多。最新版是10点多</p><p>&nbsp;</p><p>2、查看linux系统的位数&nbsp;</p><p>通过 &nbsp;uname -a &nbsp;命令查看到我的Linux系统位数是64位（备注：x86_64表示64位系统， i686 i386表示32位系统），如图</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180920145231024-1638708569.png\" alt=\"\"></p><p>选择64位</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180920151037932-1844418154.png\" alt=\"\"></p><p>&nbsp;</p><p>3、下载下来的tar文件上传到服务器并且解压</p><p>我使用的xshell中的rz命令来上传文件</p><p>在xshell中输入rz命令，看是否已经安装了lrzsz，如果没有安装则执行&nbsp; yum&nbsp; &nbsp;-y&nbsp; install&nbsp; lrzsz命令进行安装。</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180920150025609-972796054.png\" alt=\"\"></p><p>安装成功后，输入rpm -qa&nbsp;lrzsz 命令确认是否正确安装</p><p>&nbsp;<img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180920150035702-1376628450.png\" alt=\"\"></p><p>输入rz或者re -y，选择刚才下的压缩包</p><p>&nbsp;<img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180920151348196-802080220.png\" alt=\"\"></p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180920151412191-2066624512.png\" alt=\"\"></p><p>&nbsp;</p><p>现在开始解压</p><pre>tar -xvf node-v8.12.0-linux-x64.tar.xz   </pre><p>&nbsp;<img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180920151527896-217358840.png\" alt=\"\"></p><p>修改文件夹（目录）的名字</p><pre>mv node-v8.12.0-linux-x64 nodejs</pre><p>&nbsp;<img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180920151801455-2089643719.png\" alt=\"\"></p><p>&nbsp;</p><p>4、执行软连接</p><p>注意：确认一下nodejs下bin目录是否有node 和npm文件，如果有执行软连接，如果没有重新下载执行上边步骤</p><p>&nbsp;<img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180920152019106-1735526453.png\" alt=\"\"></p><p>确认有node和npm文件了</p><p>执行软链接</p><pre>ln -s /home/cxs/install/nodejs/bin/npm /usr/local/bin/ <br><br>ln -s /home/cxs/install/nodejs/bin/node /usr/local/bin/</pre><p>发现自己没有权限，然后找老大要来root账号</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180920154231760-826649938.png\" alt=\"\"></p><p>下面是root权限下执行</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180920154848714-1886182836.png\" alt=\"\"></p><p>ok了，回到自己用户下</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180920155039769-999172403.png\" alt=\"\"></p><p>ok了</p><p>&nbsp;</p><p>&nbsp;5、安装pm2，通过pm2启动node可以使关闭终端时node依然运行。</p><p>&nbsp;<img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180921095633483-44960064.png\" alt=\"\"></p><p>进入后端代码的跟目录，通过npm i 安装后端代码需要的库，启动node</p><pre>pm2 start index.js</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180921095753929-445728795.png\" alt=\"\"></p><p>说明，没有配制到全局，虽然安装到全局，不知道为啥，linux下不像windows下能自动创造一个环境变量去实现我们的全局。所以我们需要创建一个linux下的软连接。</p><p>下面红框就是pm2的安装路径，连接到全局环境路径</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180921102549714-469020791.png\" alt=\"\"></p><p>下面出现的都是全局环境路径，选哪一个都可以，我选的是红框的全局环境变量/usr/local/bin</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180921102713891-729188972.png\" alt=\"\"></p><p>&nbsp;</p><p>&nbsp;建立连接</p><pre>ln -s /home/cxs/install/nodejs/bin/pm2 /usr/local/bin/</pre><p>使用pm2 list验证是否成功建立连接</p><pre>pm2 list</pre><p>&nbsp;<img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180921102952606-1518356488.png\" alt=\"\"></p><p>说明pm2全局安装成功，并且可以随处访问pm2，我试试我的账号是不是也可以使用pm2命令</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180921103206006-1427894473.png\" alt=\"\"></p><p>出现这个，说明其他账号也可以全局都可以使用pm2</p><p>&nbsp;</p><p>&nbsp;5、thinkjs项目，使用pm2 start pm2.json&nbsp;来启动项目</p><p>切换到自己的账号上，需要全局变量时候没有权限的时候采用root账号</p><p>上传项目代码，使用xshell的rz -y来</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180921110551887-1246509875.png\" alt=\"\"></p><p>执行</p><pre>pm2 start pm2.json</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201809/900740-20180921110700000-513733778.png\" alt=\"\"></p><p>出现上图应该就算启动起来了</p><p>但是我想看一下项目启动之后访问情况，怎么搞，这时候需要祭出nginx</p><p>&nbsp;</p><p>6、nginx使用</p><p>&nbsp;已经部署完成，但是公网访问出现问题，出现502，</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181009170303119-993719321.png\" alt=\"\"></p><p>&nbsp;</p><p>发现是nginx配置的问题，</p><p>方案一：把nginx的实际访问地址172.31.231.103:8362修改为127.0.0.1:8362</p><pre>upstream weekly_node {\n        server 172.31.231.103:8362;\n    }      </pre><p>方案二：把项目node的启动主机host（127.0.0.1）修改为0.0.0.0</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181009165439268-1785463340.png\" alt=\"\"></p><p>附上完整的nginx服务配置</p><pre>user  root;\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    sendfile        on;\n    \n    keepalive_timeout  65;\n\n    upstream weekly_node {\n        server 172.31.231.103:8362;\n    }          \n    server {\n        listen  80;\n        server_name  localhost;\n        charset utf-8; \n        \n        #weekly static\n        location /weekly/ {\n            #root   /home/fastdfs/nginx/weekly/dist;\n            alias /home/fastdfs/nginx/weekly/dist/;\n            index  index.html index.htm;\n            try_files $uri $uri/ /index.html last;\n            #root  html;\n            #index   index.html;\n        }<br>　　　　#nodejs服务方向代理\n        location /weekly_node/ {\n            proxy_pass http://weekly_node;\n            proxy_redirect off;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            client_max_body_size 10m;\n            client_body_buffer_size 128k;\n            proxy_connect_timeout 90;\n            proxy_send_timeout 90;\n            proxy_read_timeout 90;\n            proxy_buffer_size 4k;\n            proxy_buffers 4 32k;\n            proxy_busy_buffers_size 64k;\n            proxy_temp_file_write_size 64k;\n            \n        }\n\n    }   \n\n}</pre><p></p><p>&nbsp;</p><p><br></p>','/static/upload/pics/2018/10/23YUE1x7zYT4ulaPOklijGdlik.jpg','saucxs','2018-10-23 16:37:27',87,1,1,1,23,'Linux,系统配置,Nodejs,环境,最简单步骤,部署,多个,thinkjs,nodejs项目',1,1,'https://www.cnblogs.com/chengxs/p/9682482.html',1,0,1,1,1,1),(430,'linux（centos）上安装mysql教程，为需要远程登录的用户赋予权限','linux（centos）上安装mysql教程','<p>最近把之前学生时代的win server换成了linux（centos）系统，因为win对于部署一些项目时候比较麻烦，直接入正题</p><p>原文章：<a href=\"https://www.mwcxs.top/page/430\" target=\"_blank\">https://www.mwcxs.top/page/430</a></p><p>&nbsp;</p><p>1、准备阶段</p><p>我使用xshell工具管理服务器，相应下载和安装自行百度</p><p>&nbsp;</p><p>2、安装</p><p>接下来主要介绍Linux下使用yum安装MySQL，以及启动、登录和远程访问MySQL数据库。</p><p>2.1安装mysql客户端</p><pre>yum install mysql</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022143109225-293582126.png\" alt=\"\"></p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022143209329-736980880.png\" alt=\"\"></p><p>如何出现下面这个，说明，已经安装了mysql</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022143306880-1482019395.png\" alt=\"\"></p><p>&nbsp;</p><p>2.2安装mysql服务端</p><pre>yum install mysql-server\n \nyum install mysql-devel</pre><p>在CentOS7上用上面的命令安装mysql服务端时，出现了以下的提示：</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022143422788-1585225176.png\" alt=\"\"></p><p>原因是：</p><p>CentOS7带有MariaDB而不是MySQL，MariaDB和MySQL一样也是开元的数据库，您可以使用yum -y install&nbsp;mariadb-server mariadb命令安装</p><p>&nbsp;</p><p>解决方案：</p><p>如果必须要安装MySQL，首先必须添加mysql社区repo通过输入命令：</p><pre>sudo rpm -Uvh http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022143632570-1356464034.png\" alt=\"\"></p><p>最后使用像安装MySQL的常规方法一样输入上面两行命令安装既可</p><p>&nbsp;</p><p>2.3启动和停止</p><p>1、数据库字符集设置，mysql配置文件/etc/my.cnf中加入default-character-set=utf8</p><p>2、启动mysql服务</p><pre>service mysqld start或者/etc/init.d/mysqld start</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022145211494-2137564423.png\" alt=\"\"></p><p>&nbsp;</p><p>3、检查是否成功启动了mysql</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022145159288-1470545817.png\" alt=\"\"></p><p>&nbsp;</p><p>4、停止mysql</p><pre>service mysqld stop</pre><p>&nbsp;</p><p>5、开机启动</p><pre>chkconfig -add mysqld<br><br>chkconfig --list | grep mysql*     //查看开机启动设置是否成功</pre><pre> mysqld 0:关闭 1:关闭 2:启用 3:启用 4:启用 5:启用 6:关闭</pre><p>&nbsp;</p><p>&nbsp;2.4登录</p><p>&nbsp;1、创建root管理员</p><pre>mysqladmin -u root password 123456</pre><p>&nbsp;</p><p>2、登陆</p><pre>mysql -u root -p输入密码即可。</pre><p>&nbsp;</p><p>3、忘记密码</p><pre>service mysqld stop\n \nmysqld_safe --user=root --skip-grant-tables\n \nmysql -u root\n \nuse mysql\n \nupdate user set password=password(\"new_pass\") where user=\"root\";\n \nflush privileges;</pre><p>&nbsp;</p><p>2.5远程登陆</p><p>开放防火墙的端口号</p><p>mysql增加权限：</p><pre>mysql库中的user表新增一条记录host为“%”，user为“root”。</pre><p>默认情况下，mysql只允许本地登录。</p><p>1、为需要远程登录的用户赋予权限（1）新建用户远程连接mysql数据库</p><pre>grant all on *.* to admin@\'%\' identified by \'123456\' with grant option; \nflush privileges;</pre><p>允许任何ip地址(%表示允许任何ip地址)的电脑用admin帐户和密码(123456)来访问这个mysql server。注意admin账户不一定要存在。</p><p>（2）支持root用户允许远程连接mysql数据库</p><pre>grant all privileges on *.* to \'root\'@\'%\' identified by \'123456\' with grant option;\nflush privileges;</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022161735598-645765439.png\" alt=\"\"></p><p>（3）查看端口</p><pre>show global variables like \'port\'</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022162128684-1762352772.png\" alt=\"\"></p><p>&nbsp;</p><p>centos7.x已经把3306端口开放了，并且不需要开启防火墙，直接用就行</p><p><br></p>','/static/upload/pics/2018/10/295l-95sSjAYWdMb4Ju3rcW8Gk.jpg','saucxs','2018-11-04 20:28:11',254,1,1,1,23,'linux,centos,安装,mysql,教程',1,1,'https://www.cnblogs.com/chengxs/p/9829423.html ',1,0,1,1,1,1),(431,'在linux（centos）系统安装nginx教程','在linux（centos）系统安装nginx教程','<p>最近在切换服务器操作系统，简单记录一下</p><p>一、安装nginx需要如下环境&nbsp;</p><p>1、gcc&nbsp;</p><p>编译依赖gcc环境，如果没有gcc环境，需要安装gcc</p><pre>yum install gcc-c++ </pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022170513770-2034691825.png\" alt=\"\"></p><p>&nbsp;</p><p>&nbsp;2、PCRE</p><p>PCRE(Perl Compatible Regular Expressions)是一个Perl库，包括 perl 兼容的正则表达式库。nginx的http模块使用pcre来解析正则表达式，所以需要在linux上安装pcre库。</p><pre>yum install -y pcre pcre-devel</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022170649740-1103082457.png\" alt=\"\"></p><p>&nbsp;</p><p>3、zlib&nbsp;</p><p>lib库提供了很多种压缩和解压缩的方式，nginx使用zlib对http包的内容进行gzip，所以需要在linux上安装zlib库。</p><pre>yum install -y zlib zlib-devel</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022170756109-1443431014.png\" alt=\"\"></p><p>&nbsp;</p><p>4、openssl&nbsp;OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用。&nbsp;nginx不仅支持http协议，还支持https（即在ssl协议上传输http），所以需要在linux安装openssl库。</p><pre>yum install -y openssl openssl-devel</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022171047105-146740056.png\" alt=\"\"></p><p>&nbsp;</p><p>&nbsp;二、编译安装</p><p>将nginx-1.12.2.tar.gz拷贝至linux服务器。</p><p>解压：&nbsp;tar -zxvf nginx-1.12.2.tar.gz&nbsp;cd nginx-1.12.2</p><p>执行如下命令</p><p>&nbsp;<img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022172446960-23124318.png\" alt=\"\"></p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022172653962-1117091486.png\" alt=\"\"></p><p>开始安装和 编译</p><pre>make &&amp; make instal</pre><p>查看安装目录</p><pre>whereis nginx</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022172923747-242026288.png\" alt=\"\"></p><p>&nbsp;</p><p>三、启动nginx</p><p>去安装目录下执行./nginx</p><p>启动</p><pre>cd /usr/local/nginx/sbin/\n./nginx</pre><p>查看nginx运行进程</p><pre>ps -aux | grep nginx</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022173448942-410416596.png\" alt=\"\"></p><p>其中13827为Nginx的主进程id，13828为Nginx的工作进程id</p><p>&nbsp;</p><p>&nbsp;四、启动nginx</p><pre>cd /usr/local/nginx/sbin\n./nginx -s reload</pre><p>&nbsp;</p><p>五、&nbsp;Nginx测试</p><p>访问对应安装Nginx的linux的ip，出现如下界面即安装成功。&nbsp;</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022173717001-1903103538.png\" alt=\"\" class=\"\"></p><p></p><p><br></p>','/static/upload/pics/2018/10/29WeC1Ji_zs8ML3XvmXaOWZdtP.jpg','saucxs','2018-10-29 12:14:16',69,1,0,0,23,'linux,centos,系统安装,nginx,教程',1,1,'https://www.cnblogs.com/chengxs/p/9831456.html ',1,0,1,1,1,1),(432,'在linux（centos）系统安装redis教程','在linux（centos）系统安装redis教程','<p>最近在切换服务器操作系统，简单记录一下</p><h3>一、安装redis</h3><p>1、检查是否有redis yum 源</p><pre>yum install redis</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022223839378-1835756192.png\" alt=\"\"></p><p>&nbsp;</p><p>2、下载fedora的epel仓库</p><pre>yum install epel-release</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022223946775-1122009022.png\" alt=\"\"></p><p>&nbsp;</p><p>3、安装redis数据库</p><pre>yum install redis</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022224037354-1666845761.png\" alt=\"\"></p><p>&nbsp;</p><p>4、安装完毕后，使用下面的命令启动redis服务</p><p><a href=\"javascript:void(0);\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></p><pre># 启动redis\nservice redis start\n# 停止redis\nservice redis stop\n# 查看redis运行状态\nservice redis status\n# 查看redis进程\nps -ef | grep redis</pre><p><a href=\"javascript:void(0);\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022224405219-637955873.png\" alt=\"\"></p><p>&nbsp;</p><p>&nbsp;5、设置redis为开机自动启动</p><pre>chkconfig redis on</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022224745589-950089463.png\" alt=\"\"></p><p>&nbsp;</p><p>&nbsp;6、进入redis服务</p><pre># 进入本机redis\nredis-cli\n# 列出所有key\nkeys *</pre><p>&nbsp;</p><p>7、防火墙开放相应端口</p><p><a href=\"javascript:void(0);\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></p><pre># 开启6379\n/sbin/iptables -I INPUT -p tcp --dport 6379 -j ACCEPT\n# 开启6380\n/sbin/iptables -I INPUT -p tcp --dport 6380 -j ACCEPT\n# 保存\n/etc/rc.d/init.d/iptables save\n# centos 7下执行\nservice iptables save</pre><p><a href=\"javascript:void(0);\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></p><p>&nbsp;</p><h3>二、修改redis默认端口和密码</h3><p>1、打开配置文件</p><pre>vi /etc/redis.conf</pre><p>2、修改默认端口，查找&nbsp;port 6379 修改为相应端口即可</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022231216267-2012714975.png\" alt=\"\"></p><p>&nbsp;</p><p>3、修改默认密码，查找&nbsp;requirepass foobared 将 foobared 修改为你的密码</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022231002224-1026025208.png\" alt=\"\"></p><p>&nbsp;</p><p>&nbsp;4、使用配置文件启动 redis</p><pre>redis-server /etc/redis.conf &</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022231417084-1958858419.png\" alt=\"\"></p><p>&nbsp;</p><p>&nbsp;5、使用端口登录，输入redis密码</p><pre>redis-cli -h 127.0.0.1 -p 6379</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022232214160-1328510324.png\" alt=\"\"></p><p>&nbsp;</p><p>&nbsp;6、停止redis</p><p>&nbsp;命令方式关闭redis</p><pre>redis-cli -h 127.0.0.1 -p 6379\nshutdown</pre><p>进程号杀掉redis</p><pre>ps -ef | grep redis\nkill -9 XXX</pre><p>&nbsp;</p><h3>三、使用redis desktop manager远程连接redis</h3><p>欢迎查看<a href=\"https://www.cnblogs.com/chengxs/p/9090819.html\" target=\"_blank\">https://www.cnblogs.com/chengxs/p/9090819.html</a></p><p>1、如果长时间连接不上，可能有两种可能性</p><p>　　a）bind了127.0.01：只允许在本机连接redis</p><p>　　b）protected-mode设置了yes（使用redis desktop manager工具需要配置，其余不用）</p><pre># 打开redis配置文件\nvi /etc/redis.conf\n# 找到 bind 127.0.0.1 将其注释\n# 找到 protected-mode yes 将其改为\nprotected-mode no</pre><p>&nbsp;</p><p>2、重启redis</p><pre>service redis stop\nservice redis start</pre><p>&nbsp;</p><p>3、展示</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181022233938233-1823271568.png\" alt=\"\"></p><p></p><p>&nbsp;</p><p><br></p>','/static/upload/pics/2018/10/237Do8NboBDk2mY4NKCUm4kY_G.jpg','saucxs','2018-10-23 16:42:54',65,1,1,1,23,'linux,centos,系统,安装,redis,教程',1,1,'https://www.cnblogs.com/chengxs/p/9833911.html ',1,0,1,1,1,1),(433,'Android studio安装与配置','','<h1>Android studio安装与配置</h1><p>1、首先下载Android studio安装包，可以从<a href=\"http://www.android-studio.org/%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%EF%BC%8C%E8%BF%99%E9%87%8C%E9%87%87%E7%94%A83.0%E7%89%88%E6%9C%AC%E8%BF%9B%E8%A1%8C%E6%BC%94%E7%A4%BA%EF%BC%8C%E5%AF%B9%E5%BA%94%E5%AE%89%E8%A3%85%E5%8C%85%E4%B8%BAandroid-studio-ide-171.4408382-windows.exe\">http://www.android-studio.org/下载最新版本，这里采用3.0版本进行演示，对应安装包为android-studio-ide-171.4408382-windows.exe</a>，安装包大小681 MB，安装包不带SDK</p><p>&nbsp;</p><p>&nbsp;</p><p><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111231536841-252934706.png\" alt=\"\"></p><p>2、下载好该安装包之后，点击进行安装，依次出现以下界面</p><p><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111231625950-2062278670.png\" alt=\"\"><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111231657903-64000800.png\" alt=\"\"></p><p>&nbsp;</p><p><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111231711919-54401756.png\" alt=\"\">&nbsp;&nbsp;</p><p>在这里自己选择程序安装路径</p><p><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111231759856-1267892948.png\" alt=\"\"></p><p><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111231811466-1742785898.png\" alt=\"\"><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111231820528-1221556260.png\" alt=\"\"></p><p><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111232042481-1330170635.png\" alt=\"\"></p><p>这里Android studio程序安装完毕，但是还需要继续对其进行配置；勾选Start Android Studio，然后点击finish启动AS，出现下图</p><p><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111232111919-672018704.png\" alt=\"\"></p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>选择第二项，然后点击ok，出现下面的启动界面</p><p><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111232131684-65108139.png\" alt=\"\"></p><p>在启动的时候会弹出下图</p><p><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111232147950-1605880221.png\" alt=\"\"></p><p>点击cancel，然后进入到了AS的安装向导界面</p><p><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111232206841-1950207162.png\" alt=\"\"></p><p>点击next进入UI界面主题选择界面，可以选择自己喜欢的风格，这里选择Darcula风格</p><p><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111232225013-1508764848.png\" alt=\"\"></p><p><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111232243825-458379470.png\" alt=\"\"></p><p>这里需要指定SDK的本地路径，如果之前电脑中已经存在SDK，可以指定该路径，后续就可以不用下载SDK；我这里演示本地没有安装过SDK的场景，这里暂时可以指定一个后续将保存SDK的路径；</p><p><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111232301684-1120408845.png\" alt=\"\"></p><p><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111232324669-1402743307.png\" alt=\"\"></p><p>点击Finish后，开始自动下载SDK（注意，此时需要保证电脑联网）</p><p><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111232343122-133023002.png\" alt=\"\"><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111232401872-687804195.png\" alt=\"\"></p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>下载完成SDK后，点击Finish进入AS的欢迎界面</p><p><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111232447575-43461062.png\" alt=\"\"></p><p>3、配置AS第一次运行环境，并且能成功编译运行一个APP，以helloworld为例。</p><p>点击上图中的Start a new Android Studio project新建一个工程，进入下面的界面</p><p><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111232509653-367356961.png\" alt=\"\"></p><p><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111232521481-194431519.png\" alt=\"\"><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111232529153-450261890.png\" alt=\"\"></p><p>&nbsp;</p><p><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111232539122-1426892596.png\" alt=\"\"><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111232546981-1498506635.png\" alt=\"\"></p><p>到此，一个工程建立完成，第一次建立的工程会发现卡在下面的启动界面</p><p><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111232602622-2106064754.png\" alt=\"\"></p><p>第一次建立工程卡在该界面的时候，是因为在从网上下载gradle构建工具，由于从国外站点下载，网速很慢，这里点击取消关闭该界面，采用手动配置gradle；</p><p>首先找到.gradle文件夹的路径，一般是在用户账号文件夹下，比如我这里是C:\\Users\\issuser\\.gradle</p><p>会发现该文件夹下生成了下图中的文件</p><p><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111232640731-536724217.png\" alt=\"\"></p><p>&nbsp;</p><p>&nbsp;</p><p>这里的gradle-4.1,指的是版本，它会根据你的AS版本自动生成，此时我们可以去网上下载一个gradle-4.1-all.zip压缩包，然后放到该路径下并且进行解压，注意一定要放到这个随机生成的一长串字符的文件夹下面，如下图</p><p><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111232703638-1101875301.png\" alt=\"\"></p><p><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111232713294-1387011987.png\" alt=\"\"></p><pre>此时点击图中下方的链接进行SDK下载，这里可能一次下载之后，执行Try again之后这里还是会显示报错，那么就再点击下载一次，然后再点击Try again，直到报错解除。（除了该解决办法，还可以手动更改build.gradle文件中的compileSdkVersion，buildToolsVersion</pre><pre>targetSdkVersion为对应的27也可以进行解决，这个后续再讲）</pre><p><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111232746841-673079056.png\" alt=\"\"><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111232752747-1097539050.png\" alt=\"\"></p><p><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111232805153-1234890467.png\" alt=\"\"><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111232828091-429636493.png\" alt=\"\"></p><p>上述gradle构建完成之后，就可以点击下图中的build apk编译打包apk文件了，生成的apk文件路径如下图所示</p><p><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111232849622-1383854035.png\" alt=\"\"></p><p>生成apk文件之后，导出该apk文件到模拟器或者真机上面进行安装，运行效果图如下</p><p><img src=\"https://images2017.cnblogs.com/blog/890216/201711/890216-20171111232909059-1462861577.png\" alt=\"\"></p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>至此，Android Studio的安装以及开发环境就配置好了。</p><p><br></p><p><br></p>','','saucxs','2018-10-26 21:03:40',1,0,0,0,0,'',0,0,'',0,0,0,0,0,0),(434,'阿里云免费购买SSL证书，nginx无缝升级https','阿里云免费购买SSL证书，nginx无缝升级https','<p>最近在升级交流学习社区，觉得有必要升级成https.以下是自己在升级中记录。</p><p>以下包括以下部分：</p><p>一、阿里云免费购买SSL证书</p><p>1、自己在阿里云申请了免费的，然后自己支付0元，购买了SSL证书</p><p>2、我选择DNS验证</p><p>3、在SSL证书中，下载cert证书，然后放到nginx服务器上</p><p>二、nginx无缝升级https</p><p>4、查看nginx是否支持ssl</p><p>5、配置ssl模块</p><p>6、重新编译一下</p><p>7、因为这次是升级nginx，所以不需要执行 make install，首先备份原nginx执行脚本</p><p>8、把新编译的nginx执行脚本拷贝到相应的目录下：’</p><p>9、最后进行平滑升级</p><p>10、再次检查nginx是否有https模块</p><p>11、展示一下https网站站点，<a href=\"https://www.mwcxs.top/\" target=\"_blank\">https://www.mwcxs.top/</a></p><p>附注1：nginx配置SSL报错问题，ssl on报错</p><p>附注2：nginx的https服务配置</p><p>&nbsp;</p><p>&nbsp;</p><p>1、自己在阿里云申请了免费的，然后自己支付0元，购买了SSL证书</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181027192017433-1484572339.png\" alt=\"\"></p><p>2、我选择DNS验证，因为域名是自己的。</p><p>DNS验证方式一般需要由您的域名管理人员进行相关操作。请按照您的证书订单中的进度提示，在您的域名管理系统中进行相应配置。</p><p>选择DNS域名授权验证方式，您需要到您的域名解析服务商（如万网、新网、DNSPod等）提供的系统中进行配置。例如，您的域名托管在阿里云，则需要到云解析DNS控制台进行相关配置。</p><p>&nbsp;</p><p>生成之后的域名验证，在域名解析管理可以看到。</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181027192418035-514970047.png\" alt=\"\"></p><p>&nbsp;</p><p>3、在SSL证书中，下载cert证书，然后放到nginx服务器上</p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181027192650613-1662546081.png\" alt=\"\"></p><p>4、查看nginx是否支持ssl：</p><pre>./nginx -V</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181027173506507-1592032734.png\" alt=\"\"></p><p>查看 configure arguments 信息中是否包含 -with-http_ssl_module 字样</p><p>&nbsp;</p><p>5、配置ssl模块</p><p>找到之前安装 Nginx 时的解压目录，配置ssl模块：</p><pre>./configure --with-http_ssl_module</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181027175502930-163421666.png\" alt=\"\"></p><p>&nbsp;</p><p>6、重新编译一下</p><p>在解压目录执行make</p><pre>make</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181027182017846-1747833442.png\" alt=\"\"></p><p>&nbsp;</p><p>&nbsp;7、因为这次是升级nginx，所以不需要执行 make install，首先备份原nginx执行脚本：</p><pre>mv /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.old</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181027184349162-568024192.png\" alt=\"\"></p><p>&nbsp;</p><p>&nbsp;8、把新编译的nginx执行脚本拷贝到相应的目录下：</p><pre>cd objs<br>cp nginx /usr/local/nginx/sbin/</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181027185107453-1289989636.png\" alt=\"\"></p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181027185129066-891134985.png\" alt=\"\"></p><p>&nbsp;</p><p>9、最后进行平滑升级</p><pre>cd ..\nmake upgrade</pre><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181027185956561-1840754969.png\" alt=\"\"></p><p>&nbsp;</p><p>&nbsp;10、再次检查nginx是否有https模块</p><p>&nbsp;<img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181027190241117-401291265.png\" alt=\"\"></p><p>&nbsp;</p><p>11、展示一下https网站站点，<a href=\"https://www.mwcxs.top/\" target=\"_blank\">https://www.mwcxs.top/</a></p><p><img src=\"https://img2018.cnblogs.com/blog/900740/201810/900740-20181027190332128-321771320.png\" alt=\"\"></p><p>&nbsp;</p><p>&nbsp;</p><p>附注1：nginx配置SSL报错问题，ssl on报错</p><pre>启动报错（错误信息：nginx: [emerg] the \"ssl\" parameter requires ngx_http_ssl_module in /home/soft/nginx/conf/nginx.conf:76）</pre><p>需要配置模块ssl模块&nbsp;--with-http_ssl_modul，请查看本文的第二部分：2、配置ssl模块</p><p>&nbsp;</p><p>附注2：nginx的https服务配置</p><p><a href=\"javascript:void(0);\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></p><pre>      # HTTPS server\n    \n    server {\n        listen 443;\n        server_name www.mwcxs.top;\n\n        ssl on;\n        root /home/nodejs/liblog/www;\n        index index.js index.html index.htm;\n        \n        ssl_certificate      /usr/local/nginx/cert/15420110408020120565539868.crt;\n        ssl_certificate_key  /usr/local/nginx/cert/15420110408020120565539868.key;\n\n        ssl_session_cache    shared:SSL:1m;\n        ssl_session_timeout  5m;\n\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_prefer_server_ciphers  on;\n\n        if ( -f $request_filename/index.html ){\n            rewrite (.*) $1/index.html break;\n        }\n        if ( !-f $request_filename ){\n            rewrite (.*) /index.js;\n        }\n        location / {\n            proxy_http_version 1.1;\n            proxy_set_header Connection \"\";\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header Host $http_host;\n            proxy_set_header X-NginX-Proxy true;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection \"upgrade\";\n            proxy_pass http://learning_community_node$request_uri;\n            proxy_redirect off;\n        }\n\n        location = /production.js {\n            deny all;\n        }\n\n        location = /testing.js {\n            deny all;\n        }\n\n        location ~ /static/ {\n            etag         on;\n            expires      max;\n        }\n        \n    }<br><br>\n    server {\n        listen 80;\n        server_name www.mwcxs.top mwcxs.top;\n        <strong>return  301 https://$server_name$request_uri;\n    </strong>}</pre><p><a href=\"javascript:void(0);\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></p><pre><strong>注：return 301 https://$server_name$request_uri;用来把http转换成https。<br><br>欢迎关注:<a href=\"https://github.com/saucxs/nodeJSBlog\" target=\"_blank\">https://github.com/saucxs/nodeJSBlog</a> ,欢迎fork和start</strong></pre><p><br></p>','/static/upload/pics/2018/10/29Qt1EldE7Ybuxc9LY4EM0LLFq.jpg','saucxs','2018-10-29 12:13:43',287,1,1,1,1,'阿里云,免费,购买SSL证书,nginx,无缝升级,https',1,1,'https://www.cnblogs.com/chengxs/p/9862939.html',1,0,1,1,1,1),(437,'docker初体验，搭建自用的gitlab服务（二）','','<p>1，启动postgresql</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"bash hljs\" codemark=\"1\">docker run --name gitlab-postgresql <span class=\"hljs-_\">-d</span> \\\n    --env <span class=\"hljs-string\">\'DB_NAME=gitlabhq_production\'</span> \\\n    --env <span class=\"hljs-string\">\'DB_USER=gitlab\'</span> --env <span class=\"hljs-string\">\'DB_PASS=password\'</span> \\\n    --env <span class=\"hljs-string\">\'DB_EXTENSION=pg_trgm\'</span> \\\n    --volume /srv/docker/gitlab/postgresql:/var/lib/postgresql \\\n    sameersbn/postgresql:9.5-3</code></pre><p><img src=\"/static/upload/pics/2018/10/30v0W50uIdVtOJFw2FhLhH36lW.png\" alt=\"\" style=\"max-width:100%;\" class=\"\"><br></p><p><br></p><p>2，启动Redis消息容器</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"bash hljs\" codemark=\"1\">docker run --name gitlab-redis <span class=\"hljs-_\">-d</span> \\\n    --volume /srv/docker/gitlab/redis:/var/lib/redis \\\n    sameersbn/redis:latest</code></pre><p><img src=\"/static/upload/pics/2018/10/30_sGJ_dwVvZAVBhsRmbOrxpEy.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p><br></p><p>3，启动gitlab</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"bash hljs\" codemark=\"1\">docker run --name gitlab <span class=\"hljs-_\">-d</span> \\\n    --link gitlab-postgresql:postgresql --link gitlab-redis:redisio \\\n    --publish 9000:22 --publish 9001:80 \\\n    --env <span class=\"hljs-string\">\'GITLAB_PORT=9001\'</span> --env <span class=\"hljs-string\">\'GITLAB_SSH_PORT=9000\'</span> \\\n    --env <span class=\"hljs-string\">\'GITLAB_SECRETS_DB_KEY_BASE=long-and-random-alpha-numeric-string\'</span> \\\n    --env <span class=\"hljs-string\">\'GITLAB_SECRETS_SECRET_KEY_BASE=long-and-random-alpha-numeric-string\'</span> \\\n    --env <span class=\"hljs-string\">\'GITLAB_SECRETS_OTP_KEY_BASE=long-and-random-alpha-numeric-string\'</span> \\\n    --volume /srv/docker/gitlab/gitlab:/home/git/data \\\n    sameersbn/gitlab:8.14.0</code></pre><p><img src=\"/static/upload/pics/2018/10/30V2yypSdjhD2R4wOd9YIEfSkI.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p><br></p><p>4、查看容器运行的情况</p><p><img src=\"/static/upload/pics/2018/10/30JSXh49CPQQk8nt4hjOOmnDFv.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p><br></p><p>5、放开9000端口</p><p><img src=\"/static/upload/pics/2018/10/30FyHnr2nAkOEZYF1ONEeSMugX.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p><br></p>','','saucxs','2018-10-30 21:56:19',5,0,0,0,0,'',0,0,'',0,0,0,0,0,0),(438,'快速新建简单的koa2后端服务','快速新建简单的koa2后端服务','<p>既然前端工程化是基于NodeJS，那么选择NodeJs做前后端分离部署也是理所应当的。其实只需要实现静态资源和代理的话，用nginx才是最好的选择，用NodeJS是为了日后能进一步在服务端上实现自动构建或服务端渲染。<br></p><p>同步到交流学习社区：<a href=\"https://www.mwcxs.top/page/438\" target=\"_blank\">https://www.mwcxs.top/page/438</a></p><p><br></p><h4>一、目前只有前端的目录结构</h4><p><img src=\"/static/upload/pics/2018/11/1_1a3yL5tNkj5ABKHIArSUaXY.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p>小声说：小程序代码结构</p><p><br></p><h4>二、创建一个简单后端服务器</h4><p>在根目录下执行</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\">npm init -y<br></code></pre><p><code>npm init</code>&nbsp;用来初始化生成一个新的&nbsp;<code>package.json</code>&nbsp;文件。它会向用户提问一系列问题，如果你觉得不用修改默认配置，一路回车就可以了。<br>如果使用了&nbsp;<code>-f</code>（代表<code>force</code>）、<code>-y</code>（代表<code>yes</code>），则跳过提问阶段，直接生成一个新的&nbsp;<code>package.json</code>&nbsp;文</p><p><img src=\"/static/upload/pics/2018/11/1ZpMWEWl7Ulm9P_xsfN1GUYMv.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p>接下来执行</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\">npm i koa koa-<span class=\"hljs-keyword\">static</span> http-proxy-middleware <span style=\"font-size: 0.8em;\">async </span><span style=\"font-size: 0.8em;\">koa-router </span><span style=\"font-size: 0.8em;\">koa-bodyparser koa-json mysql</span><span style=\"font-size: 1em;\"> -s</span></code></pre><p>第一个<code>koa</code>是基于NodeJS的服务器框架，</p><p><code>第二个koa-static</code>是基于Koa的插件，我们需要用它建立静态资源服务器，</p><p>第三个<code>http-proxy-middleware</code>是用于做代理的插件。</p><p>有了这三个东西，我们就可以搭建出最简单的前端服务器了。</p><p>第四个async是用于异步操作</p><p>第五个koa-router是路由控制器，实现路由中间件</p><p>第六个koa-bodyparser是post提交数据中间件</p><p>第七个koa-json是get提交数据的中间件</p><p>第八个mysql是数据库中间件</p><p>-s 使用 --save 安装的插件，责被写入到 dependencies 对象里面去,dependencies &nbsp;是需要发布到生产环境的<br></p><p><img src=\"/static/upload/pics/2018/11/1YglsIfgHDcew3NgUDm6hh98t.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p><br></p><h4>三、配置</h4><p>项目根目录下会多出一个<code>package.json，一个</code>package-lock.json，一个<code style=\"font-size: 14px;\">node_modules</code>，我们不用管这三个，而是在根目录下建立一个api文件夹，作为后端服务接口。</p><p>1、在api文件夹下新建一个app.js和mysql.js.</p><p>app.js内容如下</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\"><span class=\"hljs-keyword\">const</span> Koa = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'koa\'</span>);\n<span class=\"hljs-keyword\">const</span> koaJson = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'koa-json\'</span>);\n<span class=\"hljs-keyword\">const</span> bodyParser = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'koa-bodyparser\'</span>);\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'path\'</span>);\n<span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'http\'</span>);\n<span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'fs\'</span>);\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">async</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'async\'</span>);\n<span class=\"hljs-keyword\">const</span> query = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'./mysql.js\'</span>);\n\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Koa();\n\napp.use(bodyParser());\napp.use(koaJson());\n\napp.use(<span class=\"hljs-keyword\">async</span> (ctx, next) =&gt; {\n  ctx.execSql = query;\n  <span class=\"hljs-keyword\">await</span> next();\n});\n\n<span class=\"hljs-comment\">// routes</span>\nfs.readdirSync(path.join(__dirname, <span class=\"hljs-string\">\'routes\'</span>)).forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">file</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (~file.indexOf(<span class=\"hljs-string\">\'.js\'</span>)) app.use(<span class=\"hljs-built_in\">require</span>(path.join(__dirname, <span class=\"hljs-string\">\'routes\'</span>, file)).routes());\n});\n\napp.use(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">ctx, next</span>) </span>{\n  ctx.redirect(<span class=\"hljs-string\">\'/404.html\'</span>);\n});\n\napp.on(<span class=\"hljs-string\">\'error\'</span>, (error, ctx) =&gt; {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'something error \'</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(ctx.onerror))\n  ctx.redirect(<span class=\"hljs-string\">\'/500.html\'</span>);\n});\n\nhttp.createServer(app.callback())\n  .listen(<span class=\"hljs-number\">8090</span>)\n  .on(<span class=\"hljs-string\">\'listening\'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'server listening on: \'</span> + <span class=\"hljs-number\">8090</span>)\n  });</code></pre><p>mysql.js内容如下</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\"><span class=\"hljs-keyword\">const</span> mysql = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'mysql\'</span>);\n\n<span class=\"hljs-keyword\">const</span> pool = mysql.createPool({\n    host: <span class=\"hljs-string\">\'127.0.0.1\'</span>,\n    user: <span class=\"hljs-string\">\'root\'</span>,\n    password: <span class=\"hljs-string\">\'123456\'</span>,\n    database: <span class=\"hljs-string\">\'wx_contacts\'</span>,\n    connectionLimit: <span class=\"hljs-number\">10</span>\n})\n\n<span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">sql, values</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {\n        pool.getConnection(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, connection</span>) </span>{\n            <span class=\"hljs-keyword\">if</span> (err) {\n                <span class=\"hljs-keyword\">return</span> reject(err);\n            } <span class=\"hljs-keyword\">else</span> {\n                connection.query(sql, values, (err, rows) =&gt; {\n                    connection.release();\n                    <span class=\"hljs-keyword\">if</span> (err) {\n                        <span class=\"hljs-keyword\">return</span> reject(err)\n                    } <span class=\"hljs-keyword\">else</span> {\n                        <span class=\"hljs-keyword\">return</span> resolve(rows);\n                    }\n                })\n            }\n        })\n    })\n}\n\n<span class=\"hljs-built_in\">module</span>.exports = query;</code></pre><p>2、在api文件夹下新建一个routes文件夹，文件夹下建立index.js</p><p>存放路由配置，index.js内容如下</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\"><span class=\"hljs-keyword\">const</span> router =  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'koa-router\'</span>)();\n<span class=\"hljs-keyword\">const</span> contact = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'../contact/index.js\'</span>);\n\n\nrouter.use(<span class=\"hljs-string\">\'/contact\'</span>, contact.routes(), contact.allowedMethods());\n\n<span class=\"hljs-built_in\">module</span>.exports = router;</code></pre><p>3、在api文件夹下新建一个contact文件夹，文件夹下建立index.js和contoller.js</p><p>index.js内容如下</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\"><span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'koa-router\'</span>)();\n<span class=\"hljs-keyword\">const</span> controller = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'./controller.js\'</span>);\n\nrouter.post(<span class=\"hljs-string\">\'/login\'</span>, controller.Login);\n\n<span class=\"hljs-built_in\">module</span>.exports = router;</code></pre><p>contoller.js内容如下</p><p>主要是接口调用的</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\"><span class=\"hljs-comment\">/*\n * 登录\n */</span>\nexports.Login = <span class=\"hljs-keyword\">async</span>(ctx) =&gt; {\n    <span class=\"hljs-keyword\">let</span> phone = ctx.request.body.phone || <span class=\"hljs-string\">\'\'</span>;\n    <span class=\"hljs-keyword\">let</span> psd = ctx.request.body.password || <span class=\"hljs-string\">\'\'</span>;\n    <span class=\"hljs-keyword\">if</span> (!phone || !psd) {\n        ctx.body = {\n            success: <span class=\"hljs-literal\">false</span>,\n            message: <span class=\"hljs-string\">\'手机号码或密码不能为空\'</span>\n        };\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-keyword\">await</span> ctx.execSql(<span class=\"hljs-string\">`select * from contact_user where phone = ? and password = ?`</span>, [phone, psd]);\n        <span class=\"hljs-keyword\">if</span> (result.length &gt; <span class=\"hljs-number\">0</span>) {\n            ctx.body = {\n                success: <span class=\"hljs-literal\">true</span>,\n                userID: result[<span class=\"hljs-number\">0</span>].id,\n                message: <span class=\"hljs-string\">\'\'</span>\n            };\n        } <span class=\"hljs-keyword\">else</span> {\n            ctx.body = {\n                success: <span class=\"hljs-literal\">false</span>,\n                userID: <span class=\"hljs-number\">0</span>,\n                message: <span class=\"hljs-string\">\'账号或密码错误\'</span>\n            };\n        }\n    } <span class=\"hljs-keyword\">catch</span> (err) {\n        ctx.body = {\n            success: <span class=\"hljs-literal\">false</span>,\n            userID: <span class=\"hljs-number\">0</span>,\n            message: err\n        };\n    }\n}</code></pre><p><br></p><h4><b>四、运行</b></h4><p>运行</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\">node api/app.js</code></pre><p><img src=\"/static/upload/pics/2018/11/1VgTxyZ3aw6pXYNCZMZgRo7P_.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p>运行起来后，直接关掉终端即可，切不可Ctrl + C退出，否则服务又会停掉。</p><p><br></p><p>此时的项目结构</p><p><img src=\"/static/upload/pics/2018/11/1mHY1Mjk_4_ACJqKZno5wnKJ9.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p><br></p>','/static/upload/pics/2018/11/17HN01cs00UxmqzYdFbCRcC7a.jpg','saucxs','2018-11-01 17:57:36',92,1,0,1,3,'快速,新建,简单,koa2,后端服务',1,1,'',3,0,0,0,0,0),(440,'微信小程序初体验，入门练手项目--通讯录，后台是阿里云服务器(一)','微信小程序初体验，入门练手项目--通讯录，后台是阿里云服务器(一)','<p><b>一、前言（坑爹的玩意）</b><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;微信小程序自从2017年，被各种看好，不过一段时间过去了还是反响平平，下半年随着各项功能的开放，很多企业陆续接入了小程序，我觉得就算是坑，咱们也得踩踩。不然怎么从微信这个大流量体系中推广引流。</p><p>&nbsp; &nbsp; 小程序内部可以理解成一个mvvm的框架，分为逻辑层和视图层，逻辑层将数据进行处理后发送给视图层，同时接受视图层的事件反馈。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;最近微信小程序异常火爆，很多人在学习，下面带着大家搭建下微信小程序的调试环境（client+server），并调试入门练手项目--<a href=\"https://github.com/saucxs/wx_phoneBook\" target=\"_blank\">通讯录（phoneBook）</a>（JavaScript和node.js基础即可,微信推荐使用的语言，去菜鸟教程简单学习下&nbsp;JavaScript，node.js，mysql，nginx即可），方便大家学习。</p><p><b>二、相关概念</b></p><p>&nbsp; &nbsp; &nbsp; &nbsp; 官方解释：微信小程序是一种全新的连接用户与服务的方式，它可以在微信内被便捷地获取和传播，同时具有出色的使用体验。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;小程序是一种不需要下载安装即可使用的应用，它实现了应用“触手可及”的梦想，用户扫一扫或者搜一下即可打开应用。可以理解成一套嵌套在微信里面的app，和原生app不同的是不需要下载，属于小而轻的应用。</p><p>三、开始工作</p><p>1、本地koa后台服务部署</p><p>可以参考<a href=\"https://www.cnblogs.com/chengxs/p/9890735.html\">快速新建简单的koa2后端服务</a>&nbsp;这篇文章，教会你快递建立简单的koa后端服务。</p><p>2、准备注册等工作</p><p>（1）<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fdebug%2Fwxadoc%2Fintroduction%2Findex.html%3Ft%3D20171117\" target=\"_blank\">注册账号</a>&nbsp;</p><p>（2）<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fdebug%2Fwxadoc%2Fdev%2Fdevtools%2Fdownload.html%3Ft%3D201822\" target=\"_blank\">下载开发者工具</a>, 下载1.02.x这个版本的，最新版的有bug，编译的时候调试器Wxml窗口会出现空的page标签，里面没有内容。</p><p><img style=\"max-width:100%;\" src=\"https://www.mwcxs.top/static/upload/pics/2018/11/2bX4DbdOKytVPJb75uPRRHkdV.png\"><br></p><p>（3）注册好后登录下<a href=\"https://mp.weixin.qq.com/wxopen/wacodepage?action=getcodepage&token=1168160377&amp;lang=zh_CN\" target=\"_blank\">微信公众平台|小程序</a>，在设置里找到开发设置，把appID保存下来，一会开发的时候需要用到</p><p><img style=\"max-width:100%;\" src=\"https://www.mwcxs.top/static/upload/pics/2018/11/262zFYeJ_gvWH_yo7NCKFAyAj.png\"><br></p><p><b><br></b></p><p><b>四、启动项目起来</b></p><p>1、此时，工具有了，ID有了，接下来开始我们的撸码之旅。打开开发者工具，扫码登录后选择小程序项目，点击右下角的加号，创建新项目，选择项目目录，填写appID，项目名称，写好后点击确定。</p><p><img style=\"max-width:100%;\" src=\"https://www.mwcxs.top/static/upload/pics/2018/11/2fsQI8TFT-R_X9uwTtQ4Az6HP.png\"><br></p><p>2、确定以后，默认打开后，发现给我们创建了一些代码。</p><p><img style=\"max-width:100%;\" src=\"https://www.mwcxs.top/static/upload/pics/2018/11/2GZIGIZnluqg6y-QV_PbQHXun.png\"><br></p><p>3、设置不校验合法域名</p><p>这个设置是本地开发换环境下，进行开发调试的，必须勾上。</p><p><img style=\"max-width:100%;\" src=\"https://www.mwcxs.top/static/upload/pics/2018/11/2wjnWYKLNyKlXLLPOBmtssGO3.png\"><br></p><p>4、运行起来了</p><p><img style=\"max-width:100%;\" src=\"https://www.mwcxs.top/static/upload/pics/2018/11/2ll6IQQmwnD5NFqlNF232mmWr.png\"><br></p><p><br></p><p><br></p>','/static/upload/pics/2018/11/2ZrmkwQvuxX30pnVNi6MwcaKa.jpg','saucxs','2018-11-02 22:42:41',225,1,0,1,18,'微信小程序,koa',1,1,'',1,0,0,0,0,0),(441,'微信小程序初体验，入门练手项目--通讯录，部署上线(二)','微信小程序初体验，入门练手项目--通讯录，源码地址：https://github.com/saucxs/wx_phoneBook，欢迎fork和start，入门级的小程序','<p>接上一篇《<a href=\"https://www.cnblogs.com/chengxs/p/9898670.html\" style=\"\"><font size=\"2\">微信小程序初体验，入门练手项目--通讯录，后台是阿里云服务器</font></a>》：<a href=\"https://www.cnblogs.com/chengxs/p/9898670.html\" target=\"_blank\">https://www.cnblogs.com/chengxs/p/9898670.html</a></p><p><br></p><p>开发微信小程序最尴尬的是<br>好不容易开发完了，却在代码审核时被卡住了。<br>因为你可能认为你的类目是开放类目中的一个，但是微信可能判定为另一个需要资质的或者未开放的。</p><p>&nbsp;同步交流学习社区：<a href=\"https://www.mwcxs.top/preview/441\" target=\"_blank\">https://www.mwcxs.top/preview/441</a></p><p><br></p><h4><b>一、配置参数</b></h4><p><b>入门级的小程序，只需要使用接口请求，其他功能是没有的。</b></p><p><b>1、服务器接口请求的url</b></p><p><img src=\"/static/upload/pics/2018/11/3VTSrCLl9eL2PY_q5ek_8OLOQ.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p>在上一篇文章<font size=\"4\"><strong>八、部署线上后端服务的</strong><strong>4、本地修改设置不校验合法域名</strong></font></p><p>本地修改设置不校验合法域名，这时候设置服务器域名，本地调试的时候调用使用的是服务器的后端服务</p><p><br></p><h4><b>2、设置-基本设置</b></h4><p><img src=\"/static/upload/pics/2018/11/3zpIKyJ5hX7b7EGviV2H1Y0s8.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p>开始填写小程序发布流程：</p><p><img src=\"/static/upload/pics/2018/11/3WmQfBet4yOKgAtUVSnuXqZ2j.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p>填写小程序信息</p><p><img src=\"/static/upload/pics/2018/11/3y3UBsPXkuAspe-UUFoESvL1X.png\" alt=\"\" style=\"max-width:100%;\"><br></p><h4><br></h4><h4><b>3、本地在真机上预览</b></h4><p>首先要预览，开发者（商家）开发完一小程序后，都需要在手机上先预览一下再发布，因为由于各种原因会导致错误，我们为了查看有没有问题，或想看看真实的体验怎么样。这一步必不可少！如下图所示，击“预览”。</p><p><img src=\"/static/upload/pics/2018/11/3cVGVrBzOJsavA8R9dMlZvkEU.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p>运行一切OK</p><p><br></p><h4><b>4、代码上传</b></h4><p><img src=\"/static/upload/pics/2018/11/3IXCNumDgI-2xBoiT1FbDafQi.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p>点击确定</p><p><img src=\"/static/upload/pics/2018/11/3nxp9xkOwtWy3e3FbemWhjAIc.png\" alt=\"\" style=\"max-width:100%;\" class=\"\"><br></p><p>点击上传</p><p>但是出现错误如下：</p><p><img src=\"/static/upload/pics/2018/11/3ldZgf2wOQcBjDpuvpiqAdZPF.png\" alt=\"\" style=\"max-width:100%;\" class=\"\"><br></p><p>发现都是后端服务的包，这个对于小程序的前端没有影响。</p><p><br></p><h4><b>二、小程序发布</b></h4><p><img src=\"/static/upload/pics/2018/11/3kgxxDORfVMxM4eczIEr-QYEO.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p>点击提交审核</p><p><img src=\"/static/upload/pics/2018/11/3Ty4M0uTVhQKxm5xKW1fNnuQy.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p>继续提交</p><p><img src=\"/static/upload/pics/2018/11/38QCTyA-cfo-BmUxaH81YuF6s.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p>点击下一步</p><p><img src=\"/static/upload/pics/2018/11/3YQraJRYz6bxpaxZrwScEd5K7.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p>点击提交审核</p><p><img src=\"/static/upload/pics/2018/11/3HfOR2bmaK34ZAe0-E7HnWsXr.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p>接下来，就是等待微信审核</p><p><br></p><p><b>2018年11月5日补充</b></p><p>终于审核了，结果是：</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\">审核未通过\n\n原因如下：\n<span class=\"hljs-number\">1</span>:小程序功能不符合规则:\n(<span class=\"hljs-number\">1</span>):小程序所实际提供的服务和内容，必须是正式的，不能以Demo形式提交。</code></pre><p><img src=\"/static/upload/pics/2018/11/5b-FMkDSJ6BJhCg_rRht7AMKz.png\" alt=\"\" style=\"max-width:100%;\" class=\"\"><br></p><p>心想，我这个是按照官方初始化demo的开发的，难道是因为这个的原因？</p><p>搜索了一下：</p><p>1、quickstart有demo内容没摘干净，注意风格改变下，功能不要太单一</p><p>2、还有那个logs,没必要的话都去了。做得精致一点。</p><p>3、把没有用到的获取的微信个人信息的coding也去掉</p><p>4、开发流程没用正式域名？</p><p>5、域名授权没做好?&nbsp;<br></p><p>6、小程序提供的内容必须是正式的，不能以测试内容提交，需修改含有测试字样等信息的内容，再重新审核。</p><p><br></p><p>我再重新提交审核试试</p><p><br></p><h4><b>补充：2018年11月6日下午一点</b></h4><p>这个就过了，主要是修改了</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\"><span class=\"hljs-number\">1</span>、quickstart有demo内容没摘干净，注意风格改变下，功能不要太单一\n\n<span class=\"hljs-number\">2</span>、还有那个logs,没必要的话都去了。做得精致一点。\n\n<span class=\"hljs-number\">3</span>、把没有用到的获取的微信个人信息的coding也去掉</code></pre><p><img src=\"/static/upload/pics/2018/11/66QsvhK4XJtpa2Mzh6oIxDIUO.png\" alt=\"\" style=\"max-width:100%;\" class=\"\"><br></p><p>点击提交发布之后</p><p><img src=\"/static/upload/pics/2018/11/6YG5NOcu1VNjprIVG5_D2UIVt.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p>再去设置看</p><p><img src=\"/static/upload/pics/2018/11/6KTDFIp0O9vxcTJNDX3hE-bkY.png\" alt=\"\" style=\"max-width:100%;\" class=\"\"><br></p><p>可以下载资料包，里面有各种格式小程序码和二维码</p><p>贴出个小程序码，可以看看效果</p><p>测试账号：18966667777 密码：test</p><p><img src=\"/static/upload/pics/2018/11/6wNEBO7ysY1tHCla2xBxRGfuh.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p><br></p><blockquote><p>源码地址：<a href=\"https://github.com/saucxs/wx_phoneBook\" target=\"_blank\">https://github.com/saucxs/wx_phoneBook</a>，欢迎fork和start，入门级的小程序</p></blockquote><p><br></p>','/static/upload/pics/2018/11/3bF7GhlsKW38ic99G8DBBI2An.jpg','saucxs','2018-11-06 13:39:35',256,1,0,1,18,'微信小程序,发布,部署',1,1,'https://www.mwcxs.top/preview/441',1,0,0,0,0,0),(442,'songEagle-backManage专栏：登陆篇','之前自己用hexo搭建过自己的第一个博客，但是觉得那个hexo限制比较多，而且书写博客有点不方便，然后自己接触到thinkjs，自己弄了个nodeJSBlog，本来说是给自己写博客用的，最后慢慢吸收不同的功能，加入了社区，后来改成了交流学习社区，而且觉得东西一多，不够简约，于是最近自己打算重写，技术站：koa+vue+vuex+react+mysql+redis+nginx。','<p>打算写个专栏，这个可以把一系列的文章放在一起，供更多开发者来交流学习。</p><p><br></p><p><b>一、初始化vue项目</b></p><blockquote><p>vue init webpack&nbsp;structure</p></blockquote><p><b>项目结构</b></p><p><img src=\"/static/upload/pics/2018/11/6Jf02a_HRO6emE80-A-bwiNWs.png\" alt=\"\" style=\"max-width:100%;\"><b><br></b></p><p><br></p><p><b>二、调整项目结构</b></p><p><b>1、新建server文件夹，存放后端服务</b></p><p><b>2、引入koa</b></p><p>前提：node v7.6.0 以上版本</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\">npm install koa --save</code></pre><p>在server文件夹下创建程序入口文件：app.js</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\"><span class=\"hljs-keyword\">const</span> Koa = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'koa\'</span>)\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Koa()\n\n<span class=\"hljs-comment\">// response</span>\napp.use(ctx =&gt; {\n  ctx.body = <span class=\"hljs-string\">\'Hello Koa\'</span>\n})\n\napp.listen(<span class=\"hljs-number\">3000</span>)</code></pre><p><b>3、路由和controller</b></p><p>Koa本质上是调用一系列的中间件，来处理对应的请求，并决定是否传递到下一个中间件去处理。</p><p>个人觉得，接口就是根据不同的请求连接干不同的事情，返回相应的结果，需要一个路由中间件<a href=\"https://github.com/alexmingoia/koa-router\" target=\"_blank\">koa-router</a>来处理分发请求。</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\">npm install koa-router --save</code></pre><p>因为koa是很纯粹的，你提交的数据，它并不会帮你处理。所以需要引用一个中间件来处理提交的数据--<a href=\"https://github.com/koajs/bodyparser\" target=\"_blank\">bodyparser</a>和<span style=\"background-color: rgb(248, 248, 248); font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 0.8em; white-space: pre-wrap;\">koa-json</span>。</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\">npm install koa-bodyparser --save\n\nnpm install <span style=\"font-size: 0.8em;\">koa-json --save</span></code></pre><p>不能把所有的接口都写在这一个文件，所以我们得改变一下项目结构。</p><p>理一下思路，路由的配置文件router为一个模块，接口的方法应该按业务模块分成一个个controller为一个模块，koa的配置文件为一个模块</p><p><img src=\"/static/upload/pics/2018/11/6Lp_FpfdGdQjR1sw-pcluX3-J.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p><br></p><p><b>4、koa处理静态资源中间件</b></p><p>koa的中间件koa-static</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\">npm install koa-<span class=\"hljs-keyword\">static --save</span></code></pre><p><b><br></b></p><p><b>5、<font face=\"Monaco, Menlo, Consolas, Courier New, monospace\"><span style=\"white-space: pre-wrap; background-color: rgb(248, 248, 248);\">koa处理token问题中间件jwt</span></font></b></p><p><span style=\"font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 1em; background-color: rgb(248, 248, 248); white-space: pre-wrap;\">验证jwt的koa中间件</span></p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\">npm install koa-jwt --save</code></pre><p><br></p><p><b>6、koa处理session存储中间件<span style=\"background-color: rgb(248, 248, 248); font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 0.8em; white-space: pre-wrap;\">koa-session2</span></b></p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\">npm install koa-session2 --save</code></pre><p><br></p><p><b>7、安装koa处理的<span style=\"background-color: rgb(248, 248, 248); font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 0.8em; white-space: pre-wrap;\">ioredis</span></b></p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\">npm install ioredis --save</code></pre><p><br></p><p><b>8、安装数据库mysql</b></p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\">npm install mysql --save</code></pre><p><br></p><p><b>9、安装定时任务<span style=\"background-color: rgb(248, 248, 248); font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 0.8em; white-space: pre-wrap;\">node-schedule</span></b></p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\">npm install node-schedule -g</code></pre><p><br></p><p><b>10、安装文件上传模块<span style=\"background-color: rgb(248, 248, 248); font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 0.8em; white-space: pre-wrap;\">formidable</span></b></p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\">npm install <b style=\"font-size: 0.8em;\">formidable </b><span style=\"font-size: 1em;\">-g</span></code></pre><p><br></p><p><br></p>','','saucxs','2018-11-17 16:08:18',10,0,0,0,3,'',0,0,'',3,0,0,0,0,0),(443,'东方财富证券开户文案征集活动','东方财富证券开户文案征集活动','<p></p><p>为促进东方财富证券&nbsp;</p><p>A 股开户、两融开户，公司启动“证券促\n开户”文案征集活动。点击“建议”——“发起建议”——产品选\n择“证券开户文案”填写具体文案内容即可参加本次活动。\n活动要求：</p><p>&nbsp;1、 文案要求合规，合规包含广告法和证券公司宣传时要注意\n的合规问题，比如：免费、0 佣金、开户送礼/送钱等字眼\n不可以出现。&nbsp;</p><p>2、 文案包含文字内容即可，需要兼具可传播性，维护品牌正\n面价值。</p><p>3、 不能简单以降佣、开户送钱等方式获客，佣金规定只能为\n万 2.5。\n活动时间：\n3 月 19 日——4 月 30 日\n奖励内容：\n活动文案一旦被采纳，不仅可以得到积分奖励，另外还有机会得到精\n美礼品。\n</p><p><br></p>','/static/upload/pics/2018/11/9nPFpxRzSQaV7GePlGrMzdB-g.jpg','saucxs','2018-11-09 12:03:15',31,0,0,0,14,'',0,1,'',6,0,0,0,0,0),(444,'sau交流学习社区第三方登陆github--oauth来实现用户登录','1、交流学习社区需要通过github获取用户的基本信息2、跳转到github的授权页面，用户同意交流学习社区获取它的基本信息3、交流学习社区获取github提供的授权码（验证码），使用授权码向github申请一个令牌4、github对交流学习社区提供的授权码进行验证，验证没有问题后，给一个令牌到交流学习社区端5、交流学习社区使用令牌，向github获取用户信息.......\n','<p style=\"text-align: center; \"><font size=\"5\">sau交流学习社区第三方登陆github--oauth来实现用户登录</font></p><p>最近在丰富nodejsBlog开发的<a href=\"https://mwcxs.top\" target=\"_blank\">“交流学习社区”</a>（https://www.mwcxs.top）的其他功能以及修复一些bug。</p><p>有时候觉得注册会让用户觉得很麻烦，如果提供第三方登陆，用户会选择他经常使用的平台进行登陆，这样可以省去很多繁琐的步骤，开发人员基本都会有Github账号。</p><p>在考虑使用第三方登录,就研究了下使用github的oauth来时间用户登录。实现起来还是很简单的，下面简单介绍一下：</p><p><br></p><h4><b style=\"color: inherit; font-size: 24px;\">一、<span style=\"color: inherit; font-size: 18px;\">OAuth 2.0原理</span></b><br></h4><p>为啥要说下这个oauth 2.0的原理？因为这个是第三方登陆必须要理解的地方。</p><blockquote><p>OAuth（开放授权）是一个开放标准，允许用户让第三方应用访问该用户在某一网站上存储的私密的资源（如照片，视频，联系人列表），而无需将用户名和密码提供给第三方应用。 ---- 百度百科</p></blockquote><p>（一）该协议和授权认证中涉及三个部分：</p><p>1、服务端提供方，例如github，QQ等，github上存储了用户的登录名，email，昵称，头像等信息</p><p>2、用户</p><p>3、客户端，例如交流学习社区就是一个客户端，需要服务端向我提供一些基本信息</p><p><br></p><p>（二）认证授权过程</p><p>1、交流学习社区需要通过github获取用户的基本信息</p><p>2、跳转到github的授权页面，用户同意交流学习社区获取它的基本信息</p><p>3、交流学习社区获取github提供的授权码（验证码），使用授权码向github申请一个令牌</p><p>4、github对交流学习社区提供的授权码进行验证，验证没有问题后，给一个令牌到交流学习社区端</p><p>5、交流学习社区使用令牌，向github获取用户信息</p><p>6、github确认令牌没有问题，返回交流学习社区一些用户的基本信息</p><p><br></p><h4><b>二、在github申请OAuth&nbsp;App</b></h4><p>在设置--&gt;开发者设置--&gt;授权应用里，新建一个应用</p><p><img src=\"https://www.mwcxs.top/static/upload/pics/2018/11/12IMXbUHsaREg3wNlaWsL68Wou.png\" alt=\"\"></p><p>按照要求填写应用的一些东西</p><p>Application Name:应用名称（重要）</p><p>HomePageURL：网站的URL</p><p>ApplicationDescription：网站描述</p><p>Authorization callback URL:回调地址 （重要）</p><p><br></p><h4><b>三、开始填写这些内容</b></h4><p><b>以sau交流学习社区（<a href=\"https://www.mwcxs.top\" target=\"_blank\">https://www.mwcxs.top</a>）的授权登陆作为例子，使用的是基于thinkjs开发的nodejs全栈应用。</b></p><p>1、访问用户登录的验证接口</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\">https:<span class=\"hljs-comment\">//github.com/login/oauth/authorize?client_id=xxxxxxxxxxxxxxxxxx&scope=user,public_repo</span></code></pre><p><img src=\"/static/upload/pics/2018/11/12JsX3Yp70a77xqiq165YxIJxq.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p><br></p><p>2、访问上面接口后，github会让跳转到你预定的url（就是授权的回调地址（Authorization callback URL））</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\">http:<span class=\"hljs-comment\">//localhost:8080/callback?code=****************</span></code></pre><p><br></p><p>3、开发者可以通过code,client_id以及client_secret这三个参数获取用户的access_token即用户身份标识，请求如下</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\">https:<span class=\"hljs-comment\">//github.com/login/oauth/access_token?client_id=xxxxxxxxxxxxxxxxxxx&amp;client_secret=xxxxxxxxxxxxxxxxx&amp;code=xxxxxxxxxxxxxxxxxxx</span></code></pre><p>&nbsp;这样就会返回access_token</p><p><br></p><p>4、这样我们就可以用这个access_token来获取用户的信息</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\">https:<span class=\"hljs-comment\">//api.github.com/user?access_token=xxxxxxxxxxxxxxxxx xxxxxxxx</span></code></pre><p><br></p><h4><b>四、总结</b></h4><p><img src=\"/static/upload/pics/2018/11/12jSgPqNUqhHwdeSZR73UOCI47.png\" alt=\"\" style=\"max-width:100%;\" class=\"\"><br></p><p>回调地址就是说，<b>当用户点击授权后，需要调用的接口。</b></p><p>注：thinkjs默认使用model/contoller/action方法的路由定义方式</p><p><img src=\"/static/upload/pics/2018/11/12wSw8sEIh43xYmg3ARyBhE5QM.png\" alt=\"\" style=\"max-width:100%;\" class=\"\"><b><br></b></p><p><br></p><p><br></p>','/static/upload/pics/2018/11/12G9mkIwzccUuObpe90nxM-Bmu.jpg','saucxs','2018-11-12 20:17:05',167,1,0,0,3,'sau交流学习社区,交流学习社区,OAuth 2.0原理,用户登陆',1,1,'',1,0,1,0,0,0),(445,'TensorFlow 3 岁了','让我们一起庆祝一件非常开心的事情，TensorFlow 3 岁了！ \n\n自 2015 年首次发布以来，已经走过了漫长的道路。如果没有所有人一直以来的努力，就不会有现在的 TensorFlow 框架。 在我们努力研究 TensorFlow 2.0 的同时，我们来看一下以往添加的所有功能，让 TensorFlow 更易于使用。','<p>让我们一起庆祝一件非常开心的事情，TensorFlow 3 岁了！&nbsp;</p><p>自 2015 年首次发布以来，已经走过了漫长的道路。如果没有所有人一直以来的努力，就不会有现在的 TensorFlow 框架。 在我们努力研究 TensorFlow 2.0 的同时，我们来看一下以往添加的所有功能，让 TensorFlow 更易于使用。</p><p><br></p><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/NkE3uMFiafXF3T2Q7S2q5ibfGnk1oiaZ7T5UicEgkjNIOGxVy3ylicI1N9gF3NOCRB0wAdUZhFNKYtDNXZDiaututfcA/640?wx_fmt=png&tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1\"></p><p><br></p>','','saucxs','2018-11-15 14:10:28',18,0,0,0,37,'前端资讯',1,1,'',2,0,0,0,0,0),(446,'Vue中正确如何使用jQuery的方法','Vue中正确如何使用jQuery的方法，vue中使用jq经常会出现编译报错：$ is undefined or no-undef \'$\' is not defined，使用vue-cli搭建好了开发的脚手架','<p>vue中使用jq经常会出现编译报错：$ is undefined or no-undef \'$\' is not defined</p><p>使用vue-cli搭建好了开发的脚手架</p><h4>1.NPM 安装 jQuery，项目根目录下运行以下代码</h4><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\">npm install jquery --save</code></pre><p>这样在package的dependencies多了一个最新的jq</p><p><br></p><h4>2、在webpack.base.conf.js中加入webpack</h4><p><img src=\"/static/upload/pics/2018/11/154sCGMZU_7JdJMGB0PWMVtVNa.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p><br></p><h4>3、在webpack.base.conf.js中加入plugins</h4><p><img src=\"/static/upload/pics/2018/11/15mcFQq03sFwDMDxVaTEZi-792.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p><br></p><h4>4、页面的引用</h4><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\">  <span class=\"hljs-keyword\">import</span> $ <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'jquery\'</span></code></pre><p><br></p><h4>5、注意事项</h4><p>去掉eslint检查机制，</p><p>或者在根目录下的eslintrc.js的jquery为true</p><p><img src=\"/static/upload/pics/2018/11/15Jo1UvNzSYUBbqPYXlBXX_43K.png\" alt=\"\" style=\"max-width:100%;\"><br></p><p><br></p>','/static/upload/pics/2018/11/15FkjfVxV2g36y_4382leQRPAI.jpg','saucxs','2018-11-15 14:09:35',106,1,1,0,1,'vue,jquery',1,1,'',1,0,0,0,0,0),(447,'18-11-16今日科技新闻','今日资讯头条 | 谷歌AI中国总裁李佳离职，追随李飞飞加入斯坦福AI医疗项目，业界 | 微软收购软件开发商Xoxco 已是今年第四家AI相关公司，新闻 | 德国宣布向AI领域投资30亿欧元 缩小同美国亚洲差距，新闻 | 工信部全面启动人工智能揭榜，17大领域遴选中国顶级AI单位','<p>1.【今日资讯头条&nbsp;|&nbsp;谷歌AI中国总裁李佳离职，追随李飞飞加入斯坦福AI医疗项目】</p><p>来源：网易智能</p><p>今天下午，有报道称谷歌云AI研发主管、谷歌AI中国中心总裁李佳已从谷歌离职，对此，李佳证实称，确实已经从谷歌离职，目前在斯坦福医学院全职参与智能医院项目，未来会投入AI与医疗的项目，希望以后能做出真正对世界有积极影响的事情。</p><p>链接：<a href=\"http://tech.163.com/18/1115/17/E0M0RI9E00098IEO.html\" target=\"_blank\">http://tech.163.com/18/1115/17/E0M0RI9E00098IEO.html</a></p><p><br></p><p>2.【业界&nbsp;|&nbsp;微软收购软件开发商Xoxco&nbsp;已是今年第四家AI相关公司】</p><p>来源：猎云网</p><p>今年微软非常关注人工智能，在收购和自行研发之间，它更倾向于收购。近日，这家公司宣布了收购奥斯汀软件开发商Xoxco的意向。“在研发聊天人工智能机器人方面，这家软件设计工作室的能力颇有声望。”今年五月，微软还收购了Semantic&nbsp;Machines，它能让用户与聊天机器人的对话更加自然。</p><p>链接：<a href=\"https://new.qq.com/cmsn/20181115/20181115011499.html\" target=\"_blank\">https://new.qq.com/cmsn/20181115/20181115011499.html</a></p><p><br></p><p>3.【新闻&nbsp;|&nbsp;德国宣布向AI领域投资30亿欧元&nbsp;缩小同美国亚洲差距】</p><p>来源：腾讯科技</p><p>据国外媒体报道称，德国政府日前宣布将向人工智能研发领域投资30亿欧元（约合34亿美元），力争缩小德国同美国、亚洲在软件、创新方面的差距。需要指出的是，30亿欧元只是德国计划在2025年之前的AI投资预算。在2025年之后，该政府可能会继续加大投入。</p><p>链接：<a href=\"https://new.qq.com/cmsn/20181115/20181115010459.html\" target=\"_blank\">https://new.qq.com/cmsn/20181115/20181115010459.html</a></p><p><br></p><p>4.【新闻&nbsp;|&nbsp;工信部全面启动人工智能揭榜，17大领域遴选中国顶级AI单位】</p><p>来源：工信部官网</p><p>11月14日，工信部启动了人工智能产业创新重点任务揭榜工作，计划在17个方向及细分领域择优遴选不超过3家单位，树立人工智能领域标杆。在智能产品方面，选择智能网联汽车、智能服务机器人、智能无人机、医疗影像辅助诊断系统、视频图像身份识别系统等产品作为攻关方向。</p><p>链接：<a href=\"https://dwz.cn/RMGc2hyT\" target=\"_blank\">https://dwz.cn/RMGc2hyT</a></p><p><br></p>','','saucxs','2018-11-16 09:14:58',105,0,1,0,37,'谷歌AI中国总裁李佳离职,微软收购软件开发商Xoxco,德国宣布向AI领域投资30亿,工信部全面启动人工智能揭榜,17大领域遴选中国顶级AI单位',1,1,'网络',2,0,0,0,0,0),(448,'18-11-17今日科技新闻','英伟达Q3业绩不及预期 盘后股价暴跌一度达18%，谷歌TPU不是对手，英特尔要用AI一统芯片江湖，清华大学超算团队摘得 SC 2018 总冠军，包揽三大国际大学生超算竞赛总冠军，后李飞飞李佳时代，谷歌云绝地反击AWS有机会吗？','<p>1.【今日资讯头条&nbsp;|&nbsp;英伟达Q3业绩不及预期&nbsp;盘后股价暴跌一度达18%】</p><p>来源：网易智能</p><p>据国外媒体报道，芯片制造商英伟达公布了2019财年第三财季财报。财报显示，该公司第三财季的业绩及对第四财季的展望均不及分析师预期。受这一消息影响，在周四盘后交易中，其股价跌幅一度高达18%。黄仁勋在声明中承认，英伟达的近期业绩反映出加密货币繁荣后的渠道库存过剩。</p><p>链接：链接：<a href=\"http://tech.163.com/18/1116/07/E0NFDSKL00097U7T.html\" target=\"_blank\">http://tech.163.com/18/1116/07/E0NFDSKL00097U7T.html</a></p><p><br></p><p>2.【业界&nbsp;|&nbsp;谷歌TPU不是对手，英特尔要用AI一统芯片江湖】</p><p>来源：新智元</p><p>近日，英特尔全球副总裁兼人工智能产品事业部总经理&nbsp;Naveen&nbsp;Rao接受采访表示，AI&nbsp;已成为英特尔“绝不能输的战场”。Naveen认为谷歌、微软等巨头自己造芯的做法不会持久。英伟达在AI领域的生态很强大，但英特尔CPU在基础设施里有更雄厚的基础。</p><p>理解：理解：<a href=\"https://dwz.cn/F3GRczg1\" target=\"_blank\">https://dwz.cn/F3GRczg1</a></p><p><br></p><p>3.【新闻&nbsp;|&nbsp;清华大学超算团队摘得&nbsp;SC&nbsp;2018&nbsp;总冠军，包揽三大国际大学生超算竞赛总冠军】</p><p>来源：雷锋网</p><p>美国当地时间&nbsp;11&nbsp;月&nbsp;15&nbsp;日，2018&nbsp;国际大学生超级计算机竞赛（SC18）在达拉斯落下帷幕，清华大学计算机系超算团队摘得总冠军，总分&nbsp;88.398&nbsp;分（满分&nbsp;100&nbsp;），高出第二名新加坡南洋理工大学&nbsp;11.518&nbsp;分。这也就意味着，清华大学超算团队成功包揽&nbsp;2018&nbsp;年三大国际大学生超算竞赛&nbsp;ASC、ISC&nbsp;和&nbsp;SC&nbsp;的总冠军。</p><p>链接：链接：<a href=\"https://www.leiphone.com/news/201811/vzr6JHrXGoE58ut9.html\" target=\"_blank\">https://www.leiphone.com/news/201811/vzr6JHrXGoE58ut9.html</a></p><p><br></p><p>4.【新闻&nbsp;|&nbsp;后李飞飞李佳时代，谷歌云绝地反击AWS有机会吗？】</p><p>来源：新智元</p><p>随着李佳的离职，Google&nbsp;Cloud正式进入后“佳飞猫”时代。现在，谷歌云依然面临两个超级强大的对手：亚马逊AWS和微软Azure，放弃国防部100亿美元大单之后，谷歌云把战略瞄向组织机构和开发者，但这条路并不好走。</p><p>链接：链接：<a href=\"https://dwz.cn/GNKGoGLf\" target=\"_blank\">https://dwz.cn/GNKGoGLf</a></p><p><br></p>','','saucxs','2018-11-17 14:36:49',176,0,1,0,37,'英伟达Q3业绩不及预期 盘后股价暴跌一度达18%,谷歌TPU不是对手,英特尔要用AI一统芯片江湖,清华大学超算团队摘得 SC 2018 总冠军，包揽三大国际大学生超算竞赛总冠军，后李飞飞李佳时代，谷歌云绝地反击AWS有机会吗？',1,1,'网络',2,0,0,0,0,0),(449,'AI人才抢夺“生猛”:应届博士年薪涨到80万元, 全球权威人脸识别竞赛成绩公布，中国人工智能算法继续领跑世界,美国最严技术出口管制上膛！AI算法芯片机器人量子计算面临封锁','AI人才抢夺“生猛”:应届博士年薪涨到80万元, 全球权威人脸识别竞赛成绩公布，中国人工智能算法继续领跑世界,美国最严技术出口管制上膛！AI算法芯片机器人量子计算面临封锁','<p>1.【今日资讯头条&nbsp;|&nbsp;AI人才抢夺“生猛”：&nbsp;应届博士年薪涨到80万元】</p><p>来源：第一财经</p><p>一年前，针对AI领域的应届毕业生，硕士生约莫能拿到30万元的年薪，博士生则高达50万元。今年，薪水行情仍在噌噌上涨。有企业给应届生的薪水拔高了10%~20%；也有企业上涨幅度更大，尤其是给博士生的薪水从去年的50万元年薪倏地蹿到80万元；也有准备布局AI领域的新锐企业，虽然还没考虑好具体的价位，但是打算花高价从互联网巨头处抢夺人才。</p><p>链接：<a href=\"http://tech.163.com/18/1119/07/E0V623H700097U7R.html\" target=\"_blank\">http://tech.163.com/18/1119/07/E0V623H700097U7R.html</a></p><p><br></p><p>2.【业界&nbsp;|&nbsp;全球权威人脸识别竞赛成绩公布，中国人工智能算法继续领跑世界】</p><p>来源：雷锋网</p><p>美国国家标准与技术研究院近日公布了有工业界黄金标准之称的全球人脸识别算法测试结果。在这份官方公布的报告中，中国人工智能公司实力展现，依图科技、商汤科技、旷视科技囊括了前十中的五席，加上排名第五的中国科学院深圳先进技术研究院，中国团队已经超过半数，并稳稳“霸屏”前五，领跑全球人脸识别算法。</p><p>链接：<a href=\"https://www.leiphone.com/news/201811/anDqig3bVCuZNHeg.html\" target=\"_blank\">https://www.leiphone.com/news/201811/anDqig3bVCuZNHeg.html</a></p><p><br></p><p>3.【新闻&nbsp;|&nbsp;美国最严技术出口管制上膛！AI算法芯片机器人量子计算面临封锁】</p><p>来源：量子位</p><p>近日，美国商务部工业安全署出台了一份针对关键技术和相关产品的出口管制框架，同时将开始对这些新兴技术的出口管制面向公众征询意见，该框架主要甄别涉及国家安全和高技术的出口。AI、芯片、机器人、量子计算、脑机接口，生物技术等前沿科技，无一不在此列。</p><p>链接：<a href=\"https://new.qq.com/omn/20181119/20181119A0EBUI.html\" target=\"_blank\">https://new.qq.com/omn/20181119/20181119A0EBUI.html</a></p><p><br></p><p>4.【新闻&nbsp;|&nbsp;Julia语言创始人上榜福布斯30&nbsp;Under&nbsp;30榜单】</p><p>来源：新智元</p><p>近日，福布斯评选出了2019年&nbsp;“30岁以下的30个精英”，其中在企业技术类，这30人都是用机器智能和AI技术改变企业业务，获奖者大部分是初创公司创始人，其中包括Julia编程语言的创始人Keno&nbsp;Fische，最小的获奖者只有16岁&nbsp;。</p><p>链接：<a href=\"https://new.qq.com/omn/20181119/20181119A0T6CW.html\" target=\"_blank\">https://new.qq.com/omn/20181119/20181119A0T6CW.html</a></p><p><br></p>','','saucxs','2018-11-20 09:11:27',21,0,1,0,37,'AI人才抢夺“生猛”:应届博士年薪涨到80万元, 全球权威人脸识别竞赛成绩公布，中国人工智能算法继续领跑世界,美国最严技术出口管制上膛！AI算法芯片机器人量子计算面临封锁',1,1,'网络',2,0,0,0,0,0),(450,'英伟达股价50天遭腰斩！芯片第一股跌落王座，李飞飞卸任斯坦福AI实验室负责人 NLP大牛Manning接任，2018星际AI大赛冠军诞生！一个个机器学习算法，都输给不会学习的韩国bot，滴滴出行在多伦多开设实验室 研究AI和智能驾驶','英伟达股价50天遭腰斩！芯片第一股跌落王座，李飞飞卸任斯坦福AI实验室负责人 NLP大牛Manning接任，2018星际AI大赛冠军诞生！一个个机器学习算法，都输给不会学习的韩国bot，滴滴出行在多伦多开设实验室 研究AI和智能驾驶','<p>1.【今日资讯头条&nbsp;|&nbsp;英伟达股价50天遭腰斩！芯片第一股跌落王座】</p><p>来源：新智元</p><p>昨天，美国商务部工业安全局针对关键新兴和基础技术和相关产品的出口管制框架的提案意见征求正式开始，当天，英伟达股价暴跌12%，这是本月16日公司公布新一季财报当天暴跌19%之后的又一次大跌。自今年10月1日达到292.76美元的高点以来，英伟达目前的股价下跌到最低的144.70美元，股价回撤50%，跌去一半，相当于一个AMD市值。</p><p>链接：<a href=\"https://dwz.cn/autygGWZ\" target=\"_blank\">https://dwz.cn/autygGWZ</a></p><p><br></p><p>2.【业界&nbsp;|&nbsp;李飞飞卸任斯坦福AI实验室负责人&nbsp;NLP大牛Manning接任】</p><p>来源：网易智能</p><p>根据斯坦福人工智能实验室官方Twitter消息，深度学习自然语言处理领军人、斯坦福教授Chris&nbsp;Manning将接替李飞飞，成为该实验室最新一任负责人。李飞飞教授将继续担任斯坦福视觉与学习实验室（SVL）负责人，以及新成立的斯坦福以人为本人工智能研究院共同院长。</p><p>链接：<a href=\"http://tech.163.com/18/1120/14/E12H2JGM00098IEO.html\" target=\"_blank\">http://tech.163.com/18/1120/14/E12H2JGM00098IEO.html</a></p><p><br></p><p>3.【新闻&nbsp;|&nbsp;2018星际AI大赛冠军诞生！一个个机器学习算法，都输给不会学习的韩国bot】</p><p>来源：量子位</p><p>今天，星际争霸AI大赛新王诞生！二十多个掌握了机器学习技能的AI，全都在一个不会学习、只会基于规则机械行动的bot面前，俯首称臣。包括Facebook&nbsp;的AI团队，他们获得了亚军，但战绩是83负17胜，劣势明显。新霸主与全部对手的2600场厮杀中，胜率达到了95.91%。而往届比赛中，冠军胜率最高的一次，也不过89%。</p><p>链接：<a href=\"https://dwz.cn/HN7yaeXR\" target=\"_blank\">https://dwz.cn/HN7yaeXR</a></p><p><br></p><p>4.【新闻&nbsp;|&nbsp;滴滴出行在多伦多开设实验室&nbsp;研究AI和智能驾驶】</p><p>来源：TechWeb</p><p>据国外媒体报道，滴滴已在多伦多开设了一个主要研究实验室DiDi&nbsp;Labs。这个实验室将研究智能驾驶和人工智能技术，由滴滴出行高级副总裁俞军领导。滴滴还宣布，与多伦多大学达成了战略合作伙伴关系。双方将在汽车互联互通、人工智能、智能交通等领域开展合作项目。</p><p>链接：<a href=\"https://baijiahao.baidu.com/s?id=1617620562575891044&wfr=spider&amp;for=pc\" target=\"_blank\">https://baijiahao.baidu.com/s?id=1617620562575891044&amp;wfr=spider&amp;for=pc</a></p><p><br></p>','','saucxs','2018-11-21 00:08:04',21,0,1,0,37,'英伟达股价50天遭腰斩！芯片第一股跌落王座，李飞飞卸任斯坦福AI实验室负责人 NLP大牛Manning接任，2018星际AI大赛冠军诞生！一个个机器学习算法，都输给不会学习的韩国bot，滴滴出行在多伦多开设实验室 研究AI和智能驾驶',1,1,'网络',2,0,0,0,0,0),(451,'中国幼儿园AI教材曝光！谷歌专家指导，娃娃也要学Python,英伟达在中国展示T4云GPU 抢夺AI云计算市场,吴恩达团队：用X光片识别14种疾病，AI准确度部分超人类,以色列计算机视觉专家加盟阿里达摩院，推进新零售与城市大脑','中国幼儿园AI教材曝光！谷歌专家指导，娃娃也要学Python,英伟达在中国展示T4云GPU 抢夺AI云计算市场,吴恩达团队：用X光片识别14种疾病，AI准确度部分超人类,以色列计算机视觉专家加盟阿里达摩院，推进新零售与城市大脑 AI','<p>1.【今日资讯头条&nbsp;|&nbsp;中国幼儿园AI教材曝光！谷歌专家指导，娃娃也要学Python】</p><p>来源：新智元&nbsp;</p><p>最近，为幼儿园学生设计的AI教材曝光，网友惊呼上幼儿园学AI太早。这套涵盖从幼儿园到高中的AI教材由中国科学院自动化所、谷歌及其他相关高校的AI专家指导，配套的云平台还能学习Scratch和Python集成开发环境（IDE）。</p><p>链接：<a href=\"https://dwz.cn/bmogRy9N\" target=\"_blank\">https://dwz.cn/bmogRy9N</a></p><p><br></p><p>2.【业界&nbsp;|&nbsp;英伟达在中国展示T4云GPU&nbsp;抢夺AI云计算市场】</p><p>来源：网易智能</p><p>11月20-22日，英伟达GTC（GPU技术大会）在苏州举行。会上，英伟达宣布，NVIDIA&nbsp;Turing&nbsp;T4云GPU在中国落地，数家科技巨头开始使用T4推出新的产品和服务。T4基于全新&nbsp;NVIDIA&nbsp;TuringTM&nbsp;架构，T4&nbsp;GPU外形非常小巧，功耗只有70W，可灵活适应于标准服务器或任何开放计算项目的超大规模服务器设计。</p><p>链接：<a href=\"http://tech.163.com/18/1121/14/E154L29C00098IEO.html\" target=\"_blank\">http://tech.163.com/18/1121/14/E154L29C00098IEO.html</a></p><p><br></p><p>3.【新闻&nbsp;|&nbsp;吴恩达团队：用X光片识别14种疾病，AI准确度部分超人类】</p><p>来源：量子位</p><p>最近，吴恩达的斯坦福团队发布了一个X光诊断算法，基于深度神经网络。与曾经的肺炎检测专门算法不同，这次的CheXNeXt模型，可以诊断14种疾病，包括肺炎、胸腔积液、肺肿块等等。在其中10种疾病的诊断上，AI都与人类放射科医生的表现相当，还有一种超过了人类。并且，AI的诊断速度是人类的160倍。</p><p>链接：<a href=\"https://new.qq.com/omn/20181121/20181121A13YT9.html\" target=\"_blank\">https://new.qq.com/omn/20181121/20181121A13YT9.html</a></p><p><br></p><p>4.【新闻&nbsp;|&nbsp;以色列计算机视觉专家加盟阿里达摩院，推进新零售与城市大脑】</p><p>来源：澎湃新闻</p><p>近日，记者获悉，以色列理工学院计算机视觉科学家Lihi&nbsp;Zelnik-Manor教授已入职达摩院以色列机器视觉实验室作为实验室负责人。实验室正在研发的计算机视觉技术，能有效提升计算机对外部物理世界的理解能力。在新零售场景，智能货架与AI收银机能更精确地识别消费者的购买动作，从而实现自动结账、智能防损。</p><p>链接：<a href=\"https://new.qq.com/omn/20181121/20181121A1JULR.html\" target=\"_blank\">https://new.qq.com/omn/20181121/20181121A1JULR.html</a></p><p><br></p>','/static/upload/pics/2018/11/22R--9Y9GTCWGE2hBijAmNSzjJ.png','saucxs','2018-11-22 17:46:17',25,0,1,1,37,'中国幼儿园AI教材曝光！谷歌专家指导，娃娃也要学Python,英伟达在中国展示T4云GPU 抢夺AI云计算市场,吴恩达团队：用X光片识别14种疾病，AI准确度部分超人类,以色列计算机视觉专家加盟阿里达摩院，推进新零售与城市大脑',1,1,'网络',2,0,0,0,0,0),(452,'watermark-dom是一个给B/S网站系统加一个很浅的水印插件，确保系统的保密性，安全性，降低数据泄密风险','watermark.js是一个给B/S网站系统加一个很浅的水印插件，确保系统的保密性，安全性，降低数据泄密风险。水印插件内容，包含1、水印插件-使用，2、水印插件-testTool（测试工具），3、API介绍，4、支持浏览器','<h4>watermark插件的github地址：<a href=\"https://github.com/saucxs/watermark\" target=\"_blank\">https://github.com/saucxs/watermark</a></h4><p>有详细的使用步骤，可以参考，不会用请留言，感觉可以，请给个星星。</p><p>博客同步：<a href=\"https://www.chengxinsong.cn/17-09-watermark.html\" target=\"_blank\">https://www.chengxinsong.cn/17-09-watermark.html</a></p><p>社区同步：<a href=\"https://www.mwcxs.top/page/452.html\" target=\"_blank\">https://www.mwcxs.top/page/452.html</a></p><p>&nbsp;</p><h3><b>一、简单</b></h3><h4>阿里巴巴内网的不可见水印用的是什么算法？</h4><p>据说月饼事件截图的那位员工也被开除了？&nbsp;</p><p>下面的只是简单的加一个很浅的水印，实现起来很容易。</p><p>浏览器终端下粘贴下面的代码，</p><p>&nbsp;<img src=\"https://www.chengxinsong.cn/assets/watermark/watermark01.png\" alt=\"æµè§å¨ç²è´´ä»£ç&nbsp;\" class=\"\"></p><p>&nbsp; &nbsp; &nbsp; 它的作用是在当前页面上增加了一个透明度只有0.005的很多的水印。水印内容“测试水印，1021002301，测试水印，DAHJDBJJdjsfsc”&nbsp;, 使用QQ截图，这样一点也看不出来，有水印。&nbsp;<img src=\"https://www.chengxinsong.cn/assets/watermark/watermark02.png\" alt=\"æµè¯ä¸ä¸ï¼è®©æ°´å°æ¾ç°\"></p><p>现在把图片放到PS里面，建一个图层在上面。全部填充为黑色，混合模式选择正片叠底这一类的（也就是让亮的更亮，暗的更暗），一个个试。当我试到“实色混合”和“颜色加深”的时候，水印就显示出来了。</p><p><img src=\"https://www.chengxinsong.cn/assets/watermark/watermark03.png\" alt=\"æ°´å°æ¾ç°\"></p><p>哇，吓到我了，原来可以这么玩。</p><p>&nbsp;js代码：</p><pre style=\"max-width:100%;overflow-x:auto;\">(function(watermark){  <code class=\"javascript hljs\" codemark=\"1\"><span class=\"hljs-built_in\">   window</span>.watermarkdivs = [];\n    <span class=\"hljs-comment\">// 加载水印</span>\n    <span class=\"hljs-keyword\">var</span> loadMark = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">settings</span>) </span>{\n            <span class=\"hljs-keyword\">var</span> defaultSettings={\n                watermark_txt:<span class=\"hljs-string\">\"text\"</span>,\n                watermark_x:<span class=\"hljs-number\">20</span>,<span class=\"hljs-comment\">//水印起始位置x轴坐标</span>\n                watermark_y:<span class=\"hljs-number\">20</span>,<span class=\"hljs-comment\">//水印起始位置Y轴坐标</span>\n                watermark_rows:<span class=\"hljs-number\">0</span>,<span class=\"hljs-comment\">//水印行数</span>\n                watermark_cols:<span class=\"hljs-number\">0</span>,<span class=\"hljs-comment\">//水印列数</span>\n                watermark_x_space:<span class=\"hljs-number\">50</span>,<span class=\"hljs-comment\">//水印x轴间隔</span>\n                watermark_y_space:<span class=\"hljs-number\">50</span>,<span class=\"hljs-comment\">//水印y轴间隔</span>\n                watermark_color:<span class=\"hljs-string\">\'#000000\'</span>,<span class=\"hljs-comment\">//水印字体颜色</span>\n                watermark_alpha:<span class=\"hljs-number\">0.005</span>,<span class=\"hljs-comment\">//水印透明度，小于等于0.003,不可恢复到水印。</span>\n                watermark_fontsize:<span class=\"hljs-string\">\'18px\'</span>,<span class=\"hljs-comment\">//水印字体</span>\n                watermark_font:<span class=\"hljs-string\">\'微软雅黑\'</span>,<span class=\"hljs-comment\">//水印字体</span>\n                watermark_width:<span class=\"hljs-number\">150</span>,<span class=\"hljs-comment\">//水印宽度</span>\n                watermark_height:<span class=\"hljs-number\">100</span>,<span class=\"hljs-comment\">//水印长度</span>\n                watermark_angle:<span class=\"hljs-number\">15</span>,<span class=\"hljs-comment\">//水印倾斜度数</span>\n                <span class=\"hljs-comment\">// watermark_bg_color:\'yellow\',</span>\n                watermark_bg_alpha:<span class=\"hljs-number\">0.5</span> <span class=\"hljs-comment\">//加透明度导致隐形水印无法读取</span>\n                \n            };\n            <span class=\"hljs-comment\">//采用配置项替换默认值，作用类似jquery.extend</span>\n            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">arguments</span>.length===<span class=\"hljs-number\">1</span>&amp;&amp;<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">0</span>] ===<span class=\"hljs-string\">\"object\"</span> )\n            {\n                <span class=\"hljs-keyword\">var</span> src=<span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">0</span>]||{};\n                <span class=\"hljs-keyword\">for</span>(key <span class=\"hljs-keyword\">in</span> src)\n                {\n                    <span class=\"hljs-keyword\">if</span>(src[key]&amp;&amp;defaultSettings[key]&amp;&amp;src[key]===defaultSettings[key])\n                        <span class=\"hljs-keyword\">continue</span>;\n                    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(src[key])\n                        defaultSettings[key]=src[key];\n                }\n            }\n\n            <span class=\"hljs-keyword\">var</span> oTemp = <span class=\"hljs-built_in\">document</span>.createDocumentFragment();\n\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">window</span>.watermarkdivs &amp;&amp; <span class=\"hljs-built_in\">window</span>.watermarkdivs.length &gt; <span class=\"hljs-number\">0</span>) {\n                <span class=\"hljs-built_in\">document</span>.body.removeChild(<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"otdivid\"</span>));\n                <span class=\"hljs-built_in\">window</span>.watermarkdivs = [];\n            }\n\n            <span class=\"hljs-comment\">//获取页面最大宽度</span>\n            <span class=\"hljs-keyword\">var</span> page_width = <span class=\"hljs-built_in\">Math</span>.max(<span class=\"hljs-built_in\">document</span>.body.scrollWidth,<span class=\"hljs-built_in\">document</span>.body.clientWidth);\n            <span class=\"hljs-comment\">//获取页面最大长度</span>\n            <span class=\"hljs-keyword\">var</span> page_height = <span class=\"hljs-built_in\">Math</span>.max(<span class=\"hljs-built_in\">document</span>.body.scrollHeight,<span class=\"hljs-built_in\">document</span>.body.clientHeight);\n\n            <span class=\"hljs-keyword\">var</span> otdiv = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"otdivid\"</span>);\n\n            <span class=\"hljs-comment\">//如果将水印列数设置为0，或水印列数设置过大，超过页面最大宽度，则重新计算水印列数和水印x轴间隔</span>\n            <span class=\"hljs-keyword\">if</span> (defaultSettings.watermark_cols == <span class=\"hljs-number\">0</span> || (<span class=\"hljs-built_in\">parseInt</span>(defaultSettings.watermark_x + defaultSettings.watermark_width *defaultSettings.watermark_cols + defaultSettings.watermark_x_space * (defaultSettings.watermark_cols - <span class=\"hljs-number\">1</span>)) &gt; page_width)) {\n                defaultSettings.watermark_cols = <span class=\"hljs-built_in\">parseInt</span>((page_width - defaultSettings.watermark_x + defaultSettings.watermark_x_space) / (defaultSettings.watermark_width + defaultSettings.watermark_x_space));\n                defaultSettings.watermark_x_space = <span class=\"hljs-built_in\">parseInt</span>((page_width - defaultSettings.watermark_x - defaultSettings.watermark_width * defaultSettings.watermark_cols) / (defaultSettings.watermark_cols - <span class=\"hljs-number\">1</span>));\n            }\n            <span class=\"hljs-comment\">//如果将水印行数设置为0，或水印行数设置过大，超过页面最大长度，则重新计算水印行数和水印y轴间隔</span>\n            <span class=\"hljs-keyword\">if</span> (defaultSettings.watermark_rows == <span class=\"hljs-number\">0</span> || (<span class=\"hljs-built_in\">parseInt</span>(defaultSettings.watermark_y + defaultSettings.watermark_height * defaultSettings.watermark_rows + defaultSettings.watermark_y_space * (defaultSettings.watermark_rows - <span class=\"hljs-number\">1</span>)) &gt; page_height)) {\n                defaultSettings.watermark_rows = <span class=\"hljs-built_in\">parseInt</span>((defaultSettings.watermark_y_space + page_height - defaultSettings.watermark_y) / (defaultSettings.watermark_height + defaultSettings.watermark_y_space));\n                defaultSettings.watermark_y_space = <span class=\"hljs-built_in\">parseInt</span>(((page_height - defaultSettings.watermark_y) - defaultSettings.watermark_height * defaultSettings.watermark_rows) / (defaultSettings.watermark_rows - <span class=\"hljs-number\">1</span>));\n            }\n            \n            <span class=\"hljs-keyword\">var</span> x;\n            <span class=\"hljs-keyword\">var</span> y;\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; defaultSettings.watermark_rows; i++) {\n                y = defaultSettings.watermark_y + (defaultSettings.watermark_y_space + defaultSettings.watermark_height) * i;\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = <span class=\"hljs-number\">0</span>; j &lt; defaultSettings.watermark_cols; j++) {\n                    x = defaultSettings.watermark_x + (defaultSettings.watermark_width + defaultSettings.watermark_x_space) * j;\n\n                    <span class=\"hljs-keyword\">var</span> mask_div = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">\'div\'</span>);\n                    mask_div.id = <span class=\"hljs-string\">\'mask_div\'</span> + i + j;\n                    mask_div.appendChild(<span class=\"hljs-built_in\">document</span>.createTextNode(defaultSettings.watermark_txt));\n                    <span class=\"hljs-comment\">//设置水印div倾斜显示</span>\n                    mask_div.style.webkitTransform = <span class=\"hljs-string\">\"rotate(-\"</span> + defaultSettings.watermark_angle + <span class=\"hljs-string\">\"deg)\"</span>;\n                    mask_div.style.MozTransform = <span class=\"hljs-string\">\"rotate(-\"</span> + defaultSettings.watermark_angle + <span class=\"hljs-string\">\"deg)\"</span>;\n                    mask_div.style.msTransform = <span class=\"hljs-string\">\"rotate(-\"</span> + defaultSettings.watermark_angle + <span class=\"hljs-string\">\"deg)\"</span>;\n                    mask_div.style.OTransform = <span class=\"hljs-string\">\"rotate(-\"</span> + defaultSettings.watermark_angle + <span class=\"hljs-string\">\"deg)\"</span>;\n                    mask_div.style.transform = <span class=\"hljs-string\">\"rotate(-\"</span> + defaultSettings.watermark_angle + <span class=\"hljs-string\">\"deg)\"</span>;\n                    mask_div.style.visibility = <span class=\"hljs-string\">\"\"</span>;\n                    mask_div.style.position = <span class=\"hljs-string\">\"absolute\"</span>;\n                    <span class=\"hljs-comment\">//选不中</span>\n                    mask_div.style.left = x + <span class=\"hljs-string\">\'px\'</span>;\n                    mask_div.style.top = y + <span class=\"hljs-string\">\'px\'</span>;\n                    mask_div.style.overflow = <span class=\"hljs-string\">\"hidden\"</span>;\n                    mask_div.style.zIndex = <span class=\"hljs-string\">\"9\"</span>;\n                    mask_div.style.pointerEvents = <span class=\"hljs-string\">\"none\"</span>;\n                    <span class=\"hljs-comment\">//mask_div.style.border=\"solid #eee 1px\";</span>\n                    mask_div.style.opacity = defaultSettings.watermark_alpha;\n                    mask_div.style.fontSize = defaultSettings.watermark_fontsize;\n                    mask_div.style.fontFamily = defaultSettings.watermark_font;\n                    mask_div.style.color = defaultSettings.watermark_color;\n                    mask_div.style.textAlign = <span class=\"hljs-string\">\"center\"</span>;\n                    mask_div.style.width = defaultSettings.watermark_width + <span class=\"hljs-string\">\'px\'</span>;\n                    mask_div.style.height = defaultSettings.watermark_height + <span class=\"hljs-string\">\'px\'</span>;\n                    mask_div.style.display = <span class=\"hljs-string\">\"block\"</span>;\n                    mask_div.style.fontWeight = <span class=\"hljs-string\">\"900\"</span>;\n                    oTemp.appendChild(mask_div);\n\n                };\n            };\n            <span class=\"hljs-built_in\">document</span>.body.appendChild(oTemp);\n        };\n    \n    watermark.load = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">settings</span>) </span>{\n        <span class=\"hljs-built_in\">window</span>.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n            loadMark(settings);\n        };\n        <span class=\"hljs-built_in\">window</span>.onresize = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n            loadMark(settings);\n        };\n    };\n    watermark.load({ watermark_txt: <span class=\"hljs-string\">\"测试水印，1021002301，测试水印，SDAHJDBJJdjsfsc\"</span> });\n})(<span class=\"hljs-built_in\">window</span>.watermark = {});</code></pre><p>&nbsp;html代码</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\">&lt;html&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"renderer\" content=\"webkit\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"&gt;\n    &lt;script type=\"text/javascript\" src=\"watermark.js\"&gt;&lt;/script&gt;\n    &lt;!--&lt;script type=\"text/javascript\"&gt;--&gt;\n        &lt;!--watermark.load({ watermark_txt: \"测试水印，1021002301，测试水印，SDAHJDBJJdjsfsc\" });--&gt;\n    &lt;!--&lt;/script&gt;--&gt;\n\n    &lt;body&gt;\n        &lt;div style=\"width:300px;height:300px;background-color: red; opacity:0.98;\" onclick=\"alert(1);\"&gt;test&lt;/div&gt;\n        &lt;div style=\"width:300px;height:300px;background-color: blue;  opacity:0.9;\" onclick=\"alert(2);\"&gt;test&lt;/div&gt;\n        &lt;a href=\"www.test.com\"&gt; baidu&lt;/a&gt;\n    &lt;/body&gt;\n&lt;/html&gt;</code></pre><p>写了插件，这个是测试地址</p><p><a href=\"http://blog.mwcxs.top/static/testTool/index.html\" target=\"_blank\">http://blog.mwcxs.top/static/testTool/index.html</a></p><p>包括，测试，重置，显示，随机，四个部分。</p><p>特性：1、测试对水印参数属性，重置水印属性参数，显示此时的水印属性参数，随机产生水印属性参数；</p><p>2、水印按钮组是position值fixed，可以浮现在页面之上，不占字节。</p><p>3、对系统的各个部分页面进行水印的测试。</p><p>&nbsp;</p><h3><b>二、复杂</b></h3><p>频域制定数字盲水印</p><p>信号是有频率的，一个信号可以看做是无数个不同阶的正弦信号的的叠加。<img src=\"https://www.zhihu.com/equation?tex=F%28%5Comega%29%3D%5Cint_%7B-%5Cinfty+%7D%5E%7B%2B%5Cinfty+%7D++f%28t%29e%5E%7B-i%5Comega+t%7Ddt+\" alt=\"F(\\omega)=\\int_{-\\infty }^{+\\infty }  f(t)e^{-i\\omega t}dt \" class=\"\">上式为傅里叶变换公式，<img src=\"https://www.zhihu.com/equation?tex=f%28t%29\" alt=\"f(t)\">是指时域信号（对于信号我们说时域，因为是与时间有关的，而图像我们往往说空域，与空间有关），<img src=\"https://www.zhihu.com/equation?tex=%5Comega+\" alt=\"\\omega \">是指频率。</p><p>&nbsp;<img src=\"https://www.chengxinsong.cn/assets/watermark/watermark05.png\" alt=\"åéå¶åæ¢å¬å¼\"></p><p>1、编码的目的有二，一是对水印加密，二控制水印能量的分布。以下是叠加数字盲水印的实验。</p><p>（1）原图像。尺寸300*240 ，汉子一枚，</p><p><img src=\"https://www.chengxinsong.cn/assets/watermark/watermark06.png\" alt=\"åéå¶åæ¢å¬å¼\" class=\"\"></p><p>（2）水印照片。</p><p><img src=\"https://images2015.cnblogs.com/blog/900740/201705/900740-20170501113349226-1251068817.png\" alt=\"\"><img src=\"https://www.chengxinsong.cn/assets/watermark/watermark07.png\" alt=\"åéå¶åæ¢å¬å¼\" class=\"\"></p><p>（3）水印编码。编码方式采用随机序列编码，通过编码，水印分布到随机分布到各个频率，并且对水印进行了加密。</p><p><img src=\"https://images2015.cnblogs.com/blog/900740/201705/900740-20170501113505492-1001586568.png\" alt=\"\"><img src=\"https://www.chengxinsong.cn/assets/watermark/watermark08.png\" alt=\"åéå¶åæ¢å¬å¼\"></p><p>（4）原图像频域。经历的是傅里叶变换，下图变换后的频域图像</p><p><img src=\"https://images2015.cnblogs.com/blog/900740/201705/900740-20170501113639554-1526643269.png\" alt=\"\" class=\"\"><img src=\"https://www.chengxinsong.cn/assets/watermark/watermark09.png\" alt=\"åéå¶åæ¢å¬å¼\"></p><p>（5）水印图像频域。经历的是傅里叶变换，下图变换后的频域图像</p><p><img src=\"https://images2015.cnblogs.com/blog/900740/201705/900740-20170501113840554-1841281875.png\" alt=\"\" class=\"\"><img src=\"https://www.chengxinsong.cn/assets/watermark/watermark10.png\" alt=\"åéå¶åæ¢å¬å¼\"></p><p>（6）合并水印和原图。之后，将叠加水印的频谱进行傅里叶逆变换，得到叠加数字水印后的图像，，将图像频域和水印编码进行合并。看不出来已经加了水印吧，哈哈哈</p><p><img src=\"https://www.chengxinsong.cn/assets/watermark/watermark11.png\" alt=\"åéå¶åæ¢å¬å¼\"></p><p>&nbsp; &nbsp; &nbsp;实际上，我们是把水印以噪声的形式添加到原图像中。</p><p><img src=\"https://images2015.cnblogs.com/blog/900740/201705/900740-20170501113948882-979441647.png\" alt=\"\" class=\"\"></p><p>（7）水印图与原图的残差（看不出来残差区别，需要调整对比度才能看得出来）</p><p><img src=\"https://images2015.cnblogs.com/blog/900740/201705/900740-20170501115018586-1334207559.png\" alt=\"\"><img src=\"https://www.chengxinsong.cn/assets/watermark/watermark12.png\" alt=\"åéå¶åæ¢å¬å¼\"></p><p>（8）最终的均方差（MSE）和信噪比（PSNR）</p><p><img src=\"https://images2015.cnblogs.com/blog/900740/201705/900740-20170501115252867-1243372676.png\" alt=\"\"><img src=\"https://www.chengxinsong.cn/assets/watermark/watermark13.png\" alt=\"åéå¶åæ¢å¬å¼\"></p><p>&nbsp;</p><p>&nbsp;（9）下图是原图频谱竖过来的样子，其能量主要集中在低频。</p><p>&nbsp; &nbsp; &nbsp;那么，为什么频谱发生了巨大的变化，而在空域却变化如此小呢？这是因为我们避开了图像的主要频率。</p><p>&nbsp;<img src=\"https://www.chengxinsong.cn/assets/watermark/watermark14.png\" alt=\"åéå¶åæ¢å¬å¼\"></p><p><img src=\"https://images2015.cnblogs.com/blog/900740/201705/900740-20170501120541554-1494876831.png\" alt=\"\"><img src=\"https://www.chengxinsong.cn/assets/watermark/watermark15.png\" alt=\"åéå¶åæ¢å¬å¼\"></p><p>合并之后</p><p><img src=\"https://images2015.cnblogs.com/blog/900740/201705/900740-20170501120644304-1498000934.png\" alt=\"\"><img src=\"https://www.chengxinsong.cn/assets/watermark/watermark16.png\" alt=\"åéå¶åæ¢å¬å¼\"></p><p>（10）水印提取是水印叠加的逆过程，</p><p><img src=\"https://images2015.cnblogs.com/blog/900740/201705/900740-20170501120229492-1252390721.jpg\" alt=\"\"><img src=\"https://www.chengxinsong.cn/assets/watermark/watermark17.jpg\" alt=\"åéå¶åæ¢å¬å¼\"></p><p><br></p><p>(11)提取后，得到水印。</p><p><img src=\"https://images2015.cnblogs.com/blog/900740/201705/900740-20170501120750804-501231424.png\" alt=\"\" class=\"\"><img src=\"https://www.chengxinsong.cn/assets/watermark/watermark18.png\" alt=\"åéå¶åæ¢å¬å¼\"></p><p>matlab代码</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\">clc;clear;close all;\nalpha = <span class=\"hljs-number\">1</span>;\n\n%% read data\nim = double(imread(<span class=\"hljs-string\">\'G:\\2017学习\\Work\\图片水印\\test.jpg\'</span>))/<span class=\"hljs-number\">255</span>;\nmark = double(imread(<span class=\"hljs-string\">\'G:\\2017学习\\Work\\图片水印\\watermark.png\'</span>))/<span class=\"hljs-number\">255</span>;\nfigure, imshow(im),title(<span class=\"hljs-string\">\'original image\'</span>);\nfigure, imshow(mark),title(<span class=\"hljs-string\">\'watermark\'</span>);\n\n%% encode mark\nimsize = size(im);\n%random\nTH=zeros(imsize(<span class=\"hljs-number\">1</span>)*<span class=\"hljs-number\">0.5</span>,imsize(<span class=\"hljs-number\">2</span>),imsize(<span class=\"hljs-number\">3</span>));\nTH1 = TH;\nTH1(<span class=\"hljs-number\">1</span>:size(mark,<span class=\"hljs-number\">1</span>),<span class=\"hljs-number\">1</span>:size(mark,<span class=\"hljs-number\">2</span>),:) = mark;\nM=randperm(<span class=\"hljs-number\">0.5</span>*imsize(<span class=\"hljs-number\">1</span>));\nN=randperm(imsize(<span class=\"hljs-number\">2</span>));\nsave(<span class=\"hljs-string\">\'G:\\2017学习\\Work\\图片水印\\encode.mat\'</span>,<span class=\"hljs-string\">\'M\'</span>,<span class=\"hljs-string\">\'N\'</span>);\n<span class=\"hljs-keyword\">for</span> i=<span class=\"hljs-number\">1</span>:imsize(<span class=\"hljs-number\">1</span>)*<span class=\"hljs-number\">0.5</span>\n    <span class=\"hljs-keyword\">for</span> j=<span class=\"hljs-number\">1</span>:imsize(<span class=\"hljs-number\">2</span>)\n        TH(i,j,:)=TH1(M(i),N(j),:);\n    end\nend\n% symmetric\nmark_ = zeros(imsize(<span class=\"hljs-number\">1</span>),imsize(<span class=\"hljs-number\">2</span>),imsize(<span class=\"hljs-number\">3</span>));\nmark_(<span class=\"hljs-number\">1</span>:imsize(<span class=\"hljs-number\">1</span>)*<span class=\"hljs-number\">0.5</span>,<span class=\"hljs-number\">1</span>:imsize(<span class=\"hljs-number\">2</span>),:)=TH;\n<span class=\"hljs-keyword\">for</span> i=<span class=\"hljs-number\">1</span>:imsize(<span class=\"hljs-number\">1</span>)*<span class=\"hljs-number\">0.5</span>\n    <span class=\"hljs-keyword\">for</span> j=<span class=\"hljs-number\">1</span>:imsize(<span class=\"hljs-number\">2</span>)\n        mark_(imsize(<span class=\"hljs-number\">1</span>)+<span class=\"hljs-number\">1</span>-i,imsize(<span class=\"hljs-number\">2</span>)+<span class=\"hljs-number\">1</span>-j,:)=TH(i,j,:);\n    end\nend\nfigure,imshow(mark_),title(<span class=\"hljs-string\">\'encoded watermark\'</span>);\n\n%% add watermark\nFA=fft2(im);\nfigure,imshow(FA);title(<span class=\"hljs-string\">\'spectrum of original image\'</span>);\nFB=FA+alpha*double(mark_);\nfigure,imshow(FB); title(<span class=\"hljs-string\">\'spectrum of watermarked image\'</span>);\nFAO=ifft2(FB);\nfigure,imshow(FAO); title(<span class=\"hljs-string\">\'watermarked image\'</span>);\n%imwrite(uint8(FAO),<span class=\"hljs-string\">\'watermarked image.jpg\'</span>);\nRI = FAO-double(im);\nfigure,imshow(uint8(RI)); title(<span class=\"hljs-string\">\'residual\'</span>);\n%imwrite(uint8(RI),<span class=\"hljs-string\">\'residual.jpg\'</span>);\nxl = <span class=\"hljs-number\">1</span>:imsize(<span class=\"hljs-number\">2</span>);\nyl = <span class=\"hljs-number\">1</span>:imsize(<span class=\"hljs-number\">1</span>);\n[xx,yy] = meshgrid(xl,yl);\nfigure, plot3(xx,yy,FA(:,:,<span class=\"hljs-number\">1</span>).^<span class=\"hljs-number\">2</span>+FA(:,:,<span class=\"hljs-number\">2</span>).^<span class=\"hljs-number\">2</span>+FA(:,:,<span class=\"hljs-number\">3</span>).^<span class=\"hljs-number\">2</span>),title(<span class=\"hljs-string\">\'spectrum of original image\'</span>);\nfigure, plot3(xx,yy,FB(:,:,<span class=\"hljs-number\">1</span>).^<span class=\"hljs-number\">2</span>+FB(:,:,<span class=\"hljs-number\">2</span>).^<span class=\"hljs-number\">2</span>+FB(:,:,<span class=\"hljs-number\">3</span>).^<span class=\"hljs-number\">2</span>),title(<span class=\"hljs-string\">\'spectrum of watermarked image\'</span>);\nfigure, plot3(xx,yy,FB(:,:,<span class=\"hljs-number\">1</span>).^<span class=\"hljs-number\">2</span>+FB(:,:,<span class=\"hljs-number\">2</span>).^<span class=\"hljs-number\">2</span>+FB(:,:,<span class=\"hljs-number\">3</span>).^<span class=\"hljs-number\">2</span>-FA(:,:,<span class=\"hljs-number\">1</span>).^<span class=\"hljs-number\">2</span>+FA(:,:,<span class=\"hljs-number\">2</span>).^<span class=\"hljs-number\">2</span>+FA(:,:,<span class=\"hljs-number\">3</span>).^<span class=\"hljs-number\">2</span>),title(<span class=\"hljs-string\">\'spectrum of watermark\'</span>);\n\n%% extract watermark\nFA2=fft2(FAO);\nG=(FA2-FA)/alpha;\nGG=G;\n<span class=\"hljs-keyword\">for</span> i=<span class=\"hljs-number\">1</span>:imsize(<span class=\"hljs-number\">1</span>)*<span class=\"hljs-number\">0.5</span>\n    <span class=\"hljs-keyword\">for</span> j=<span class=\"hljs-number\">1</span>:imsize(<span class=\"hljs-number\">2</span>)\n        GG(M(i),N(j),:)=G(i,j,:);\n    end\nend\n<span class=\"hljs-keyword\">for</span> i=<span class=\"hljs-number\">1</span>:imsize(<span class=\"hljs-number\">1</span>)*<span class=\"hljs-number\">0.5</span>\n    <span class=\"hljs-keyword\">for</span> j=<span class=\"hljs-number\">1</span>:imsize(<span class=\"hljs-number\">2</span>)\n        GG(imsize(<span class=\"hljs-number\">1</span>)+<span class=\"hljs-number\">1</span>-i,imsize(<span class=\"hljs-number\">2</span>)+<span class=\"hljs-number\">1</span>-j,:)=GG(i,j,:);\n    end\nend\nfigure,imshow(GG);title(<span class=\"hljs-string\">\'extracted watermark\'</span>);\n%imwrite(uint8(GG),<span class=\"hljs-string\">\'extracted watermark.jpg\'</span>);\n\n%% MSE and PSNR\nC=double(im);\nRC=double(FAO);\nMSE=<span class=\"hljs-number\">0</span>; PSNR=<span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">for</span> i=<span class=\"hljs-number\">1</span>:imsize(<span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">for</span> j=<span class=\"hljs-number\">1</span>:imsize(<span class=\"hljs-number\">2</span>)\n        MSE=MSE+(C(i,j)-RC(i,j)).^<span class=\"hljs-number\">2</span>;\n    end\nend\nMSE=MSE/<span class=\"hljs-number\">360.</span>^<span class=\"hljs-number\">2</span>;\nPSNR=<span class=\"hljs-number\">20</span>*log10(<span class=\"hljs-number\">255</span>/sqrt(MSE));\nMSE\nPSNR</code></pre><p><br></p>','/static/upload/pics/2018/11/221FnR3TpMkRf07VWLsI2jRqwm.png','saucxs','2018-11-23 23:44:44',64,1,0,1,9,'watermark,watermark-dom,B/S网站系统加一个很浅的水印插件,确保系统的保密性,安全性,降低数据泄密风险',1,1,'https://www.cnblogs.com/chengxs/p/6762380.html',1,0,1,0,0,0),(453,'IEEE Fellow 2019 名单出炉，40 位国内高校学者入选,国内NLP领域单轮融资新纪录，达观数据获1.6亿元B轮投资,试试谷歌这个新工具：说不定比TensorFlow还好用,苹果收购硅谷创业公司 Silk Labs，将继续布局 AI 和 IoT','IEEE Fellow 2019 名单出炉，40 位国内高校学者入选,国内NLP领域单轮融资新纪录，达观数据获1.6亿元B轮投资,试试谷歌这个新工具：说不定比TensorFlow还好用,苹果收购硅谷创业公司 Silk Labs，将继续布局 AI 和 IoT','<p>1.【今日资讯头条&nbsp;|&nbsp;IEEE&nbsp;Fellow&nbsp;2019&nbsp;名单出炉，40&nbsp;位国内高校学者入选】</p><p>来源：雷锋网</p><p>虽然官方还未公布&nbsp;IEEE&nbsp;Fellow&nbsp;2019&nbsp;得主，但国内已经流传出一份&nbsp;IEEE&nbsp;Fellow&nbsp;2019&nbsp;入选华人名单。其中国内高校共有&nbsp;40&nbsp;位入选华人，工作单位包括北京大学、清华大学、中科院、上海交通大学、同济大学等，值得一提的是，除了各大高校，京东、阿里巴巴、微软、出门问问以及新加坡信息通信研究所这五所企业也有华人当选。</p><p>链接：<a href=\"https://www.leiphone.com/news/201811/hx1MwG935U3OesnK.html\" target=\"_blank\">https://www.leiphone.com/news/201811/hx1MwG935U3OesnK.html</a></p><p><br></p><p>2.【业界&nbsp;|&nbsp;国内NLP领域单轮融资新纪录，达观数据获1.6亿元B轮投资】</p><p>来源：量子位</p><p>国内NLP领域，今日有大手笔投资宣布。总部位于上海的达观数据，宣布完成1.6亿元B轮融资，由宽带资本旗下基金晨山资本领投。达观数据方面称，创立至今累计融资额已超2亿元，刷新了国内自然语言理解领域的融资记录，目前已是语义识别领域融资额最高的企业之一。</p><p>链接：<a href=\"https://dwz.cn/EJBovt2p\" target=\"_blank\">https://dwz.cn/EJBovt2p</a></p><p><br></p><p>3.【新闻&nbsp;|&nbsp;试试谷歌这个新工具：说不定比TensorFlow还好用】</p><p>来源：新智元</p><p>谷歌团队（非官方发布）打造了一个名为JAX的系统，今日在Reddit引发了热议。网友纷纷为它叫好——“说不定能够取代TensorFlow”。这个系统用于从纯Python和Numpy机器学习程序中生成高性能加速器（accelerator）代码，且特定于域的跟踪JIT编译器。</p><p>链接：<a href=\"https://dwz.cn/fHdJmBgD\" target=\"_blank\">https://dwz.cn/fHdJmBgD</a></p><p><br></p><p>4.【新闻&nbsp;|&nbsp;苹果收购硅谷创业公司&nbsp;Silk&nbsp;Labs，将继续布局&nbsp;AI&nbsp;和&nbsp;IoT】</p><p>来源：The&nbsp;Information</p><p>近日，The&nbsp;Information&nbsp;发布文章称，今年早些时候，苹果已经悄悄地收购了一家名为&nbsp;Silk&nbsp;Labs&nbsp;的&nbsp;AI&nbsp;创业公司。这家公司的核心业务，是面向&nbsp;IoT&nbsp;硬件开发基于&nbsp;AI&nbsp;的操作系统。从应用场景来说，该应用可以应用于人物监测、人脸识别、物体监测、声音监测。</p><p>链接：<a href=\"https://www.leiphone.com/news/201811/kVK8xATWIV6AHkfu.html\" target=\"_blank\">https://www.leiphone.com/news/201811/kVK8xATWIV6AHkfu.html</a></p><p><br></p>','','saucxs','2018-11-23 09:13:36',15,0,1,0,37,'IEEE Fellow 2019 名单出炉，40 位国内高校学者入选,国内NLP领域单轮融资新纪录，达观数据获1.6亿元B轮投资,试试谷歌这个新工具：说不定比TensorFlow还好用,苹果收购硅谷创业公司 Silk Labs，将继续布局 AI 和 IoT',1,1,'网络',2,0,0,0,0,0),(454,'songEagle开发系列：Vue.js + Koa.js项目中使用JWT认证','JWT本质来说是一个token。在前后端进行HTTP连接时来进行相应的验证。\n1. 博客的后台管理系统发起登录请求，后端服务器校验成功之后，生成JWT认证信息；\n2. 前端接收到JWT后进行存储；\n3. 前端在之后每次接口调用发起HTTP请求时，会将JWT放到HTTP的headers参数里的authorization中一起发送给后端；\n4. 后端接收到请求时会根据JWT中的信息来校验当前发','<h3><b>一、前言</b></h3><blockquote>JWT(JSON Web Token)，是为了在网络环境间传递声明而执行的一种基于JSON的开放标准（RFC 7519）。</blockquote><p>JWT不是一个新鲜的东西，网上相关的介绍已经非常多了。不是很了解的可以在网上搜索一下相关信息。</p><p><br></p><h3><b>二、源码</b></h3><p><a href=\"https://github.com/saucxs/songEagle_backManage\" target=\"_blank\">Talk is cheap. Show me the code.</a></p><p><br></p><h3><b>三、工作流程</b></h3><p>JWT本质来说是一个token。在前后端进行HTTP连接时来进行相应的验证。\n</p><p>1.&nbsp;博客的后台管理系统发起登录请求，后端服务器校验成功之后，生成JWT认证信息；\n</p><p>2.&nbsp;前端接收到JWT后进行存储；\n</p><p>3.&nbsp;前端在之后每次接口调用发起HTTP请求时，会将JWT放到HTTP的headers参数里的authorization中一起发送给后端；\n</p><p>4.&nbsp;后端接收到请求时会根据JWT中的信息来校验当前发起HTTP请求的用户是否是具有访问权限的，有访问权限时则交给服务器继续处理，没有时则直接返回401错误。</p><p><br></p><h3><b>四、实现过程</b></h3><h4>1. 登录成功生成JWT</h4><blockquote>说明：以下代码只保留了核心代码，详细代码可在对应文件中查看，下同。</blockquote><pre><code class=\"hljs javascript\" codemark=\"1\"><span class=\"hljs-comment\">// /server/api/admin/admin.controller.js</span>\n<span class=\"hljs-keyword\">const</span> jwt = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'jsonwebtoken\'</span>);\n<span class=\"hljs-keyword\">const</span> config = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'../../config/config\'</span>);\n\nexports.login = <span class=\"hljs-keyword\">async</span>(ctx) =&gt; {\n  <span class=\"hljs-comment\">// ...</span>\n  <span class=\"hljs-keyword\">if</span> (hashedPassword === hashPassword) {\n    <span class=\"hljs-comment\">// ...</span>\n    <span class=\"hljs-comment\">// 用户token</span>\n    <span class=\"hljs-keyword\">const</span> userToken = {\n      name: userName,\n      id: results[<span class=\"hljs-number\">0</span>].id\n    };\n    <span class=\"hljs-comment\">// 签发token</span>\n    <span class=\"hljs-keyword\">const</span> token = jwt.sign(userToken, config.tokenSecret, { expiresIn: <span class=\"hljs-string\">\'2h\'</span> });\n    <span class=\"hljs-comment\">// ...</span>\n  }\n  <span class=\"hljs-comment\">// ...</span>\n}</code></pre><h4>2. 添加中间件校验JWT</h4><pre><code class=\"hljs javascript\" codemark=\"1\"><span class=\"hljs-comment\">// /server/middlreware/tokenError.js</span>\n<span class=\"hljs-keyword\">const</span> jwt = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'jsonwebtoken\'</span>);\n<span class=\"hljs-keyword\">const</span> config = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'../config/config\'</span>);\n<span class=\"hljs-keyword\">const</span> util = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\'util\'</span>);\n<span class=\"hljs-keyword\">const</span> verify = util.promisify(jwt.verify);\n\n<span class=\"hljs-comment\">/**\n * 判断token是否可用\n */</span>\n<span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">ctx, next</span>) </span>{\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-comment\">// 获取jwt</span>\n      <span class=\"hljs-keyword\">const</span> token = ctx.header.authorization; \n      <span class=\"hljs-keyword\">if</span> (token) {\n        <span class=\"hljs-keyword\">try</span> {\n          <span class=\"hljs-comment\">// 解密payload，获取用户名和ID</span>\n          <span class=\"hljs-keyword\">let</span> payload = <span class=\"hljs-keyword\">await</span> verify(token.split(<span class=\"hljs-string\">\' \'</span>)[<span class=\"hljs-number\">1</span>], config.tokenSecret);\n          ctx.user = {\n            name: payload.name,\n            id: payload.id\n          };\n        } <span class=\"hljs-keyword\">catch</span> (err) {\n          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'token verify fail: \'</span>, err)\n        }\n      }\n      <span class=\"hljs-keyword\">await</span> next();\n    } <span class=\"hljs-keyword\">catch</span> (err) {\n      <span class=\"hljs-keyword\">if</span> (err.status === <span class=\"hljs-number\">401</span>) {\n        ctx.status = <span class=\"hljs-number\">401</span>;\n        ctx.body = {\n          success: <span class=\"hljs-number\">0</span>,\n          message: <span class=\"hljs-string\">\'认证失败\'</span>\n        };\n      } <span class=\"hljs-keyword\">else</span> {\n        err.status = <span class=\"hljs-number\">404</span>;\n        ctx.body = {\n          success: <span class=\"hljs-number\">0</span>,\n          message: <span class=\"hljs-string\">\'404\'</span>\n        };\n      }\n    }\n  }\n}</code></pre><h4>3. Koa.js中添加JWT处理</h4><p>此处在开发时需要过滤掉登录接口(login)，否则会导致JWT验证永远失败。</p><pre><code class=\"hljs php\" codemark=\"1\"><span class=\"hljs-comment\">// /server/config/koa.js</span>\n<span class=\"hljs-keyword\">const</span> jwt = <span class=\"hljs-keyword\">require</span>(<span class=\"hljs-string\">\'koa-jwt\'</span>);\n<span class=\"hljs-keyword\">const</span> tokenError = <span class=\"hljs-keyword\">require</span>(<span class=\"hljs-string\">\'../middlreware/tokenError\'</span>);\n<span class=\"hljs-comment\">// ...</span>\n\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Koa();\n\napp.<span class=\"hljs-keyword\">use</span>(tokenError());\napp.<span class=\"hljs-keyword\">use</span>(bodyParser());\napp.<span class=\"hljs-keyword\">use</span>(koaJson());\napp.<span class=\"hljs-keyword\">use</span>(resource(path.join(config.root, config.appPath)));\n\napp.<span class=\"hljs-keyword\">use</span>(jwt({\n  secret: config.tokenSecret\n}).unless({\n  path: [/^\\/backapi\\/admin\\/login/, /^\\/blogapi\\<span class=\"hljs-comment\">//]</span>\n}));\n\nmodule.exports = app;\n</code></pre><h4>4.前端处理</h4><blockquote>前端开发使用的是Vue.js，发送HTTP请求使用的是axios。</blockquote><p>1.&nbsp;登录成功之后将JWT存储到localStorage中（可根据个人需要存储，我个人是比较喜欢存储到localStorage中）。</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\"> methods: {\n       login: <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n         <span class=\"hljs-comment\">// ...</span>\n         <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-keyword\">await</span> api.login(<span class=\"hljs-keyword\">this</span>.userName, <span class=\"hljs-keyword\">this</span>.password);\n         <span class=\"hljs-keyword\">if</span> (res.success === <span class=\"hljs-number\">1</span>) {\n           <span class=\"hljs-keyword\">this</span>.errMsg = <span class=\"hljs-string\">\'\'</span>;\n           localStorage.setItem(<span class=\"hljs-string\">\'SONG_EAGLE_TOKEN\'</span>, res.token);\n           <span class=\"hljs-keyword\">this</span>.$router.push({ path: <span class=\"hljs-string\">\'/postlist\'</span> });\n         } <span class=\"hljs-keyword\">else</span> {\n           <span class=\"hljs-keyword\">this</span>.errMsg = res.message;\n         }\n       }\n     }</code></pre><p><br></p><p>2.&nbsp;Vue.js的router（路由）跳转前校验JWT是否存在，不存在则跳转到登录页面。</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\"> <span class=\"hljs-comment\">// /src/router/index.js</span>\n   router.beforeEach((to, <span class=\"hljs-keyword\">from</span>, next) =&gt; {\n     <span class=\"hljs-keyword\">if</span> (to.meta.requireAuth) {\n       <span class=\"hljs-keyword\">const</span> token = localStorage.getItem(<span class=\"hljs-string\">\'SONG_EAGLE_TOKEN\'</span>);\n       <span class=\"hljs-keyword\">if</span> (token &amp;&amp; token !== <span class=\"hljs-string\">\'null\'</span>) {\n         next();\n       } <span class=\"hljs-keyword\">else</span> {\n         next(<span class=\"hljs-string\">\'/login\'</span>);\n       }\n     } <span class=\"hljs-keyword\">else</span> {\n       next();\n     }\n   });</code></pre><p>3.&nbsp;axios拦截器中给HTTP统一添加Authorization信息</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\"> <span class=\"hljs-comment\">// /src/api/config.js</span>\n   axios.interceptors.request.use(\n     config =&gt; {\n       <span class=\"hljs-keyword\">const</span> token = localStorage.getItem(<span class=\"hljs-string\">\'SONG_EAGLE_TOKEN\'</span>);\n       <span class=\"hljs-keyword\">if</span> (token) {\n         <span class=\"hljs-comment\">// Bearer是JWT的认证头部信息</span>\n         config.headers.common[<span class=\"hljs-string\">\'Authorization\'</span>] = <span class=\"hljs-string\">\'Bearer \'</span> + token;\n       }\n       <span class=\"hljs-keyword\">return</span> config;\n     },\n     error =&gt; {\n       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.reject(error);\n     }\n   );</code></pre><p>4.&nbsp;axios拦截器在接收到HTTP返回时统一处理返回状态</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\">  <span class=\"hljs-comment\">// /src/main.js</span>\n   axios.interceptors.response.use(\n     response =&gt; {\n       <span class=\"hljs-keyword\">return</span> response;\n     },\n     error =&gt; {\n       <span class=\"hljs-keyword\">if</span> (error.response.status === <span class=\"hljs-number\">401</span>) {\n         Vue.prototype.$msgBox.showMsgBox({\n           title: <span class=\"hljs-string\">\'错误提示\'</span>,\n           content: <span class=\"hljs-string\">\'您的登录信息已失效，请重新登录\'</span>,\n           isShowCancelBtn: <span class=\"hljs-literal\">false</span>\n         }).then((val) =&gt; {\n           router.push(<span class=\"hljs-string\">\'/login\'</span>);\n         }).catch(() =&gt; {\n           <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'cancel\'</span>);\n         });\n       } <span class=\"hljs-keyword\">else</span> {\n         Vue.prototype.$message.showMessage({\n           type: <span class=\"hljs-string\">\'error\'</span>,\n           content: <span class=\"hljs-string\">\'系统出现错误\'</span>\n         });\n       }\n       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Promise</span>.reject(error);\n     }\n   );</code></pre><p><br></p><h3><b>五、总结</b></h3><p>这个基本上就是JWT的流程。当然单纯的JWT并不是说绝对安全的，不过对于一个个人博客系统的认证来说还是足够的。</p><p>最后打个小广告。目前正在开发新版的个人博客中，包括两部分：</p><p>【前端】(<a href=\"https://github.com/saucxs/songEagle\" target=\"_blank\">https://github.com/saucxs/songEagle</a>)</p><p>【后端】(<a href=\"https://github.com/saucxs/songEagle_backManage\" target=\"_blank\">https://github.com/saucxs/songEagle_backManage</a>)</p><p>都已在GitHub上开源，目前在逐步完善功能中。欢迎感兴趣的同学fork和star。</p><p><br></p>','/static/upload/pics/2018/11/230BJmY7gkCFq_E-L33fdNWuOx.jpg','saucxs','2018-11-23 23:45:33',55,1,0,0,3,'songEagle,Vue.js,Koa.js,JWT认证,sau交流学习社区,saucxs,程新松',1,1,'',3,0,1,0,0,0),(455,'sau交流学习社区--快速基于nodeJS+vue+vuex+mysql+redis建立一个后台管控系统','structure-admin是一个后台管控系统的架子，技术栈：nodeJS+vue+vuex+mysql+redis，前端使用vue的element-ui的组件库，后端使用nodeJS的服务，数据库mysql，缓存使用的是redis，后端完全使用nodeJS，数据库使用mysql，基于nodejs的thinkjs框架搭建的，全栈开发。','<h1 id=\"structure-admin\"><a href=\"https://github.com/saucxs/structure-admin\">structure-admin</a></h1>\n<p>structure-admin是一个后台管控系统的架子，技术栈：nodeJS+vue+vuex+mysql+redis，前端使用vue的element-ui的组件库，后端使用nodeJS的服务，数据库mysql，缓存使用的是redis，后端完全使用<code>nodeJS</code>，数据库使用<code>mysql</code>，基于<code>nodejs的thinkjs框架搭建的</code>，全栈开发。</p>\n<p>支持：</p>\n<blockquote>\n1、vuex来实现状态管理<br>2、静态页面，引入后端服务（nodeJs）<br>3、组件是用的是element-ui<br>4、页面布局是上左右，左右布局使用的弹性和布局flex，左边定宽，右边计算宽度<br>5、左右的滚动条是相互独立的，去掉body上的滚动条<br><ul>\n</ul>\n</blockquote>\n<p>如果喜欢<code>nodeJS</code>写的后端，支持大前端，支持全栈开发，请请<code>star</code>并<code>fork</code>项目。</p>\n<p>如有使用问题请留言。</p>\n<h3 id=\"-\">一、技术栈</h3>\n<blockquote>\nThinkJS（ Node端框架） <a href=\"https://thinkjs.org/\">官方网站</a><br>Vue.js（客户端双向数据绑定框架）  <a href=\"https://cn.vuejs.org/\">官方网站</a><br><ul>\n</ul>\n</blockquote>\n<h3 id=\"-\">二、源码地址</h3>\n<p><a href=\"https://github.com/saucxs/structure-admin\">structure-admin</a></p><p><br></p>\n<h3 id=\"-\">三、线上地址</h3>\n<p>线上地址： <a href=\"http://structure_admin.mwcxs.top\">http://structure_admin.mwcxs.top</a><br>账号：test，密码：123456</p><p><br></p>\n<h3 id=\"-\">四、系统截图</h3>\n<h4 id=\"4-1-\">4.1 登录页</h4>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/5/166e43c93fc7b83c?w=1914&h=730&amp;f=png&amp;s=49095\" alt=\"image\"></p>\n<h4 id=\"4-2-\">4.2 主页</h4>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/11/5/166e43c93fdab632?w=1918&h=942&amp;f=png&amp;s=47320\" alt=\"image\"></p>\n<h3 id=\"-\"><br></h3><h3 id=\"-\">五、本地运行程序</h3>\n<p>1、首先你的环境是nodejs，不会安装配置参考：<a href=\"http://www.mwcxs.top/page/420.html\">nodejs环境配置</a></p>\n<p>2、clone下来项目</p>\n<pre><code>git clone https://github.com/saucxs/structure-admin.git\n</code></pre><p>3、分别针对前端vue的structure-admin-web的文件夹和node后端structure-admin-node，安装相应依赖</p>\n<pre><code>npm install\n</code></pre><p>4、安装redis（可以考虑安装RedisDesktopManager）</p>\n<p>参考：<a href=\"http://www.mwcxs.top/page/421.html\">安装window下的redis，redis可视化管理工具（Redis Desktop Manager）安装，基础使用，实例化项目</a></p>\n<p>5、安装mysql，这个就不赘述</p>\n<p>6、修改nodejs的后端的配置文件adapter.js，config.js这两个文件中</p>\n<pre><code>adapter.js\n\nexports.cache = {\n    type: \'redis\',\n    common: {\n        timeout: 24 * 60 * 60 * 1000 // millisecond\n    },\n    redis: {\n        handle: redisCache,\n        host: \'127.0.0.1\',\n        port: 6379,\n        password: \'a123456\'  //redis安装时候设置的秘密\n    }\n};\n//\n//\nexports.model = {\n  type: \'mysql\',\n  common: {\n    logConnect: true,\n    logSql: true,\n    logger: msg =&gt; think.logger.info(msg)\n  },\n  mysql: {\n    handle: mysql,\n    database: \'structure_admin\',\n    prefix: \'structure_\',\n    encoding: \'utf8\',\n    host: \'127.0.0.1\',   //本地数据库\n    port: \'3306\',　　　　　//数据库端口\n    user: \'root\',    //数据库的用户名\n    password: \'123456\',    //数据库该用户名的密码\n    dateStrings: true\n  }\n};\n</code></pre><p>7、数据库文件，地址在<code>structure-admin-node/src/common/mysql/structure_admin.sql</code></p>\n<p>8、分别对前后端分离的项目启动</p>\n<p>(1)前端vue的structure-admin-web的启动</p>\n<pre><code>npm run dev\n</code></pre><p>(2)和node后端structure-admin-node的启动</p>\n<pre><code>npm start\n</code></pre><h3 id=\"-\">说明</h3>\n<p>周报系统是基于structure-admin后台管理框架下搭建</p>\n<p>周报系统演示地址为：<a href=\"http://weekly.mwcxs.top\">系统网站平台</a></p>\n<p>周报系统源码地址：<a href=\"https://github.com/saucxs/weekly\">周报系统源码地址</a></p>\n<p>欢迎fork和start</p>\n<p><br></p>','/static/upload/pics/2018/11/24-vaCDLJny2cs08tFK4Ox_IRg.png','saucxs','2018-11-24 23:33:55',18,1,0,1,3,'nodeJS,vue,vuex,mysql,redis,后台管控系统',1,1,'',3,0,0,0,0,0),(456,'DeepMind高赞课程：24小时看完深度强化学习最新进展,走出苹果谷歌的阴影，微软成为全球市值最高公司,解析AI漫画系统CariGAN：为何能与艺术家一决高下,谷歌刷新世界纪录！2分钟搞定 ImageNet 训练','DeepMind高赞课程：24小时看完深度强化学习最新进展,走出苹果谷歌的阴影，微软成为全球市值最高公司,解析AI漫画系统CariGAN：为何能与艺术家一决高下,谷歌刷新世界纪录！2分钟搞定 ImageNet 训练','<p>1.【今日资讯头条&nbsp;|&nbsp;DeepMind高赞课程：24小时看完深度强化学习最新进展】</p><p>来源：DeepMind&nbsp;&amp;&nbsp;UCL</p><p>今天，DeepMind&nbsp;官推贴出一则告示，将&nbsp;DeepMind&nbsp;研究人员今年在&nbsp;UCL&nbsp;教授的深度强化学习课程&nbsp;资源全部公开。这门课程内容由两部分组成，一是深度学习（利用深度神经网络进行机器学习），二是强化学习（利用强化学习进行预测和控制），最后两条线结合在一起，也就成了DeepMind的拿手好戏——深度强化学习。</p><p>链接：<a href=\"https://dwz.cn/KBtK00vw\" target=\"_blank\">https://dwz.cn/KBtK00vw</a></p><p><br></p><p>2.【业界&nbsp;|&nbsp;走出苹果谷歌的阴影，微软成为全球市值最高公司】</p><p>来源：雷锋网</p><p>近来美国科技股持续下跌，截止本周五收盘，苹果市值为7468.2亿美元，亚马逊市值为7366.2亿美元，谷歌市值为7255.2亿美元。微软市值为7533.4亿美元，超越此前市值超过1万亿美元的苹果，改变了近10年一直生活在苹果阴影之下的情况。</p><p>链接：<a href=\"http://tech.163.com/18/1124/14/E1CSJNC000097U7R.html\" target=\"_blank\">http://tech.163.com/18/1124/14/E1CSJNC000097U7R.html</a></p><p><br></p><p>3.【新闻&nbsp;|&nbsp;解析AI漫画系统CariGAN：为何能与艺术家一决高下】</p><p>来源：网易智能</p><p>我们所知的是，算法可以创造出逼真的人像或足以以假乱真的视频，但来自微软和香港城市大学的人工智能开发者团队却回避了绘制的准确性。相反，他们把人工智能用于自动将照片变成一幅漫画，能够模仿那些你可能在游乐场等地方看到的那种夸张的、高度程式化的图像。</p><p>链接：<a href=\"http://tech.163.com/18/1123/09/E19OT59I00098IEO.html\" target=\"_blank\">http://tech.163.com/18/1123/09/E19OT59I00098IEO.html</a></p><p><br></p><p>4.【新闻&nbsp;|&nbsp;谷歌刷新世界纪录！2分钟搞定&nbsp;ImageNet&nbsp;训练】</p><p>来源：AI前线</p><p>在&nbsp;ImageNet&nbsp;上训练&nbsp;ResNet-50&nbsp;的速度被不断刷新。&nbsp;7&nbsp;月，腾讯机智机器学习平台团队在&nbsp;ImageNet&nbsp;数据集上仅用&nbsp;6.6&nbsp;分钟就训练好&nbsp;ResNet-50，创造了&nbsp;AI&nbsp;训练世界纪录；一周前，壕无人性的索尼用&nbsp;2176&nbsp;块&nbsp;V100&nbsp;GPU&nbsp;将这一纪录缩短到了&nbsp;224&nbsp;秒；如今，这一纪录再次被谷歌刷新，在识别率没有降低的情况下，仅使用了&nbsp;2.2&nbsp;分钟。</p><p>链接：<a href=\"https://dwz.cn/YZWwuQy9\" target=\"_blank\">https://dwz.cn/YZWwuQy9</a></p><p><br></p>','','saucxs','2018-11-25 12:08:24',10,0,1,0,37,'DeepMind高赞课程：24小时看完深度强化学习最新进展,走出苹果谷歌的阴影，微软成为全球市值最高公司,解析AI漫画系统CariGAN：为何能与艺术家一决高下,谷歌刷新世界纪录！2分钟搞定 ImageNet 训练',1,1,'网络',2,0,0,0,0,0),(457,'sau交流学习社区--基于vue2 + vuex + vue-router + webpack + ES6 + axios + sass开发的读书WebAPP','loveBook爱上阅读，是一款webapp的读小说等书籍的并且阅读的应用。如果觉得可以，欢迎fork和star。\n自己最近在追斗破苍穹电视剧，下班时候在地铁上总听到有人说，斗破苍穹书籍比电视剧好看，于是想弄个看书的webapp，\n这样在手机上看电子书很爽。找了好久发现发现只有追书神器的api暴露出来了，起点之类的api找不到。','<h4></h4><h3><a href=\"https://github.com/saucxs/loveBook\">loveBook</a></h3><h4><b>一、前言</b></h4><p><a href=\"https://github.com/saucxs/loveBook\" target=\"_blank\">loveBook</a>爱上阅读，是一款webapp的读小说等书籍的并且阅读的应用。如果觉得可以，欢迎fork和star。</p><p>自己最近在追斗破苍穹电视剧，下班时候在地铁上总听到有人说，斗破苍穹书籍比电视剧好看，于是想弄个看书的webapp，</p><p>这样在手机上看电子书很爽。找了好久发现发现只有追书神器的api暴露出来了，起点之类的api找不到。</p><p><br></p><h4><b>二、技术栈</b></h4><p>vue2&nbsp;+&nbsp;vuex&nbsp;+&nbsp;vue-router&nbsp;+&nbsp;webpack&nbsp;+&nbsp;ES6&nbsp;+&nbsp;axios&nbsp;+&nbsp;sass</p><p><br></p><h4><b>三、 源码地址</b></h4><p><a href=\"https://github.com/saucxs/loveBook\" target=\"_blank\">https://github.com/saucxs/loveBook</a></p><p><br></p><h4><b>四、演示地址</b></h4><p><a href=\"http://book.mwcxs.top\" target=\"_blank\">http://book.mwcxs.top</a></p><p><br></p><p><b>1、版本功能</b></p><p>-&nbsp;[x]&nbsp;热门模块-男生热门，女生热门，女频限免三部分</p><p>-&nbsp;[x]&nbsp;分类模块-男生，女生，出版三部分</p><p>-&nbsp;[x]&nbsp;分类详情模块-分为热门，新书，好评，完结，包月，根据小说内容分为全部，东方玄幻，异界大陆，异界争霸，远古神话</p><p>-&nbsp;[x]&nbsp;书籍详情模块-包含书籍一些基本信息和简介，书籍目录入口，热门书评，同类推荐，包含加入书架功能，和立即阅读</p><p>-&nbsp;[x]&nbsp;书籍目录模块-包含一共多少章，章节顺序（倒叙）</p><p>-&nbsp;[x]&nbsp;同类推荐列表模块</p><p>-&nbsp;[x]&nbsp;阅读模块-包含目录，昼夜阅读模式，以及字体调整和书籍背景颜色设置</p><p>-&nbsp;[x]&nbsp;书架模块-包含加入到书架展示，以及上次阅读地方存储</p><p>-&nbsp;[x]&nbsp;搜索模块-包含热搜的内容和历史搜索内容，以及清空历史搜索内容</p><p>+&nbsp;2018.10.17</p><p>&nbsp;&nbsp;&nbsp;-&nbsp;完成热门模块</p><p>&nbsp;&nbsp;&nbsp;-&nbsp;完成类别列表</p><p>&nbsp;&nbsp;&nbsp;-&nbsp;完成书籍详情</p><p>+&nbsp;2018.10.21</p><p>&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;完成分类模块</p><p>&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;完成章节目录</p><p>&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;完成阅读模块</p><p>+&nbsp;2018.10.24</p><p>&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;完成书架模块</p><p>+&nbsp;2018.10.25</p><p>&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;完成模糊搜索功能</p><p>&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;清空搜索历史功能</p><p>&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;修复bug：部署之后阅读章节返回的错误</p><p><br></p><h4><b>五、项目截图</b></h4><p>5.1热门模块</p><p><img src=\"https://github.com/saucxs/loveBook/raw/master/screenshot/photo2_featured.png\" alt=\"ç­é¨æ¨¡å\"></p><p>5.2分类模块</p><p><img src=\"https://github.com/saucxs/loveBook/raw/master/screenshot/photo4_category.png\" alt=\"åç±»æ¨¡å\"></p><p>5.3分类详情模块</p><p><img src=\"https://github.com/saucxs/loveBook/raw/master/screenshot/photo4_categoty_detail.png\" alt=\"åç±»è¯¦ææ¨¡å\"></p><p>5.4书籍详情模块</p><p><img src=\"https://github.com/saucxs/loveBook/raw/master/screenshot/photo3_book_detail.png\" alt=\"ä¹¦ç±è¯¦ææ¨¡å\"></p><p>5.5书籍目录模块</p><p><img src=\"https://github.com/saucxs/loveBook/raw/master/screenshot/photo3_book_menu.png\" alt=\"ä¹¦ç±ç®å½æ¨¡å\"></p><p>5.6同类推荐列表模块</p><p><img src=\"https://github.com/saucxs/loveBook/raw/master/screenshot/photo3_same_book_list.png\" alt=\"åç±»æ¨èåè¡¨æ¨¡å\"></p><p>5.7阅读模块</p><p><img src=\"https://github.com/saucxs/loveBook/raw/master/screenshot/photo3_reading_now.png\" alt=\"éè¯»æ¨¡å\"></p><p>5.8阅读模块-夜间</p><p><img src=\"https://github.com/saucxs/loveBook/raw/master/screenshot/photo3_read_night.png\" alt=\"éè¯»æ¨¡å-å¤é´\"></p><p>5.9立即阅读模块-设置</p><p><img src=\"https://github.com/saucxs/loveBook/raw/master/screenshot/photo3_read_setting.png\" alt=\"éè¯»æ¨¡å-è®¾ç½®\"></p><p>5.10书架模块</p><p><img src=\"https://github.com/saucxs/loveBook/raw/master/screenshot/photo5_book_shelf.png\" alt=\"ä¹¦æ¶æ¨¡å\"></p><p>5.11搜索模块-搜索前</p><p><img src=\"https://github.com/saucxs/loveBook/raw/master/screenshot/photo5_search_before.png\" alt=\"æç´¢æ¨¡å-1\"></p><p>5.12搜索模块-搜索后</p><p><img src=\"https://github.com/saucxs/loveBook/raw/master/screenshot/photo5_search_after.png\" alt=\"æç´¢æ¨¡å-2\"></p><p><br></p><h4><b>六、项目运行</b></h4><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\">git clone https:<span class=\"hljs-comment\">//github.com/saucxs/loveBook</span>\n\ncd loveBook\n\nnpm install\n\nnpm run dev（本地运行 访问：http:<span class=\"hljs-comment\">//localhost:8083）</span>\n\nnpm run build （部署上线 生成的dist文件夹放到服务器中即可：需要配置代理，如使用nginx，可参考下面问题中的配置）</code></pre><p><br></p><h4><b>七、说明&nbsp;</b></h4><p>是基于[structure_webApp](https://github.com/saucxs/structure_webApp)架子上进行添加业务逻辑。</p><p><br></p><h4><b>一、前言</b></h4><p><a href=\"https://github.com/saucxs/loveBook\" target=\"_blank\">loveBook</a>爱上阅读，是一款webapp的读小说等书籍的并且阅读的应用。如果觉得可以，欢迎fork和star。</p><p>自己最近在追斗破苍穹电视剧，下班时候在地铁上总听到有人说，斗破苍穹书籍比电视剧好看，于是想弄个看书的webapp，</p><p>这样在手机上看电子书很爽。找了好久发现发现只有追书神器的api暴露出来了，起点之类的api找不到。</p><p><br></p><h4><b>二、技术栈</b></h4><p>vue2&nbsp;+&nbsp;vuex&nbsp;+&nbsp;vue-router&nbsp;+&nbsp;webpack&nbsp;+&nbsp;ES6&nbsp;+&nbsp;axios&nbsp;+&nbsp;sass</p><p><br></p><h4><b>三、 源码地址</b></h4><p><a href=\"https://github.com/saucxs/loveBook\" target=\"_blank\">https://github.com/saucxs/loveBook</a></p><p><br></p><h4><b>四、演示地址</b></h4><p><a href=\"http://book.mwcxs.top\" target=\"_blank\">http://book.mwcxs.top</a></p><p><br></p><p><b>1、版本功能</b></p><p>-&nbsp;[x]&nbsp;热门模块-男生热门，女生热门，女频限免三部分</p><p>-&nbsp;[x]&nbsp;分类模块-男生，女生，出版三部分</p><p>-&nbsp;[x]&nbsp;分类详情模块-分为热门，新书，好评，完结，包月，根据小说内容分为全部，东方玄幻，异界大陆，异界争霸，远古神话</p><p>-&nbsp;[x]&nbsp;书籍详情模块-包含书籍一些基本信息和简介，书籍目录入口，热门书评，同类推荐，包含加入书架功能，和立即阅读</p><p>-&nbsp;[x]&nbsp;书籍目录模块-包含一共多少章，章节顺序（倒叙）</p><p>-&nbsp;[x]&nbsp;同类推荐列表模块</p><p>-&nbsp;[x]&nbsp;阅读模块-包含目录，昼夜阅读模式，以及字体调整和书籍背景颜色设置</p><p>-&nbsp;[x]&nbsp;书架模块-包含加入到书架展示，以及上次阅读地方存储</p><p>-&nbsp;[x]&nbsp;搜索模块-包含热搜的内容和历史搜索内容，以及清空历史搜索内容</p><p>+&nbsp;2018.10.17</p><p>&nbsp;&nbsp;&nbsp;-&nbsp;完成热门模块</p><p>&nbsp;&nbsp;&nbsp;-&nbsp;完成类别列表</p><p>&nbsp;&nbsp;&nbsp;-&nbsp;完成书籍详情</p><p>+&nbsp;2018.10.21</p><p>&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;完成分类模块</p><p>&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;完成章节目录</p><p>&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;完成阅读模块</p><p>+&nbsp;2018.10.24</p><p>&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;完成书架模块</p><p>+&nbsp;2018.10.25</p><p>&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;完成模糊搜索功能</p><p>&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;清空搜索历史功能</p><p>&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;修复bug：部署之后阅读章节返回的错误</p><p><br></p><h4><b>五、项目截图</b></h4><p>5.1热门模块</p><p><img src=\"https://github.com/saucxs/loveBook/raw/master/screenshot/photo2_featured.png\" alt=\"ç­é¨æ¨¡å\"></p><p>5.2分类模块</p><p><img src=\"https://github.com/saucxs/loveBook/raw/master/screenshot/photo4_category.png\" alt=\"åç±»æ¨¡å\"></p><p>5.3分类详情模块</p><p><img src=\"https://github.com/saucxs/loveBook/raw/master/screenshot/photo4_categoty_detail.png\" alt=\"åç±»è¯¦ææ¨¡å\"></p><p>5.4书籍详情模块</p><p><img src=\"https://github.com/saucxs/loveBook/raw/master/screenshot/photo3_book_detail.png\" alt=\"ä¹¦ç±è¯¦ææ¨¡å\"></p><p>5.5书籍目录模块</p><p><img src=\"https://github.com/saucxs/loveBook/raw/master/screenshot/photo3_book_menu.png\" alt=\"ä¹¦ç±ç®å½æ¨¡å\"></p><p>5.6同类推荐列表模块</p><p><img src=\"https://github.com/saucxs/loveBook/raw/master/screenshot/photo3_same_book_list.png\" alt=\"åç±»æ¨èåè¡¨æ¨¡å\"></p><p>5.7阅读模块</p><p><img src=\"https://github.com/saucxs/loveBook/raw/master/screenshot/photo3_reading_now.png\" alt=\"éè¯»æ¨¡å\"></p><p>5.8阅读模块-夜间</p><p><img src=\"https://github.com/saucxs/loveBook/raw/master/screenshot/photo3_read_night.png\" alt=\"éè¯»æ¨¡å-å¤é´\"></p><p>5.9立即阅读模块-设置</p><p><img src=\"https://github.com/saucxs/loveBook/raw/master/screenshot/photo3_read_setting.png\" alt=\"éè¯»æ¨¡å-è®¾ç½®\"></p><p>5.10书架模块</p><p><img src=\"https://github.com/saucxs/loveBook/raw/master/screenshot/photo5_book_shelf.png\" alt=\"ä¹¦æ¶æ¨¡å\"></p><p>5.11搜索模块-搜索前</p><p><img src=\"https://github.com/saucxs/loveBook/raw/master/screenshot/photo5_search_before.png\" alt=\"æç´¢æ¨¡å-1\"></p><p>5.12搜索模块-搜索后</p><p><img src=\"https://github.com/saucxs/loveBook/raw/master/screenshot/photo5_search_after.png\" alt=\"æç´¢æ¨¡å-2\"></p><p><br></p><h4><b>六、项目运行</b></h4><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"javascript hljs\" codemark=\"1\">git clone https:<span class=\"hljs-comment\">//github.com/saucxs/loveBook</span>\n\ncd loveBook\n\nnpm install\n\nnpm run dev（本地运行 访问：http:<span class=\"hljs-comment\">//localhost:8083）</span>\n\nnpm run build （部署上线 生成的dist文件夹放到服务器中即可：需要配置代理，如使用nginx，可参考下面问题中的配置）</code></pre><p><br></p><h4><b>七、说明&nbsp;</b></h4><p>是基于[structure_webApp](https://github.com/saucxs/structure_webApp)架子上进行添加业务逻辑。</p><p><br></p><h4><b>八、最后</b></h4><p>最后打个小广告</p><p>源码：(<a href=\"https://github.com/saucxs/loveBook\" target=\"_blank\">https://github.com/saucxs/loveBook</a>)</p><p></p><p>都已在GitHub上开源，目前在逐步完善功能中。欢迎感兴趣的同学fork和star。</p><p><br></p>','/static/upload/pics/2018/11/25NtxtAKHd3zHx90ws5OaRHv1I.jpg','saucxs','2018-11-27 09:43:57',24,1,0,1,26,'loveBook,webapp',1,1,'',1,0,0,0,0,0),(458,'福布斯2019 AI趋势大预测：语音图像技术突飞猛进，要像信任医生一样信任AI,北大新成果！首次成功地将CNN解码器用于代码生成,Alexa又添新技能：用纯正的播音员声音读新闻,2018赴美留学新生全线下滑，数学和计算机科学专业大涨','福布斯2019 AI趋势大预测：语音图像技术突飞猛进，要像信任医生一样信任AI,北大新成果！首次成功地将CNN解码器用于代码生成,Alexa又添新技能：用纯正的播音员声音读新闻,2018赴美留学新生全线下滑，数学和计算机科学专业大涨','<p>1.【今日资讯头条&nbsp;|&nbsp;福布斯2019&nbsp;AI趋势大预测：语音图像技术突飞猛进，要像信任医生一样信任AI】</p><p>来源：Forbes AI</p><p>目前，AI技术仍然是炙手可热的话题。几乎每家顶级科技公司，如亚马逊、Facebook、微软和谷歌等，都在大力投资AI技术，不过这项技术已经不仅仅再是大公司的独有技术。AI技术的应用正变得更加容易和经济实惠。福布斯网站邀请了多位AI领域的企业人士，展望明年的AI应用新趋势。</p><p>链接：<a href=\"https://dwz.cn/vhamFEdh\" target=\"_blank\">https://dwz.cn/vhamFEdh</a></p><p><br></p><p>2.【学界&nbsp;|&nbsp;北大新成果！首次成功地将CNN解码器用于代码生成】</p><p>来源：量子位</p><p>最近，有一篇论文提出了一种基于语法的结构化CNN代码生成器，用《炉石传说》（HearthStone）基准数据集进行实验的结果表明：准确性上明显优于以前最先进的方法5个百分点。这篇论文目前已经被AAAI&nbsp;2019收录。作者在论文中表示，他们是第一个成功地将CNN解码器用于代码生成的团队。</p><p>链接：<a href=\"https://new.qq.com/omn/20181125/20181125A0Q0NW.html\" target=\"_blank\">https://new.qq.com/omn/20181125/20181125A0Q0NW.html</a></p><p><br></p><p>3.【新闻&nbsp;|&nbsp;Alexa又添新技能：用纯正的播音员声音读新闻】</p><p>来源：The&nbsp;Verge</p><p>亚马逊的Alexa又在继续学习新技能，将可以被用于进行专业的新闻解读，几周后，具有“播音员风格”的声音即会被内置于Alexa中。亚马逊称，Alexa新的语音运用了公司开发的&nbsp;NTTS（neural&nbsp;text-to-speech）技术，这种新一代语音合成技术可以更快地使用机器学习来生成富有表现力的声音。</p><p>链接：<a href=\"https://www.leiphone.com/news/201811/7sUglw587rCyKXuB.html\" target=\"_blank\">https://www.leiphone.com/news/201811/7sUglw587rCyKXuB.html</a></p><p><br></p><p>4.【新闻&nbsp;|&nbsp;2018赴美留学新生全线下滑，数学和计算机科学专业大涨】</p><p>来源：新智元</p><p>日前，美国国际教育协会发布了《2018美国门户开放报告》，提供了赴美留学的最新信息，这份报告有几个亮点：1、赴美留学新生人数全线下滑，研究生新生首次出现下降；2、中国留学大军依旧是美国国际学生的最大来源；3、数学和计算机科学专业大涨11%，AI带动了就读人数；4、纽约、南加州和东北大学是国际留学生数量前三。</p><p>链接：<a href=\"https://dwz.cn/bEQvp98k\" target=\"_blank\">https://dwz.cn/bEQvp98k</a></p><p><br></p>','','saucxs','2018-11-26 10:03:37',8,0,1,0,37,'福布斯2019 AI趋势大预测：语音图像技术突飞猛进，要像信任医生一样信任AI,北大新成果！首次成功地将CNN解码器用于代码生成,Alexa又添新技能：用纯正的播音员声音读新闻,2018赴美留学新生全线下滑，数学和计算机科学专业大涨',1,1,'网络',2,0,0,0,0,0),(459,'阿里云变阵阿里云智能，换帅行巅！与腾讯、华为三云争霸,李飞飞新论文「AI医生」诊断抑郁症，准确率超过80%，可移植到手机端,谷歌AI团队推新型\"流体标注\":图像标注速度提高三倍,中国诞生世界首例基因编辑婴儿！HIV免疫能力与生俱来','阿里云变阵阿里云智能，换帅行巅！与腾讯、华为三云争霸,李飞飞新论文「AI医生」诊断抑郁症，准确率超过80%，可移植到手机端,谷歌AI团队推新型\"流体标注\":图像标注速度提高三倍,中国诞生世界首例基因编辑婴儿！HIV免疫能力与生俱来','<p>1.【今日资讯头条&nbsp;|&nbsp;阿里云变阵阿里云智能，换帅行巅！与腾讯、华为三云争霸】</p><p>来源：阿里巴巴等</p><p>双十一后，阿里迎来重大架构调整，云和AI上升到无比重要位置：阿里云升级为阿里云智能，阿里人工智能实验室进入集团创新业务事业群，成立新零售技术事业群。至此云市场主要玩家在近两年内几乎都经历了架构调整，开战在即。</p><p>链接：<a href=\"https://dwz.cn/AtEhf5TR\" target=\"_blank\">https://dwz.cn/AtEhf5TR</a></p><p><br></p><p>2.【学界&nbsp;|&nbsp;李飞飞新论文「AI医生」诊断抑郁症，准确率超过80%，可移植到手机端】</p><p>来源：量子位</p><p>近日，李飞飞和她的团队瞄准了AI诊断抑郁症这个方向：结合语音识别、计算机视觉和自然语言处理技术，通过表情和语言诊断一个人是否患了抑郁症。目前，这项研究初见成效，诊断抑郁症的机器学习模型目前precision达到83.3%，recall达到82.6%。</p><p>链接：<a href=\"https://dwz.cn/wkMs56aD\" target=\"_blank\">https://dwz.cn/wkMs56aD</a></p><p><br></p><p>3.【新闻&nbsp;|&nbsp;谷歌AI团队推新型\"流体标注\":图像标注速度提高三倍】</p><p>来源：网易智能</p><p>谷歌AI团队近日推出了一款新型图像标注方式——“流体标注”，即采用机器学习来注释分类标签并勾勒出图片中的每个对象和背景区域。谷歌官方表示其可将标记数据集的速度提高三倍。但该模型尚不完美，谷歌称，物体边界标记问题、界面操作速度以及类别扩展等仍需进一步研究或完善。</p><p>链接：<a href=\"http://tech.163.com/18/1126/09/E1HDMHAC00097U7T.html\" target=\"_blank\">http://tech.163.com/18/1126/09/E1HDMHAC00097U7T.html</a></p><p><br></p><p>4.【新闻&nbsp;|&nbsp;中国诞生世界首例基因编辑婴儿！HIV免疫能力与生俱来】</p><p>来源：&nbsp;DeepTech</p><p>据人民网今日报道，来自中国深圳南方科技大学的贺建奎团队，在第二届国际人类基因组编辑峰会召开前一日突然宣布，一对名为露露和娜娜的基因编辑婴儿已经于&nbsp;11&nbsp;月在中国健康诞生。消息发出后引发全球学界震动。这对双胞胎的一个基因经过修改，使她们出生后即能天然抵抗艾滋病。</p><p>链接：<a href=\"https://dwz.cn/SWEWE8bm\" target=\"_blank\">https://dwz.cn/SWEWE8bm</a></p><p><br></p>','','saucxs','2018-11-26 22:22:42',26,0,1,0,37,'阿里云变阵阿里云智能，换帅行巅！与腾讯、华为三云争霸,李飞飞新论文「AI医生」诊断抑郁症，准确率超过80%，可移植到手机端,谷歌AI团队推新型\"流体标注\":图像标注速度提高三倍,中国诞生世界首例基因编辑婴儿！HIV免疫能力与生俱来',1,1,'网络',2,0,0,0,0,0),(460,'sau交流学习社区-前端开发-透明实现：opacity是整个dom透明；background中rgba是背景色透明','sau交流学习社区，saucxs，程新松，前端开发-透明实现：opacity是整个dom透明；background中rgba是背景色透明','<p>需求：需要透明背景,但是图片不要透明</p><p>最初：</p><p><img src=\"https://www.mwcxs.top/static/upload/pics/2018/11/26vR_K1rB8ibJH9lnfWYYqxQWS.png\" alt=\"\"></p><p>使用方法opacity</p><pre><code>background: #ccc;\nopacity: 0.6;<br></code></pre><p>这种实现的是整个dom透明：</p><p><img src=\"https://www.mwcxs.top/static/upload/pics/2018/11/26zFTORRvbKrSFB05PH91dqPxe.png\" alt=\"\"></p><p>方法rgba</p><pre><code>background: rgba(77, 77, 77, 0.6);</code></pre><p>实现的是背景色的透明</p><p></p><p><img src=\"https://www.mwcxs.top/static/upload/pics/2018/11/26czTnYbuAvq_2LSenaOE3HpTI.png\" alt=\"\"></p><p><br></p>','/static/upload/pics/2018/11/27tHLIT_b1CuuInVSKpkqJHMNC.png','saucxs','2018-11-27 23:28:00',9,1,0,0,1,'sau交流学习社区,saucxs,程新松,前端开发,透明实现,opacity是整个dom透明,background中rgba是背景色透明',1,1,'',1,0,0,0,0,0),(461,'sau交流学习社区--基于node+vue+redis+mysql+es6开发的周报企业管理系统weekly','周报系统weekly主要是node+vue+redis+mysql+es6，一个企业管理系统，企业员工汇报每周工作情况，以及完成情况，各级负责人可以查看和提醒相应未写周报人员。http://weekly.mwcxs.top','<h1 id=\"weekly\"><a href=\"https://github.com/saucxs/weekly\">weekly</a></h1>\n<p>周报系统主要是node+vue+redis+mysql+es6，一个企业管理系统，企业员工汇报每周工作情况，以及完成情况，各级负责人可以查看和提醒相应未写周报人员。<br>，后端完全使用<code>nodeJS</code>，数据库使用<code>mysql</code>，基于<code>nodejs的thinkjs框架搭建的</code>，如果喜欢<code>nodeJS</code>写的后端，支持大前端，支持全栈开发，请请<code>star</code>并<code>fork</code>项目。</p>\n<blockquote>\n系统演示地址为：<a href=\"http://weekly.mwcxs.top\">周报线上地址</a>。<br>（公司负责人）账号：testadmin，密码：123456<br>（部门经理）账号：test，密码：123456<br>（成员）账号：teststaff，密码：123456<br><ul>\n</ul>\n</blockquote>\n<p>如有使用问题请留言。</p>\n<h3 id=\"-\">公告：</h3>\n<blockquote>\n1.不要删除默认的账号，以及相关东西<br>2.自己可以新建账号来测试，玩耍<br>3.每一个公司（组织机构）都是独立，每一个部门是独立，互不干扰<br>4.如果有商务要求，可以对接我，邮箱:<a href=\"mailto:saucxs@163.com\">saucxs@163.com</a>，新建自己公司（组织机构）统一管理。<br><ul>\n</ul>\n</blockquote>\n<h3 id=\"-\">功能点：</h3>\n<blockquote>\n1、所有人周报提交修改；<br>2、所有人周报自身周报历史查看；<br>3、部门经理查看部门周报填写情况，增改部门人员；<br>4、总监（或公司拥有者）查看和修改所有人的周报填写情况，增删改公司人员，增改公司部门；<br>5、管理员权限，增删改公司总监，增删改部门人员，增删改公司部门，查看和编辑所有所有的周报，以及所有所有周报填写情况；<br><ul>\n</ul>\n</blockquote>\n<h3 id=\"-\">一、技术栈</h3>\n<blockquote>\nThinkJS（ Node端框架） <a href=\"https://thinkjs.org/\">官方网站</a><br>Vue.js（客户端双向数据绑定框架）  <a href=\"https://cn.vuejs.org/\">官方网站</a><br><ul>\n</ul>\n</blockquote>\n<h3 id=\"-\">二、版本功能</h3><p>\n[x] Element UI</p><p>[x] 登录/注销</p><p>[x] 个人中心</p><p>[x] 修改用户信息</p><p>[x] 修改密码</p><p>[x] mysql</p><p>[x] 写周报</p><p>[x] 个人历史周报</p><p>[x] 部门人员管理</p><p>[x] 部门周报情况</p><p>[x] 公司的部门新建，修改，删除</p><ul>\n</ul>\n<ul>\n<li><ul>\n</ul>\n</li></ul><p>2018.09.18</p><p>完成基本版本的功能</p><ul>\n<li><ul>\n</ul>\n</li></ul><p>2018.09.20部门经理权限优化</p><p>左侧增加首页</p><p>部门人员管理增加查询，可根据用户名，工号，公司名，部门名称，查询部门成员</p><ul>\n<li><ul>\n</ul>\n</li></ul><p>2018.10.12</p><p>   优化权限管理</p><br><ul>\n</ul>\n<h3 id=\"-\"><ul><li>三、系统截图<br></li></ul></h3>\n<h4 id=\"3-1-\">3.1 登录页</h4>\n<p><img src=\"https://github.com/saucxs/weekly/raw/master/shot_pic_1.png\" alt=\"image\"></p>\n<h4 id=\"3-2-\">3.2 成员页面</h4>\n<p><img src=\"https://github.com/saucxs/weekly/raw/master/shot_pic_staff.png\" alt=\"image\"></p>\n<h4 id=\"3-3-\">3.3 部门经理页面</h4>\n<p><img src=\"https://github.com/saucxs/weekly/raw/master/shot_pic_2_manger.png\" alt=\"image\"></p>\n<h4 id=\"3-4-\">3.4 总监页面</h4>\n<p><img src=\"https://github.com/saucxs/weekly/raw/master/shot_pic_2_big_manger.png\" alt=\"image\"></p>\n<h4 id=\"3-5-\">3.5 管理员页面</h4>\n<p><img src=\"https://github.com/saucxs/weekly/raw/master/shot_pic_admin.png\" alt=\"image\"></p>\n<h3 id=\"-\"><br></h3><h3 id=\"-\">四、本地运行程序</h3>\n<p>1、首先你的环境是nodejs，不会安装配置参考：<a href=\"http://www.mwcxs.top/page/420.html\">nodejs安装和环境配置（Windows）</a></p>\n<p>2、clone下来项目</p>\n<pre><code>git clone https://github.com/saucxs/weekly.git\n</code></pre><p>3、分别针对前端vue的weekly-web的文件夹和node后端weekly-node，安装相应依赖</p>\n<pre><code>npm install\n</code></pre><p>4、安装redis（可以考虑安装RedisDesktopManager）</p>\n<p>参考：<a href=\"http://www.mwcxs.top/page/421.html\">安装window下的redis，redis可视化管理工具（Redis Desktop Manager）安装，基础使用，实例化项目</a></p>\n<p>5、安装mysql，这个就不赘述</p>\n<p>6、修改nodejs的后端的配置文件adapter.js，config.js这两个文件中</p>\n<pre><code>adapter.js\n\nexports.cache = {\n    type: \'redis\',\n    common: {\n        timeout: 24 * 60 * 60 * 1000 // millisecond\n    },\n    redis: {\n        handle: redisCache,\n        host: \'127.0.0.1\',\n        port: 6379,\n        password: \'a123456\'  //redis安装时候设置的秘密\n    }\n};\n//\n//\nexports.model = {\n  type: \'mysql\',\n  common: {\n    logConnect: true,\n    logSql: true,\n    logger: msg =&gt; think.logger.info(msg)\n  },\n  mysql: {\n    handle: mysql,\n    database: \'weekly\',\n    prefix: \'week_\',\n    encoding: \'utf8\',\n    host: \'127.0.0.1\',   //本地数据库\n    port: \'3306\',　　　　　//数据库端口\n    user: \'root\',    //数据库的用户名\n    password: \'123456\',    //数据库该用户名的密码\n    dateStrings: true\n  }\n};\n</code></pre><p>7、分别对前后端分离的项目启动</p>\n<p>(1)前端vue的weekly-web的启动</p>\n<pre><code>npm run dev\n</code></pre><p>(2)和node后端weekly-node的启动</p>\n<pre><code>npm start\n</code></pre><p><br></p>','/static/upload/pics/2018/11/27A02OeIs7gDMJ8M5kw5K3XVDf.png','saucxs','2018-11-27 23:50:07',15,1,0,0,1,'程新松,sau交流学习社区,周报系统,weekly,企业管理系统,redis,vuex',1,1,'',1,0,0,0,0,0),(462,'AI芯片年度最大融资，地平线将融资10亿美元,Aibee完成A轮6000万美元融资 宣布前阿里达摩院朱胜火加盟,奔走相告！亚马逊内部机器学习课程现向大众免费开放,我的八年博士生涯——CMU王赟写在入职Facebook之前','AI芯片年度最大融资，地平线将融资10亿美元,Aibee完成A轮6000万美元融资 宣布前阿里达摩院朱胜火加盟,奔走相告！亚马逊内部机器学习课程现向大众免费开放,我的八年博士生涯——CMU王赟写在入职Facebook之前','<p>1.【今日资讯头条&nbsp;|&nbsp;AI芯片年度最大融资，地平线将融资10亿美元】</p><p>来源：学术头条、EETimes、FT</p><p>地平线新一轮融资额或达10亿美元，估值最高40亿美元。清华大学AMiner日前出品2018年《人工智能芯片研究报告&nbsp;》，指出AI芯片学者主要集中在欧美，这一代AI芯片主要有memory&nbsp;wall、功耗高、性能和灵活度不平衡等问题。</p><p>链接：<a href=\"https://dwz.cn/UGbPEgjt\" target=\"_blank\">https://dwz.cn/UGbPEgjt</a></p><p><br></p><p>2.【业界&nbsp;|&nbsp;Aibee完成A轮6000万美元融资&nbsp;宣布前阿里达摩院朱胜火加盟】</p><p>来源：雷锋网</p><p>今天，前百度研究院院长林元庆创办的人工智能整体解决方案企业Aibee，正式对外宣布已完成A轮6000万美元融资。成立短短1年，Aibee总融资金额已达1亿美金，融资金额、速度均位居AI创企前列。公布融资消息同一时间，Aibee正式对外宣布，前阿里达摩院决策智能实验室负责人朱胜火正式加盟，出任联合创始人，全面负责Aibee的机器学习方向。</p><p>链接：<a href=\"https://www.leiphone.com/news/201811/tkUT8wDs2r2E55Uf.html\" target=\"_blank\">https://www.leiphone.com/news/201811/tkUT8wDs2r2E55Uf.html</a></p><p><br></p><p>3.【新闻&nbsp;|&nbsp;奔走相告！亚马逊内部机器学习课程现向大众免费开放】</p><p>来源：机器之心</p><p>从今天开始，任何人都可以从&nbsp;AWS&nbsp;上获取亚马逊用来训练内部工程师的机器学习课程。该课程已经实施了&nbsp;20&nbsp;多年。公司内部上千的工程师都专于机器学习，因此亚马逊的零售页面、产品、实现技术和商店少有不提升的。很多&nbsp;AWS&nbsp;客户都从中受益，现在，亚马逊打算向所有开发者开放这些课程。</p><p>链接：<a href=\"https://dwz.cn/iODa9mJr\" target=\"_blank\">https://dwz.cn/iODa9mJr</a></p><p><br></p><p>4.【分享&nbsp;|&nbsp;我的八年博士生涯——CMU王赟写在入职Facebook之前】</p><p>来源：王赟&nbsp;Maigo</p><p>最近，在CMU语言技术研究所读博的王赟博士毕业即将加入Facebook，他对学术、娱乐有自己的认识。“从&nbsp;2010&nbsp;年&nbsp;8&nbsp;月到&nbsp;2018&nbsp;年&nbsp;10&nbsp;月，我把我最好的青春年华都献给了卡内基梅隆大学的语言技术研究所......整整八年的学习，让我对语音识别、深度学习等各个领域的理论基础有了扎实的掌握。”</p><p>链接：<a href=\"https://new.qq.com/omn/20181127/20181127A0PI6600\" target=\"_blank\">https://new.qq.com/omn/20181127/20181127A0PI6600</a></p><p><br></p>','','saucxs','2018-11-28 12:09:49',1,0,1,0,37,'AI芯片年度最大融资，地平线将融资10亿美元,Aibee完成A轮6000万美元融资 宣布前阿里达摩院朱胜火加盟,奔走相告！亚马逊内部机器学习课程现向大众免费开放,我的八年博士生涯——CMU王赟写在入职Facebook之前',1,1,'网络',2,0,0,0,0,0);
/*!40000 ALTER TABLE `li_article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `li_comment`
--

DROP TABLE IF EXISTS `li_comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `li_comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `aid` int(11) DEFAULT NULL COMMENT '文章id',
  `author` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `email` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `qq` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `comment` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `belongid` int(11) DEFAULT '0' COMMENT '回复的评论id',
  `dig` int(11) DEFAULT '0',
  `tipoff` int(11) DEFAULT '0' COMMENT '举报',
  `createtime` datetime DEFAULT NULL,
  `pic` varchar(255) COLLATE utf8_bin DEFAULT '' COMMENT '头像',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `li_comment`
--

LOCK TABLES `li_comment` WRITE;
/*!40000 ALTER TABLE `li_comment` DISABLE KEYS */;
/*!40000 ALTER TABLE `li_comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `li_guest`
--

DROP TABLE IF EXISTS `li_guest`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `li_guest` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `nickname` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `contact` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `guest` varchar(255) COLLATE utf8_bin NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=41 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `li_guest`
--

LOCK TABLES `li_guest` WRITE;
/*!40000 ALTER TABLE `li_guest` DISABLE KEYS */;
/*!40000 ALTER TABLE `li_guest` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `li_headerlink`
--

DROP TABLE IF EXISTS `li_headerlink`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `li_headerlink` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(128) DEFAULT NULL,
  `url` varchar(512) DEFAULT NULL,
  `desciption` varchar(1024) DEFAULT NULL,
  `show` varchar(4) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `li_headerlink`
--

LOCK TABLES `li_headerlink` WRITE;
/*!40000 ALTER TABLE `li_headerlink` DISABLE KEYS */;
INSERT INTO `li_headerlink` VALUES (1,'weekly','http://weekly.mwcxs.top','weekly周报系统','true'),(2,'loveBook','http://book.mwcxs.top','loveBook','true');
/*!40000 ALTER TABLE `li_headerlink` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `li_item`
--

DROP TABLE IF EXISTS `li_item`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `li_item` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `itemname` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `li_item`
--

LOCK TABLES `li_item` WRITE;
/*!40000 ALTER TABLE `li_item` DISABLE KEYS */;
INSERT INTO `li_item` VALUES (1,'文章'),(2,'资讯'),(3,'nodejs'),(4,'资源下载'),(5,'招聘'),(6,'活动'),(8,'文档'),(10,'新闻');
/*!40000 ALTER TABLE `li_item` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `li_links`
--

DROP TABLE IF EXISTS `li_links`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `li_links` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `domain` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `link` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `logo` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `qq` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `notice` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `flag` varchar(255) COLLATE utf8_bin DEFAULT '0' COMMENT '是否通过',
  `orders` int(255) DEFAULT '0' COMMENT '顺序',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=61 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `li_links`
--

LOCK TABLES `li_links` WRITE;
/*!40000 ALTER TABLE `li_links` DISABLE KEYS */;
INSERT INTO `li_links` VALUES (30,'苏宁云','https://www.suningcloud.com/','','',NULL,'1',0),(31,'东方财富','http://www.eastmoney.com/','','',NULL,'1',0),(32,'safeguard eagle博客园','http://www.cnblogs.com/chengxs','','184866445','','1',0),(33,'weekly周报系统','http://weekly.mwcxs.top','','184866445','','1',0),(34,'loveBook小说系统wepApp','http://book.mwcxs.top/','','184866445','','1',0),(40,'技术交流学习社区','https://www.mwcxs.top','','',NULL,'1',0),(41,'交流学习社区','https://www.mwcxs.top','','',NULL,'1',0),(42,'技术交流学习博客','https://www.mwcxs.top','','',NULL,'1',0),(43,'小程序开发','https://www.mwcxs.top','','',NULL,'1',1);
/*!40000 ALTER TABLE `li_links` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `li_manage_permission`
--

DROP TABLE IF EXISTS `li_manage_permission`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `li_manage_permission` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `pername` varchar(255) DEFAULT NULL,
  `permission` text,
  `tag` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=71 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `li_manage_permission`
--

LOCK TABLES `li_manage_permission` WRITE;
/*!40000 ALTER TABLE `li_manage_permission` DISABLE KEYS */;
INSERT INTO `li_manage_permission` VALUES (1,'新建/编辑文章','admin/content/article',1),(2,'添加markdown','admin/content/addmarkdown',1),(3,'文章列表','admin/content/index',1),(7,'后台首页','admin/index/index',4),(8,'后台欢迎页','admin/index/welcome',4),(9,'草稿箱文章列表','admin/content/draftlist',1),(10,'新增/编辑文章提交接口','admin/content/doadd',1),(11,'草稿箱发布接口','admin/content/updatestatus',1),(12,'删除/批量删除文章接口','admin/content/delsome',1),(13,'上传文章缩略图接口','admin/content/upload',1),(14,'上传编辑器图片接口','admin/content/uploadeditor',1),(15,'上传markdown文件及解析接口/内容分页','admin/content/uploadfile',1),(16,'留言列表','admin/guest/index',5),(17,'删除/批量留言接口','admin/guest/delsome',5),(18,'退出后台接口','admin/index/logout',4),(19,'栏目列表','admin/item/index',6),(20,'新增/编辑栏目','admin/item/item',6),(21,'新增/编辑栏目接口','admin/item/save',6),(22,'删除/批量删除栏目接口','admin/item/delsome',6),(23,'申请列表','admin/links/index',14),(24,'删除/批量删除友情链接接口','admin/links/delsome',14),(25,'导航列表','admin/menu/index',2),(26,'新增/编辑导航','admin/menu/item',2),(27,'编辑/新增导航接口','admin/menu/save',2),(28,'删除/批量删除导航接口','admin/menu/delsome',2),(29,'权限列表','admin/permission/index',10),(30,'新增/编辑权限','admin/permission/item',10),(31,'编辑/新增权限接口','admin/permission/save',10),(32,'删除/批量删除权限接口','admin/permission/delsome',10),(33,'权限分类列表','admin/pertag/index',10),(34,'新增/编辑权限分类','admin/pertag/item',10),(35,'编辑/新增权限分类接口','admin/pertag/save',10),(36,'删除/批量删除权限分类接口','admin/pertag/delsome',10),(37,'角色列表','admin/role/index',10),(38,'新增/编辑角色','admin/role/item',10),(39,'新增/编辑角色接口','admin/role/save',10),(40,'删除/批量删除角色接口','admin/role/delsome',10),(41,'角色分配权限页','admin/role/perlist',10),(42,'角色分配权限保存接口','admin/role/rolesave',10),(43,'标签列表','admin/tag/index',9),(44,'新增/编辑标签','admin/tag/item',9),(45,'新增/编辑标签接口','admin/tag/save',9),(46,'删除/批量删除标签接口','admin/tag/delsome',9),(47,'用户列表','admin/user/index',8),(48,'新增/编辑用户','admin/user/item',8),(49,'新增/编辑用户接口','admin/user/save',8),(50,'删除/批量删除用户接口','admin/user/delsome',8),(51,'常规设置','admin/system/index',11),(52,'常规设置保存接口','admin/system/edit',11),(53,'评论设置','admin/system/setcomment',11),(54,'评论设置保存接口','admin/system/commentedit',11),(55,'管理员列表','admin/user/adminlist',8),(56,'评论列表','admin/comment/index',12),(57,'举报列表','admin/comment/tiplist',12),(58,'主题列表','admin/topic/index',13),(59,'显示/隐藏主题','admin/topic/update',13),(60,'主题标签管理','admin/topictag/index',13),(61,'新增/编辑主题分类','admin/topictag/item',13),(62,'新增/编辑主题分类接口','admin/topictag/save',13),(63,'删除/批量删除主题标签接口','admin/topictag/delsome',13),(64,'链接管理','admin/links/list',14),(65,'新增/编辑友情链接	','admin/links/item',14),(66,'新增/编辑友情链接接口','admin/links/save',14),(67,'显示/隐藏友情链接接口','admin/links/upstatus',14),(68,'设置logo','admin/system/setlogo',11),(69,'上传logo接口','admin/system/upload',11),(70,'baidu实时提交','admin/content/baidu',15);
/*!40000 ALTER TABLE `li_manage_permission` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `li_manage_role`
--

DROP TABLE IF EXISTS `li_manage_role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `li_manage_role` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `role` varchar(255) DEFAULT NULL,
  `rolename` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `pid` text,
  `permission` longtext CHARACTER SET utf8 COLLATE utf8_bin,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `li_manage_role`
--

LOCK TABLES `li_manage_role` WRITE;
/*!40000 ALTER TABLE `li_manage_role` DISABLE KEYS */;
INSERT INTO `li_manage_role` VALUES (1,'superadmin','超级管理员','1,2,3,9,10,11,12,13,14,15,25,26,27,28,7,8,18,16,17,19,20,21,22,47,48,49,50,55,43,44,45,46,29,30,31,32,33,34,35,36,37,38,39,40,41,42,51,52,53,54,68,69,56,57,58,59,60,61,62,63,23,24,64,65,66,67,70','admin/content/article,admin/content/addmarkdown,admin/content/index,admin/content/draftlist,admin/content/doadd,admin/content/updatestatus,admin/content/delsome,admin/content/upload,admin/content/uploadeditor,admin/content/uploadfile,admin/menu/index,admin/menu/item,admin/menu/save,admin/menu/delsome,admin/index/index,admin/index/welcome,admin/index/logout,admin/guest/index,admin/guest/delsome,admin/item/index,admin/item/item,admin/item/save,admin/item/delsome,admin/user/index,admin/user/item,admin/user/save,admin/user/delsome,admin/user/adminlist,admin/tag/index,admin/tag/item,admin/tag/save,admin/tag/delsome,admin/permission/index,admin/permission/item,admin/permission/save,admin/permission/delsome,admin/pertag/index,admin/pertag/item,admin/pertag/save,admin/pertag/delsome,admin/role/index,admin/role/item,admin/role/save,admin/role/delsome,admin/role/perlist,admin/role/rolesave,admin/system/index,admin/system/edit,admin/system/setcomment,admin/system/commentedit,admin/system/setlogo,admin/system/upload,admin/comment/index,admin/comment/tiplist,admin/topic/index,admin/topic/update,admin/topictag/index,admin/topictag/item,admin/topictag/save,admin/topictag/delsome,admin/links/index,admin/links/delsome,admin/links/list,admin/links/item,admin/links/save,admin/links/upstatus,admin/content/baidu'),(2,'admin','管理员','1,2,3,9,10,11,12,13,14,15,25,26,27,28,7,8,18,16,17,19,20,21,22,23,24,47,43,44,45,46,70','admin/content/article,admin/content/addmarkdown,admin/content/index,admin/content/draftlist,admin/content/doadd,admin/content/updatestatus,admin/content/delsome,admin/content/upload,admin/content/uploadeditor,admin/content/uploadfile,admin/menu/index,admin/menu/item,admin/menu/save,admin/menu/delsome,admin/index/index,admin/index/welcome,admin/index/logout,admin/guest/index,admin/guest/delsome,admin/item/index,admin/item/item,admin/content/save,admin/item/delsome,admin/links/index,admin/links/delsome,admin/user/index,admin/tag/index,admin/tag/item,admin/tag/save,admin/tag/delsome,admin/content/baidu'),(3,'editor','编辑','1,2,3,9,10,11,12,13,14,15,7,8,18,70','admin/content/article,admin/content/addmarkdown,admin/content/index,admin/content/draftlist,admin/content/doadd,admin/content/updatestatus,admin/content/delsome,admin/content/upload,admin/content/uploadeditor,admin/content/uploadfile,admin/index/index,admin/index/welcome,admin/index/logout,admin/content/baidu'),(4,'visitor','访客','3,9,25,7,8,18,16,19,23,47,43','admin/content/index,admin/content/draftlist,admin/menu/index,admin/index/index,admin/index/welcome,admin/index/logout,admin/guest/index,admin/item/index,admin/links/index,admin/user/index,admin/tag/index');
/*!40000 ALTER TABLE `li_manage_role` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `li_manage_tag`
--

DROP TABLE IF EXISTS `li_manage_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `li_manage_tag` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `li_manage_tag`
--

LOCK TABLES `li_manage_tag` WRITE;
/*!40000 ALTER TABLE `li_manage_tag` DISABLE KEYS */;
INSERT INTO `li_manage_tag` VALUES (1,'文章管理'),(2,'导航管理'),(4,'基础页面'),(5,'留言管理'),(6,'栏目管理'),(8,'用户管理'),(9,'标签管理'),(10,'权限管理'),(11,'系统设置'),(12,'评论管理'),(13,'社区管理'),(14,'友情链接');
/*!40000 ALTER TABLE `li_manage_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `li_menu`
--

DROP TABLE IF EXISTS `li_menu`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `li_menu` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `menuname` varchar(255) CHARACTER SET utf8 DEFAULT NULL COMMENT '菜单名',
  `url` varchar(255) CHARACTER SET utf8 DEFAULT NULL COMMENT '导航链接',
  `info` varchar(255) CHARACTER SET utf8 DEFAULT NULL COMMENT '备注',
  `appear` int(11) DEFAULT '1',
  `orders` int(255) DEFAULT '0' COMMENT '排序',
  `target` int(11) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `li_menu`
--

LOCK TABLES `li_menu` WRITE;
/*!40000 ALTER TABLE `li_menu` DISABLE KEYS */;
INSERT INTO `li_menu` VALUES (1,'首页','/','',1,1,1),(2,'文档','/doc.html',NULL,0,2,0),(8,'资源下载','/download.html',NULL,0,3,0),(9,'活动','/activity.html',NULL,1,4,0),(10,'社区','/topic.html',NULL,1,5,0),(11,'招聘','/topic/job.html',NULL,0,6,0),(14,'捐赠','/donate.html',NULL,1,7,0),(15,'文章','/more.html',NULL,1,1,0),(16,'资讯','/news.html',NULL,1,1,1);
/*!40000 ALTER TABLE `li_menu` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `li_system`
--

DROP TABLE IF EXISTS `li_system`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `li_system` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `sitename` varchar(255) DEFAULT NULL,
  `url` varchar(255) DEFAULT NULL,
  `keywords` varchar(255) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `author` char(50) DEFAULT NULL,
  `copyright` varchar(255) DEFAULT NULL,
  `links` text,
  `allowcomment` int(11) DEFAULT '1',
  `tongji` text,
  `theme` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT 'default',
  `homeurl` varchar(45) DEFAULT NULL,
  `baidu_tuisong` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `li_system`
--

LOCK TABLES `li_system` WRITE;
/*!40000 ALTER TABLE `li_system` DISABLE KEYS */;
INSERT INTO `li_system` VALUES (1,'sau交流学习社区-power by saucxs(程新松)','/','sau交流学习社区,交流学习社区,程新松,交流学习社区程新松,saucxs,苏宁科技,东方财富','交流学习社区是基于thinkjs框架的nodeJSBlog系统,power by saucxs(程新松),交流学习社区具备完美兼容到PC端和无线端,并且拥有完善的轻量级网站后台,简单灵活,兼容性好.nodeJSBlog让您快速搭建中小型网站,博客,社区,论坛等','saucxs','2018 Copyright','<li><a href=\"https://www.mwcxs.top\" target=\"_blank\">交流学习社区</a></li>\n<li><a href=\"https://www.mwcxs.top\" target=\"_blank\">交流学习社区</a></li>\n<li><a href=\"https://www.mwcxs.top\" target=\"_blank\">交流学习社区</a></li>\n<li><a href=\"https://www.mwcxs.top\" target=\"_blank\">交流学习社区</a></li>\n<li><a href=\"https://www.mwcxs.top\" target=\"_blank\">交流学习社区</a></li>',0,'<script>\nvar _hmt = _hmt || [];\n(function() {\n  var hm = document.createElement(\"script\");\n  hm.src = \"https://hm.baidu.com/hm.js?8649e1cdb5dfb4c811b355ccbe389548\";\n  var s = document.getElementsByTagName(\"script\")[0]; \n  s.parentNode.insertBefore(hm, s);\n})();\n</script>','liblog','https://www.mwcxs.top/','<script>\n\n	(function(){\n\n		var canonicalURL, curProtocol;\n\n		//Get the <link> tag\n\n		var x=document.getElementsByTagName(\"link\");\n\n		//Find the last canonical URL\n\n		if(x.length > 0){\n\n			for (i=0;i<x.length;i++){\n\n				if(x[i].rel.toLowerCase() == \'canonical\' && x[i].href){\n\n					canonicalURL=x[i].href;\n\n				}\n\n			}\n\n		}\n\n		//Get protocol\n\n	    if (!canonicalURL){\n\n	    	curProtocol = window.location.protocol.split(\':\')[0];\n\n	    }\n\n	    else{\n\n	    	curProtocol = canonicalURL.split(\':\')[0];\n\n	    }\n\n	    //Get current URL if the canonical URL does not exist\n\n	    if (!canonicalURL) canonicalURL = window.location.href;\n\n	    //Assign script content. Replace current URL with the canonical URL\n\n    	!function(){var e=/([http|https]:\\/\\/[a-zA-Z0-9\\_\\.]+\\.baidu\\.com)/gi,r=canonicalURL,t=document.referrer;if(!e.test(r)){var n=(String(curProtocol).toLowerCase() === \'https\')?\"https://sp0.baidu.com/9_Q4simg2RQJ8t7jm9iCKT-xh_/s.gif\":\"//api.share.baidu.com/s.gif\";t?(n+=\"?r=\"+encodeURIComponent(document.referrer),r&&(n+=\"&l=\"+r)):r&&(n+=\"?l=\"+r);var i=new Image;i.src=n}}(window);})();\n\n</script>');
/*!40000 ALTER TABLE `li_system` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `li_system_comment`
--

DROP TABLE IF EXISTS `li_system_comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `li_system_comment` (
  `clientid` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `appcode` text CHARACTER SET utf8,
  `appkey` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `appid` varchar(255) CHARACTER SET utf8 NOT NULL DEFAULT '',
  `id` int(11) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`id`,`appid`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `li_system_comment`
--

LOCK TABLES `li_system_comment` WRITE;
/*!40000 ALTER TABLE `li_system_comment` DISABLE KEYS */;
INSERT INTO `li_system_comment` VALUES ('clientId','<!--高速版-->\n<div id=\"SOHUCS\"></div>\n<script charset=\"utf-8\" type=\"text/javascript\" src=\"http://changyan.sohu.com/upload/changyan.js\" ></script>\n<script type=\"text/javascript\"> \n(function(){ \nvar appid = \'cytTc84Uv\'; \nvar conf = \'prod_2a23e92e53049f733dec63ffc2d14994\'; \nvar width = window.innerWidth || document.documentElement.clientWidth; \nif (width < 960) { \nwindow.document.write(\'<script id=\"changyan_mobile_js\" charset=\"utf-8\" type=\"text/javascript\" src=\"https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=\' + appid + \'&conf=\' + conf + \'\"><\\/script>\'); } else { var loadJs=function(d,a){var c=document.getElementsByTagName(\"head\")[0]||document.head||document.documentElement;var b=document.createElement(\"script\");b.setAttribute(\"type\",\"text/javascript\");b.setAttribute(\"charset\",\"UTF-8\");b.setAttribute(\"src\",d);if(typeof a===\"function\"){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e===\"loaded\"||e===\"complete\"){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs(\"https://changyan.sohu.com/upload/changyan.js\",function(){window.changyan.api.config({appid:appid,conf:conf})}); } })(); </script>','4edd28137f2','cytTUv',1);
/*!40000 ALTER TABLE `li_system_comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `li_tags`
--

DROP TABLE IF EXISTS `li_tags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `li_tags` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `tagname` varchar(255) DEFAULT NULL,
  `appear` int(11) DEFAULT '1',
  `orders` int(255) DEFAULT '0' COMMENT '显示顺序',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=38 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `li_tags`
--

LOCK TABLES `li_tags` WRITE;
/*!40000 ALTER TABLE `li_tags` DISABLE KEYS */;
INSERT INTO `li_tags` VALUES (1,'web开发',1,0),(2,'thinkjs',1,1),(3,'nodejs',1,2),(4,'jquery',1,3),(5,'css3',1,4),(6,'html5',1,5),(7,'javascript',1,6),(8,'html',1,7),(9,'前端设计',1,8),(10,'fis',1,30),(11,'grunt',1,32),(12,'vscode',1,31),(13,'vue',1,9),(14,'活动',1,33),(15,'招聘',1,34),(16,'nginx',1,10),(18,'微信小程序',1,12),(19,'angular',1,13),(20,'react',1,14),(21,'wangeditor',1,15),(22,'numjucks',1,16),(23,'linux',1,5),(24,'docker',1,17),(25,'gitlab',1,18),(26,'webapp',1,19),(27,'软件工程',1,20),(28,'vuex',1,9),(29,'数据可视化',1,10),(30,'java',1,10),(31,'redis',1,5),(32,'android',1,11),(33,'MongoDB',1,15),(34,'分享',1,15),(35,'androidAPP',1,15),(36,'iosAPP',1,15),(37,'资讯',1,0);
/*!40000 ALTER TABLE `li_tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `li_topic`
--

DROP TABLE IF EXISTS `li_topic`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `li_topic` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `item` varchar(255) DEFAULT NULL,
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin COMMENT '内容',
  `author` varchar(255) DEFAULT NULL,
  `createtime` datetime DEFAULT NULL,
  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT '标题',
  `view` bigint(20) DEFAULT '1' COMMENT '点击数',
  `updatetime` datetime DEFAULT NULL,
  `updateauthor` varchar(255) DEFAULT NULL,
  `updatepic` varchar(255) DEFAULT NULL,
  `replycount` int(11) DEFAULT '0' COMMENT '回复数',
  `show` smallint(255) DEFAULT '1' COMMENT '是否显示',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=73 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `li_topic`
--

LOCK TABLES `li_topic` WRITE;
/*!40000 ALTER TABLE `li_topic` DISABLE KEYS */;
/*!40000 ALTER TABLE `li_topic` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `li_topic_comment`
--

DROP TABLE IF EXISTS `li_topic_comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `li_topic_comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `author` varchar(255) NOT NULL,
  `tid` bigint(20) DEFAULT NULL,
  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT '主题标题',
  `createtime` datetime DEFAULT NULL,
  `pic` varchar(255) DEFAULT '' COMMENT '回复者头像',
  `like` bigint(20) DEFAULT '0',
  `comment` longtext CHARACTER SET utf8 COLLATE utf8_bin,
  `likers` text,
  `oldcomment` longtext CHARACTER SET utf8 COLLATE utf8_bin,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=56 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `li_topic_comment`
--

LOCK TABLES `li_topic_comment` WRITE;
/*!40000 ALTER TABLE `li_topic_comment` DISABLE KEYS */;
/*!40000 ALTER TABLE `li_topic_comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `li_topic_item`
--

DROP TABLE IF EXISTS `li_topic_item`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `li_topic_item` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `comment` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `li_topic_item`
--

LOCK TABLES `li_topic_item` WRITE;
/*!40000 ALTER TABLE `li_topic_item` DISABLE KEYS */;
INSERT INTO `li_topic_item` VALUES (1,'share','分享');
/*!40000 ALTER TABLE `li_topic_item` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `li_user`
--

DROP TABLE IF EXISTS `li_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `li_user` (
  `id` int(100) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `nickname` varchar(255) DEFAULT NULL,
  `password` varchar(100) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `role` int(255) DEFAULT '4',
  `openid` varchar(255) DEFAULT NULL COMMENT '第三方登录标识',
  `pic` varchar(255) DEFAULT '' COMMENT '头像',
  `way` varchar(255) DEFAULT 'site' COMMENT '登录方式',
  `point` varchar(255) DEFAULT '10' COMMENT '积分',
  `sign` text COMMENT '个性签名',
  `createtime` datetime DEFAULT NULL,
  `level` int(11) DEFAULT '1' COMMENT '等级',
  `vip` int(11) DEFAULT '0' COMMENT 'vip',
  `isverify` int(11) DEFAULT '0' COMMENT '是否已验证邮箱',
  `forgetFlag` tinyint(4) DEFAULT NULL COMMENT '是否找回密码，1--是，0--否',
  `forget_uuidCode` varchar(512) DEFAULT NULL COMMENT '随机产生的授权码',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=105 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `li_user`
--

LOCK TABLES `li_user` WRITE;
/*!40000 ALTER TABLE `li_user` DISABLE KEYS */;
INSERT INTO `li_user` VALUES (56,'admin','admin','e10adc3949ba59abbe56e057f20f883e','15566151641@163.com',1,NULL,'common/images/pic/avatar_7.jpg','site','20',NULL,'2017-08-22 14:44:32',1,0,0,0,'GsIt0kI17DrOqu9Yd3wdoiDFp9HypM7lTsHH_uj6Qsp5T9xTYEeKWzYjbK7RwRG5W5qz_Jce2wS9Wk3HpK1N1Z0AjDUGBeRh6CYDkGCe5Cadzgl6bckkE_hNsYX3rWYL');
/*!40000 ALTER TABLE `li_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `li_user_collect`
--

DROP TABLE IF EXISTS `li_user_collect`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `li_user_collect` (
  `id` bigint(11) NOT NULL AUTO_INCREMENT,
  `url` varchar(255) DEFAULT NULL COMMENT '类型',
  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `author` varchar(255) DEFAULT NULL,
  `createtime` datetime DEFAULT NULL,
  `type` varchar(255) DEFAULT NULL,
  `aid` int(11) DEFAULT NULL COMMENT '文章id',
  `iscollect` int(11) DEFAULT '1' COMMENT '是否收藏',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=36 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `li_user_collect`
--

LOCK TABLES `li_user_collect` WRITE;
/*!40000 ALTER TABLE `li_user_collect` DISABLE KEYS */;
/*!40000 ALTER TABLE `li_user_collect` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2019-01-10 15:47:48
